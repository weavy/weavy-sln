<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weavy.Core</name>
    </assembly>
    <members>
        <member name="T:Weavy.Core.Events.AfterDeleteMessage">
            <summary>
             Runs just after a message was deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeleteMessage.Deleted">
            <summary>
            Gets the message that was deleted.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterDeleteUser">
            <summary>
             Runs just after a user was deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeleteUser.Deleted">
            <summary>
            Gets the user that was deleted.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterRestoreContent">
            <summary>
            Runs just after a content item was restored.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterRestoreContent.Restored">
            <summary>
            Gets the restored content item.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterTrashContent">
            <summary>
            Runs just after a content item was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterTrashContent.Trashed">
            <summary>
            Gets the trashed content item.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.IAsyncEvent">
            <summary>
            Interface for events that are handled asynchronously in a background thread.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertBlob">
            <summary>
            Runs just after a blob was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertBlob.Inserted">
            <summary>
            Gets the inserted blob.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterDeliverConversation">
            <summary>
            Runs just after a message was deliverered to a conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeliverConversation.User">
            <summary>
            Gets the user that had a message delivered.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeliverConversation.Conversation">
            <summary>
            Gets the conversation that had a message delivered.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.BeforeMentionUser">
            <summary>
            Runs just before a user is mentioned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.BeforeMentionUser.Entity">
            <summary>
            Gets the entity where the user is mentioned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.BeforeMentionUser.UserId">
            <summary>
            Id of the mentioned user.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUnstarEntity">
            <summary>
            Runs just after an entity was unstarred.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUnstarEntity.Unstarred">
            <summary>
            Gets the entity that was starred.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUnstarEntity.User">
            <summary>
            Gets the user that starred.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUnlikeEntity">
            <summary>
            Runs just after an entity was unliked.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUnlikeEntity.User">
            <summary>
            Gets the user that unliked the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUnlikeEntity.Unliked">
            <summary>
            Gets the unliked entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterSignOut">
            <summary>
            Runs just after a user signs out.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterSignOut.User">
            <summary>
            Gets the user that signed out.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterTrashSpace">
            <summary>
            Runs just after a space was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterTrashSpace.Trashed">
            <summary>
            Gets the deleted space.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterStarEntity">
            <summary>
            Runs just after an entity was starred.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterStarEntity.Starred">
            <summary>
            Gets the entity that was starred.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterStarEntity.User">
            <summary>
            Gets the user that starred.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterSignIn">
            <summary>
            Runs just after a user signs in.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterSignIn.User">
            <summary>
            Gets the user that signed in.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterPinConversation">
            <summary>
            Runs just after a conversation was pinned/unpinned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterPinConversation.User">
            <summary>
            Gets the user that pinned the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterPinConversation.Conversation">
            <summary>
            Gets the conversation that was pinned/unpinned.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUpdateConversation">
            <summary>
            Runs just after a conversation was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateConversation.Original">
            <summary>
            Gets the conversation before it was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateConversation.Updated">
            <summary>
            Gets the updated conversation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUpdateMessage">
            <summary>
            Runs just after a message was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateMessage.Updated">
            <summary>
            Gets the updated message.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUpdatePlugin">
            <summary>
            Runs just after the <see cref="T:Weavy.Core.Models.Plugin"/> was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdatePlugin.Original">
            <summary>
            Gets the orignal <see cref="T:Weavy.Core.Models.Plugin"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdatePlugin.Updated">
            <summary>
            Gets the updated <see cref="T:Weavy.Core.Models.Plugin"/>.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterDeliverMessage">
            <summary>
            Runs just after a message was delivered to a user.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeliverMessage.User">
            <summary>
            Gets the user that the message was delivered to.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeliverMessage.Message">
            <summary>
            Gets the message that was delivered.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterReadConversation">
            <summary>
            Runs just after a conversation was marked as read/unread.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterReadConversation.User">
            <summary>
            Gets the user that read the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterReadConversation.Conversation">
            <summary>
            Gets the conversation that was read/unread.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertNotification">
            <summary>
            Runs just after a notification was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertNotification.Inserted">
            <summary>
            Gets the inserted notification.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertConnection">
            <summary>
            Runs just after a user was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertConnection.Inserted">
            <summary>
            Gets the inserted connection.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertVote">
            <summary>
            Runs just after a vote was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertVote.Option">
            <summary>
            Gets the option that the user voted for.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertVote.User">
            <summary>
            Gets the user that voted.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterReadAllNotifications">
            <summary>
            Runs just after all notifications was read.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterReadAllNotifications.UserId">
            <summary>
            Gets the user that triggered read all notifications.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUpdateNotification">
            <summary>
            Runs just after a notification was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateNotification.Updated">
            <summary>
            Gets the inserted notification.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterDeleteConversation">
            <summary>
             Runs just after a conversation was deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeleteConversation.Deleted">
            <summary>
            Gets the conversation that was deleted.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertMessage">
            <summary>
            Runs just after a message was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertMessage.Inserted">
            <summary>
            Gets the inserted message.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterDeleteConnection">
            <summary>
             Runs just after a connection was deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeleteConnection.Deleted">
            <summary>
            Gets the connection that was deleted.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUpdateComment">
            <summary>
            Runs just after a comment was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateComment.Original">
            <summary>
            Gets the comment before it is updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateComment.Updated">
            <summary>
            Gets the comment after it was updated.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUpdateConnection">
            <summary>
            Runs just after a connection was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateConnection.Original">
            <summary>
            Gets the connection before it was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateConnection.Updated">
            <summary>
            Gets the updated connection.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertConversation">
            <summary>
            Runs just after a conversation was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertConversation.Inserted">
            <summary>
            Gets the conversation space.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterAddConversationMember">
            <summary>
            Runs just after a user was added to a conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterAddConversationMember.Conversation">
            <summary>
            Gets the conversation to which the user was added.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterAddConversationMember.Member">
            <summary>
            Gets the user that was added to the conversation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterAddMember">
            <summary>
            Runs just after a user was added to a space.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterAddMember.Space">
            <summary>
            Gets the space to which the user was added.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterAddMember.Member">
            <summary>
            Gets the member that was added to the space.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterDeleteComment">
            <summary>
             Runs just after a comment was deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeleteComment.Deleted">
            <summary>
            Gets the comment that was deleted.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterDeleteContent">
            <summary>
             Runs just after a content item was deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeleteContent.Deleted">
            <summary>
            Gets the item that was deleted.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterDeletePost">
            <summary>
             Runs just after a post was deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeletePost.Deleted">
            <summary>
            Gets the post that was deleted.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterRemoveConversationMember">
            <summary>
            Runs just after a user was removed from a conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterRemoveConversationMember.Conversation">
            <summary>
            Gets the conversation from which the user was removed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterRemoveConversationMember.User">
            <summary>
            Gets the user that was removed from the conversation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterFollowEntity">
            <summary>
            Runs just after an entity was followed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterFollowEntity.User">
            <summary>
            Gets the user that followed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterFollowEntity.Followed">
            <summary>
            Gets the followed entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterDeleteSpace">
            <summary>
            Runs just after a space was deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterDeleteSpace.Deleted">
            <summary>
            Gets the deleted space.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertContent">
            <summary>
            Runs just after a content item was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertContent.Inserted">
            <summary>
            Gets the inserted content item.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertComment">
            <summary>
            Runs just after a comment was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertComment.Inserted">
            <summary>
            Gets the inserted comment.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertPost">
            <summary>
            Runs just after a post was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertPost.Inserted">
            <summary>
            Gets the inserted post.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertSpace">
            <summary>
            Runs just after a space was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertSpace.Inserted">
            <summary>
            Gets the inserted space.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterInsertUser">
            <summary>
            Runs just after a user was inserted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterInsertUser.Inserted">
            <summary>
            Gets the inserted user.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterLikeEntity">
            <summary>
            Runs just after an entity was liked.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterLikeEntity.User">
            <summary>
            Gets the user that liked the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterLikeEntity.Liked">
            <summary>
            Gets the liked entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterMoveContent">
            <summary>
             Runs just after a content item was moved.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterMoveContent.Before">
            <summary>
            Gets the content item before it was moved.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterMoveContent.After">
            <summary>
            Gets the content item after it was moved.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterRemoveMember">
            <summary>
            Runs just after a user was removed from a space.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterRemoveMember.Space">
            <summary>
            Gets the space from which the user was removed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterRemoveMember.Member">
            <summary>
            Gets the member that was removed from the space.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterSendMail">
            <summary>
            Runs just after an email was sent.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterSendMail.Mail">
            <summary>
            Gets the email that was sent.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUpdateContent">
            <summary>
            Runs just after a content item was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateContent.Original">
            <summary>
            Gets the original content item (before it was updated).
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateContent.Updated">
            <summary>
            Gets the updated content item.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUpdateProfile">
            <summary>
            Runs just after a user profile was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateProfile.Original">
            <summary>
            Gets the user before it was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdateProfile.Updated">
            <summary>
            Gets the updated user.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterUpdatePost">
            <summary>
            Runs just after a post is updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdatePost.Original">
            <summary>
            Gets the post before it is updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterUpdatePost.Updated">
            <summary>
            Gets the post after it was updated.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.IEvent">
            <summary>
            Interface for events that are handled synchronously.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterResetPassword">
            <summary>
             Runs after a user submits a new password during password reset.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterResetPassword.User">
            <summary>
            Gets the user whose password is being reset.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.AfterSystemSetup">
            <summary>
            Runs just after the initial setup of Weavy.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.AfterSystemSetup.User">
            <summary>
            Gets the user that was created during setup.
            </summary>
        </member>
        <member name="T:Weavy.Core.Events.NotificationEmailUrl">
            <summary>
            Runs when an url to a notifications is requested in an email template.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.NotificationEmailUrl.Notification">
            <summary>
            Gets the notification.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.NotificationEmailUrl.User">
            <summary>
            Gets the user the email is created for.
            </summary>
        </member>
        <member name="P:Weavy.Core.Events.NotificationEmailUrl.Url">
            <summary>
            To override the default url - make sure your implementation of the hook sets this property.
            </summary>
        </member>
        <member name="T:Weavy.Core.Plugins.AutomaticCheckInDaemon">
            <summary>
            A daemon that nudges people to perform their daily and weekly checkins.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.AutomaticCheckInDaemon.DailyId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.AutomaticCheckInDaemon.WeeklyId">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.AutomaticCheckInDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            
            </summary>
            <param name="token"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.ZoomProxyDaemon">
            <summary>
            A daemon that checks various license related tasks.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.ZoomProxyDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Poll Zoom Proxy server.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.ZoomProxyDaemon.GetMeetingStatus(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Meeting})">
            <summary>
            Get meeting status from zoom proxy
            </summary>
            <param name="ongoing"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.ZoomProxyDaemon.UpdateEntity(Weavy.Core.Models.IEntity)">
            <summary>
            Since the related meeting was updated, trigger an update event on the corresponding entity to force an update in the UI.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="T:Weavy.Core.Plugins.ClientSecretDaemon">
            <summary>
            Periodically update client secrets to support multiple and rotating JWT signing keys.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.ClientSecretDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Check open id provider for updated JWKS.
            </summary>
            <param name="token"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.UploadHook">
            <summary>
            A hook that saves uploaded files to blob storage. Also creates thumbnails and extracts text for fulltext indexing (depending on configuration settings). 
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.UploadHook.Handle(Weavy.Core.Events.AfterInsertBlob)">
            <summary>
            Saves blob content to blob storage. Also creates thumbnails and extracts text for fulltext indexing (depending on configuration settings). 
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.PresenceDaemon">
            <summary>
            A daemon that keeps track of connections that the <see cref="T:Weavy.Core.Hubs.RealTimeHub"/> has seen. 
            It uses a time based system to verify if connections are *actually* still online.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.PresenceDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Update alive connections and delete zombies.
            </summary>
        </member>
        <member name="T:Weavy.Core.Plugins.PresenceHook">
            <summary>
            A hook that sends presence updates to connected clients. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.PresenceHook.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.PresenceHook.Handle(Weavy.Core.Events.AfterInsertConnection)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.PresenceHook.Handle(Weavy.Core.Events.AfterUpdateConnection)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.PresenceHook.Handle(Weavy.Core.Events.AfterDeleteConnection)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.PresenceHook.QueuePresence(Weavy.Core.Models.Connection)">
            <summary>
            Helper method for queuing presence updates.
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.PresenceHook.SendPresence(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Periodically check for queued presence updates.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Weavy.Core.Plugins.BoxScraper">
            <summary>
            Scraper for Box.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.BoxScraper.CanScrape(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.BoxScraper.Scrape(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="maxwidth"></param>
            <param name="maxheight"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.GiphyScraper">
            <summary>
            Scraper for Giphy.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.GiphyScraper.CanScrape(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.GiphyScraper.Scrape(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="maxwidth"></param>
            <param name="maxheight"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.GiphyScraper.GetId(System.String)">
            <summary>
            Extract giphy id from url.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.ActiveDirectoryDaemon">
            <summary>
            Syncs user and roles with Active Directory.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.ActiveDirectoryDaemon.Domain">
            <summary>
            Gets or sets the name of the domain or server.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.ActiveDirectoryDaemon.Username">
            <summary>
            Gets or sets the username to use when authenticating against the directory.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.ActiveDirectoryDaemon.Password">
            <summary>
            Gets or sets the password to use when authenticating against the directory.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.ActiveDirectoryDaemon.SyncRoles">
            <summary>
            Gets or sets a value indicating whether to include roles when syncing.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.ActiveDirectoryDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Imports user and role data from Active Directory.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.ActiveDirectoryDaemon.Synchronize(System.DirectoryServices.AccountManagement.PrincipalContext,Weavy.Core.Models.Login)">
            <summary>
            Synchronize users and roles with information from Active Directory.
            </summary>
            <param name="context"></param>
            <param name="login"></param>
            <returns>A <see cref="T:Weavy.Core.Models.User"/> with updated information from the Active directory.</returns>
        </member>
        <member name="T:Weavy.Core.Plugins.CleanupDaemon">
            <summary>
            A daemon that performs cleanup tasks.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.CleanupDaemon.Cache">
            <summary>
             Gets or sets a value indicating whether old files should be deleted from the /App_Data/Cache/ directory.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.CleanupDaemon.Files">
            <summary>
             Gets or sets a value indicating whether orphaned blobs should be deleted from the repository.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.CleanupDaemon.Notifications">
            <summary>
             Gets or sets a value indicating whether old notifications should be deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.CleanupDaemon.Temp">
            <summary>
             Gets or sets a value indicating whether old files should be deleted from the /App_Data/Temp/ directory.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.CleanupDaemon.Trash">
            <summary>
             Gets or sets a value indicating whether old stuff should be removed from the recycle bin.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.CleanupDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Clears the internal cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.CleanupDaemon.CleanupCache(System.Threading.CancellationToken)">
            <summary>
            Deletes files and folders from the /App_Data/Cache/ directory.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.CleanupDaemon.CleanupFiles(System.Threading.CancellationToken)">
            <summary>
            Deletes orphaned blobs from the repository.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.CleanupDaemon.CleanupNotifications(System.Threading.CancellationToken)">
            <summary>
            Deletes old notifications from the database.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.CleanupDaemon.CleanupTrash(System.Threading.CancellationToken)">
            <summary>
            Permanently delete old stuff from the recycle bin.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.CleanupDaemon.CleanupTemp(System.Threading.CancellationToken)">
            <summary>
            Deletes files and folders from the /App_Data/Temp/ directory.
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:Weavy.Core.Plugins.PushNotificationHook">
            <summary>
            A hook that sends push notifications to mobile devices for new messages and notifications.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.PushNotificationHook.Handle(Weavy.Core.Events.AfterInsertNotification)">
            <summary>
            Send push notification.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.PushNotificationHook.Handle(Weavy.Core.Events.AfterInsertMessage)">
            <summary>
            Send push notification to people in conversation.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.TestPushNotificationFunction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.TestPushNotificationFunction.Destination">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.TestPushNotificationFunction.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Sends a test notification to verify configurations settings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.StatisticsDaemon">
            <summary>
            A daemon that creates data points for displaying usage statistics.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.StatisticsDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Sample the system and create an entry in the statistics table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.NotificationDaemon">
            <summary>
            A daemon that sends notification emails.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.NotificationDaemon.EnableEmailNotifications">
            <summary>
            Gets or sets a value indicating whether email notifications are enabled.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.NotificationDaemon.EnableDailyDigest">
            <summary>
            Gets or sets a value indicating whether the daily digest email is enabled.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.NotificationDaemon.DailyDigestSentAt">
            <summary>
            Gets the date and time the daily digest email was last sent.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.NotificationDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Send email notifications
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.NotificationDaemon.GetSmtpClient">
            <summary>
            Helper method for re-using a smtp client and sending notification emails in batches.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.LicenseDaemon">
            <summary>
            A daemon that checks various license related tasks.
            </summary>
        </member>
        <member name="P:Weavy.Core.Plugins.LicenseDaemon.Schedule">
            <summary>
            Hard coded to run at 02:00 every daily.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.LicenseDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Refresh license information.
            </summary>
        </member>
        <member name="T:Weavy.Core.Plugins.IndexDaemon">
            <summary>
            A daemon that adds entities to the fulltext index.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.IndexDaemon.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Index entities that have changed since the last index operation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Plugins.AuditHook">
            <summary>
            A hook that logs all events in the system and notifies users about subscribed events.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterInsertSpace)">
            <summary>
            Logs the AfterInsertSpace event and subscribes the creator to the space.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterDeleteUser)">
            <summary>
            Logs the AfterDeleteUser event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterDeleteSpace)">
            <summary>
            Logs the AfterDeleteSpace event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterAddMember)">
            <summary>
            Logs the AfterAddMember event and notifies user that he was added to the space.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterRemoveMember)">
            <summary>
            Logs the AfterRemoveMember event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterResetPassword)">
            <summary>
            Logs the ResetPassword event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterUpdateProfile)">
            <summary>
            Logs the <see cref="T:Weavy.Core.Events.AfterUpdateProfile"/> event and post a message.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterInsertUser)">
            <summary>
            Logs the <see cref="T:Weavy.Core.Events.AfterInsertUser"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterInsertVote)">
            <summary>
            Handles the AfterInsertVote event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterDeletePost)">
            <summary>
            Logs the AfterDeletePost event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterAddConversationMember)">
            <summary>
            Logs the AfterJoinConversation event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterInsertConversation)">
            <summary>
            Logs the AfterInsertConversation event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterInsertPost)">
            <summary>
            Logs the AfterInsertPost event and creates relevant notifications.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterUpdatePost)">
            <summary>
            Logs the AfterUpdatePost event and creates relevant notifications.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterLikeEntity)">
            <summary>
            Logs the AfterLikeEntity event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterMoveContent)">
            <summary>
            Logs the AfterMoveItem event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterUpdateContent)">
            <summary>
            Logs the AfterUpdateContent event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterDeleteContent)">
            <summary>
            Logs the AfterDeleteContent event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterDeleteConversation)">
            <summary>
            Logs the AfterDeleteConversation event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterDeleteMessage)">
            <summary>
            Logs the AfterDeleteMessage event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterInsertContent)">
            <summary>
            Logs the AfterInsertContent event and sends the relevant notification.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterRemoveConversationMember)">
            <summary>
            Logs the AfterLeaveConversation event and posts a message in the conversation about the user leaving.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterDeleteComment)">
            <summary>
            Logs the AfterDeleteComment event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterFollowEntity)">
            <summary>
            Handles the AfterFollowEntity event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterInsertComment)">
            <summary>
            Logs the AfterInsertComment event and notifies people that follow the commented entity.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterUpdateComment)">
            <summary>
            Logs the AfterUpdateComment event and creates relevant notifications.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterSendMail)">
            <summary>
            Logs the SendMail event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterSignIn)">
            <summary>
            Logs the SignIn event.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Handle(Weavy.Core.Events.AfterSignOut)">
            <summary>
            Logs the SignOut event.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.Notify(Weavy.Core.Models.LogEntry,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Notification},System.Nullable{System.TimeSpan})">
            <summary>
            Creates a notification. If rollup is specified, looks for an existing notification to update.
            </summary>
            <param name="entry">The associated <see cref="T:Weavy.Core.Models.LogEntry"/>.</param>
            <param name="notifications">The list of <see cref="T:Weavy.Core.Models.Notification"/> to update/insert.</param>
            <param name="rollup">The time interval to search when rolling up similar events, <c>null</c> to skip rollup and just insert the notifications.</param>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.FindLogEntries(Weavy.Core.Models.LogEntry,System.DateTime)">
            <summary>
            Finds similar log entries created after the specified time.
            </summary>
            <param name="entry"></param>
            <param name="createdAfter"></param>
            <returns>Events that match the search criteria.</returns>
        </member>
        <member name="M:Weavy.Core.Plugins.AuditHook.RollupActors(Weavy.Core.Models.LogEntry,System.Collections.Generic.IEnumerable{Weavy.Core.Models.User},Weavy.Core.Models.Notification)">
            <summary>
            Returns a html string with rolled up actors.
            </summary>
            <param name="entry">The current <see cref="T:Weavy.Core.Models.LogEntry"/>.</param>
            <param name="actors">The persons involved in the rollup.</param>
            <param name="notification">The current <see cref="T:Weavy.Core.Models.Notification"/>.</param>
            <returns>The html string.</returns>
        </member>
        <member name="T:Weavy.Core.Plugins.Scraper">
            <summary>
            Default scraper that looks for embed data in the html source.
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.Scraper.CanScrape(System.String)">
            <summary>
            Gets a value indicating whether the specified URL is supported by this scraper.
            </summary>
            <param name="url">The URL to scrape.</param>
            <returns>
              <c>true</c> if the specified URL is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Weavy.Core.Plugins.Scraper.Scrape(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Returns embed data for the specified url.
            </summary>
            <param name="url">The URL to scrape.</param>
            <param name="maxwidth"></param>
            <param name="maxheight"></param>
            <returns>An <see cref="T:Weavy.Core.Models.Embed"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Plugins.Scraper.GetOpenGraphProperty(System.Collections.Generic.IEnumerable{HtmlAgilityPack.HtmlNode},System.String)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.Scraper.GetTwitterCardProperty(System.Collections.Generic.IEnumerable{HtmlAgilityPack.HtmlNode},System.String)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.Scraper.GetMetaProperty(System.Collections.Generic.IEnumerable{HtmlAgilityPack.HtmlNode},System.String)">
            <summary>
            
            </summary>
            <param name="nodes"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.Scraper.GetMetaContentAttribute(HtmlAgilityPack.HtmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Plugins.Scraper.GetNodeText(HtmlAgilityPack.HtmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Plugins.TestEmailFunction">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Plugins.TestEmailFunction.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Sends a test email to verify email settings.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.ApiBindAttribute">
            <summary>
            Attribute for controlling if a propery should be bound in Web API or not.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ApiBindAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bind"></param>
        </member>
        <member name="P:Weavy.Core.Models.ApiBindAttribute.Bind">
            <summary>
            Gets a value indicating wheter this propery should be bound in Web API or not.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.PasswordAttribute">
            <summary>
            Specifies that the data type of a field is password and should be masked in the UI.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PasswordAttribute.#ctor">
            <summary>
            Initializes a new instance of the PasswordAttribute.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PasswordAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error.</returns>
        </member>
        <member name="M:Weavy.Core.Models.PasswordAttribute.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
            <summary>
            
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="T:Weavy.Core.Models.HtmlAttribute">
            <summary>
            Specifies that the data type of a field is Html.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.HtmlAttribute.#ctor">
            <summary>
            Initializes a new instance of the HtmlAttribute class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.HtmlAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error.</returns>
        </member>
        <member name="M:Weavy.Core.Models.HtmlAttribute.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
            <summary>
            
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="T:Weavy.Core.Models.UriAttribute">
            <summary>
            Validates that a string property is a valid and fully qualified URI.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UriAttribute.#ctor">
            <summary>
            Initializes a new instance of the UriAttribute.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UriAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error.</returns>
        </member>
        <member name="M:Weavy.Core.Models.UriAttribute.IsValid(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.PropertyDictionary">
            <summary>
            An dictionary for storing properties (names and values). 
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PropertyDictionary._keywords">
            <summary>
            C# keywords http://msdn.microsoft.com/en-us/library/x53a06bb(v=vs.110).aspx
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.PropertyDictionary"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.#ctor(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Property})">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.PropertyDictionary"/> class with the specified property data.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.PropertyDictionary"/> class with the specified json data.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.ConvertIt(System.Object)">
            <summary>
            Manually convert values that JSON.NET cannot automagically deserialize.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.Get``1(System.String)">
            <summary>
            Gets the value associated with the specified key. 
            </summary>
            <typeparam name="T">The type of the value to get.</typeparam>
            <param name="key">The key of the value to get.</param>
            <returns>Returns the value associated with the specified key or the default value for <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gets the value of a property.
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Sets the value of a property.
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.LooksLikeTimeSpan(System.Object)">
            <summary>
            Returns a value indicating whether the supplied object looks like it could be converted to a TimeSpan.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.LooksLikeGuid(System.Object)">
            <summary>
            Returns a value indicating whether the supplied object looks like it could be converted to a Guid.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.ToEntity(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts a JToken to an IEntity.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.ToJson">
            <summary>
            Returns a json string that represents the dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.ToString">
            <summary>
            Returns a string that represents the dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the System.Collections.Generic.IDictionary`2 contains an element with the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Models.PropertyDictionary.Keys">
            <summary>
            Gets an System.Collections.Generic.ICollection`1 containing the keys of the System.Collections.Generic.IDictionary`2.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the System.Collections.Generic.IDictionary`2.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the
            key is found; otherwise, the default value for the type of the value parameter.
            </param>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Models.PropertyDictionary.Values">
            <summary>
            Gets an System.Collections.Generic.ICollection`1 containing the values in the System.Collections.Generic.IDictionary`2.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PropertyDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified property name.
            </summary>
            <param name="name">The name of the property to get or set.</param>
            <returns>The value associated with the specified property or null if the specified property was not found. A set operation creates a new property with the specified name.</returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.IsNameSupported(System.String)">
            <summary>
            Checks if the specified property name can be stored in the dictionary.
            </summary>
            <param name="name"></param>
            <returns>Returns <c>true</c> it <paramref name="name"/> is a valid C# identifier, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.IsTypeSupported(System.Type)">
            <summary>
            Checks if instances of the specified type can be stored in the dictionary. The following types are supported:
            
            <c>enum</c>
            <c>byte</c>, 
            <c>short</c>
            <c>int</c>
            <c>long</c>
            <c>bool</c>
            <c>double</c>
            <c>float</c>
            <c>string</c>
            <c>Guid</c>
            <c>DateTime</c>
            <c>TimeSpan</c>
            <c>IEntity</c>.
            <c>Entity</c>.
            <c>Entity&lt;T&gt;</c>.
            
            Nullables, IList&lt;&gt; and List&lt;&gt; of the types are also supported, e.g. int?, IList&lt;IEntity&gt; and List&lt;DateTime?&gt;.
            </summary>
            <param name="type">The type to check.</param>
            <returns><code>true</code> if the type is a valid, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.IsValueSupported(System.Object)">
            <summary>
            Checks if the specified value can be stored in the dictionary.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.GetElementType(System.Type)">
            <summary>
            Returns the type of the object encompassed by a generic list type.
            </summary>
            <param name="type">An IList`1</param>
            <returns>A Type object.</returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.Clear">
            <summary>
            Removes all items from the System.Collections.Generic.ICollection`1.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the System.Collections.Generic.ICollection`1 contains a specific value.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
             Copies the elements of the System.Collections.Generic.ICollection`1 to an System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Weavy.Core.Models.PropertyDictionary.Count">
            <summary>
             Gets the number of elements contained in the System.Collections.Generic.ICollection`1.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PropertyDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the System.Collections.Generic.ICollection`1 is read-only.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the System.Collections.Generic.ICollection`1.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.GetEnumerator">
            <summary>
             Returns an enumerator that iterates through the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PropertyDictionary.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.DataType">
            <summary>
            Enumeration of logical data types that may appear in <see cref="T:Weavy.Core.Models.DataTypeAttribute"/>
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Custom">
            <summary>
            Custom data type, not one of the static data types we know
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.DateTime">
            <summary>
            DateTime data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Date">
            <summary>
            Date data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Time">
            <summary>
            Time data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Duration">
            <summary>
            Duration data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.PhoneNumber">
            <summary>
            Phone number data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Currency">
            <summary>
            Currency data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Text">
            <summary>
            Plain text data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Html">
            <summary>
            Html data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.MultilineText">
            <summary>
            Multiline text data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.EmailAddress">
            <summary>
            Email address data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Password">
            <summary>
            Password data type -- do not echo in UI
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Url">
            <summary>
            URL data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.ImageUrl">
            <summary>
            URL to an Image -- to be displayed as an image instead of text
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.CreditCard">
            <summary>
            Credit card data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.PostalCode">
            <summary>
            Postal code data type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataType.Upload">
            <summary>
            File upload data type
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.DisplayAttribute">
            <summary>
            DisplayAttribute is a general-purpose attribute to localizable strings for properties.   
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DisplayAttribute.#ctor">
            <summary>
            Default constructor for DisplayAttribute.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DisplayAttribute.ShortName">
            <summary>
            Gets or sets the ShortName attribute property, which may be a resource key string.
            The short name is generally used as the grid column label.  
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DisplayAttribute.Name">
            <summary>
            Gets or sets the Name attribute property, which may be a resource key string.
            The name is generally used as the field label.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DisplayAttribute.Description">
            <summary>
            Gets or sets the Description attribute property, which may be a resource key string.
            Description is generally used as a tool tip or description.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DisplayAttribute.Prompt">
            <summary>
            Gets or sets the Prompt attribute property, which may be a resource key string.
            A prompt is generally used as a prompt or watermark.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DisplayAttribute.GroupName">
            <summary>
            Gets or sets the GroupName attribute property, which may be a resource key string.
            A group name is used for grouping fields in the UI.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DisplayAttribute.Order">
            <summary>
            Gets or sets the order in which this field should be displayed. 
            </summary>
            <remarks>
            Defaults to 10000, which allows explicitly-ordered fields to be displayed before
            and after fields that don't specify an order.
            </remarks>
        </member>
        <member name="T:Weavy.Core.Models.EmailAddressAttribute">
            <summary>
             Provides basic email address validation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.EmailAddressAttribute.#ctor">
            <summary>
            Initializes a new instance of the EmailAttribute.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.EmailAddressAttribute.IsValid(System.Object)">
            <summary>
             Determines whether the specified value of the object is valid.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.EmailAddressAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error.</returns>
        </member>
        <member name="T:Weavy.Core.Models.CompareAttribute">
            <summary>
             Compares two properties and validates that their values are equal.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.CompareAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the maximum allowed length.
            </summary>
            <param name="otherProperty">Name of property to compare with the current property.</param>
        </member>
        <member name="M:Weavy.Core.Models.CompareAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error,</returns>
        </member>
        <member name="T:Weavy.Core.Models.DataTypeAttribute">
            <summary>
            Specifies the data type that is associated with a field. Used when selecting Display- and Editor-templates.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DataTypeAttribute.#ctor(Weavy.Core.Models.DataType)">
            <summary>
            Initializes a new instance of the TemplateAttribute class with the specified data type.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DataTypeAttribute.#ctor(System.String)">
             <summary>
            Initializes a new instance of the TemplateAttribute class by using the specified field template name.
             </summary>
        </member>
        <member name="M:Weavy.Core.Models.DataTypeAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error.</returns>
        </member>
        <member name="T:Weavy.Core.Models.EditableAttribute">
            <summary>
            Indicates whether an application should allow editing of the value.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.EditableAttribute.AllowEdit">
            <summary>
            Indicates whether or not the field/property allows editing of the value.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.EditableAttribute.AllowInitialValue">
            <summary>
            Indicates whether or not the field/property allows an initial value to be specified.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.EditableAttribute.#ctor(System.Boolean)">
            <summary>
            Indicate whether or not a field/property is editable.
            </summary>
            <param name="allowEdit">Indicates whether the field/property is editable.</param>
        </member>
        <member name="T:Weavy.Core.Models.UIHintAttribute">
            <summary>
            Attribute to provide a hint to the presentation layer about what control it should use.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UIHintAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="uiHint"></param>
        </member>
        <member name="M:Weavy.Core.Models.UIHintAttribute.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="uiHint"></param>
            <param name="presentationLayer"></param>
        </member>
        <member name="M:Weavy.Core.Models.UIHintAttribute.#ctor(System.String,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="uiHint"></param>
            <param name="presentationLayer"></param>
            <param name="controlParameters"></param>
        </member>
        <member name="T:Weavy.Core.Models.ScaffoldAttribute">
            <summary>
             Specifies whether a field/property uses scaffolding.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ScaffoldAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ScaffoldColumnAttribute.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.UrlAttribute">
            <summary>
            Provides basic url validation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UrlAttribute.#ctor">
            <summary>
            Initializes a new instance of the UriAttribute.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UrlAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error.</returns>
        </member>
        <member name="M:Weavy.Core.Models.UrlAttribute.IsValid(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.MaxLengthAttribute">
            <summary>
             Specifies the maximum length of an array or string.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MaxLengthAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the maximum allowed length.
            </summary>
            <param name="length">The maximum allowed length.</param>
        </member>
        <member name="M:Weavy.Core.Models.MaxLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error,</returns>
        </member>
        <member name="T:Weavy.Core.Models.MinLengthAttribute">
            <summary>
             Specifies the minimum length of an array or string.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MinLengthAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the minimum allowed length.
            </summary>
            <param name="length">The minimum allowed length.</param>
        </member>
        <member name="M:Weavy.Core.Models.MinLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error,</returns>
        </member>
        <member name="T:Weavy.Core.Models.RangeAttribute">
            <summary>
            Specifies the numeric range constraints for the value of a data field.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the MinMaxAttribute class by using the specified minimum and maximum values.
            </summary>
            <param name="minimum"></param>
            <param name="maximum"></param>
        </member>
        <member name="M:Weavy.Core.Models.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the MinMaxAttribute class by using the specified minimum and maximum values.
            </summary>
            <param name="minimum"></param>
            <param name="maximum"></param>
        </member>
        <member name="M:Weavy.Core.Models.RangeAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error,</returns>
        </member>
        <member name="T:Weavy.Core.Models.StringLengthAttribute">
            <summary>
            Validates the length of a string property.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.StringLengthAttribute.#ctor(System.Int32)">
            <summary>
            Constructor that accepts the maximum length of the string.
            </summary>
            <param name="maximum">The maximum length, inclusive.  It may not be negative.</param>
        </member>
        <member name="M:Weavy.Core.Models.StringLengthAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that accepts the minimum and maximum length of the string.
            </summary>
            <param name="minimum">The minimum acceptable length of the string.</param>
            <param name="maximum">The maximum acceptable length of the string.</param>
        </member>
        <member name="M:Weavy.Core.Models.StringLengthAttribute.FormatErrorMessage(System.String)">
            <summary>
                Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error,</returns>
        </member>
        <member name="T:Weavy.Core.Models.RegularExpressionAttribute">
            <summary>
                Specifies that a field must match the specified regular expression.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.RegularExpressionAttribute.#ctor(System.String)">
            <summary>
              Initializes a new instance of the validation attribute with a default error message.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.RegularExpressionAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error,</returns>
        </member>
        <member name="T:Weavy.Core.Models.RequiredAttribute">
            <summary>
                Validation attribute to indicate that a property field or parameter is required.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.RequiredAttribute.#ctor">
            <summary>
              Initializes a new instance of the validation attribute with a default error message.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.RequiredAttribute.FormatErrorMessage(System.String)">
            <summary>
                Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error,</returns>
        </member>
        <member name="T:Weavy.Core.Models.ExternalBlob">
            <summary>
            A class containing metadata about an external blob. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ExternalBlob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ExternalBlob"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Provider">
            <summary>
            Gets or sets the provider name.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Link">
            <summary>
            Gets or sets an url for viewing the blob.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Name">
            <summary>
            Gets or sets the file name of the blob.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Width">
            <summary>
            Gets or sets the width, in pixels, of the blob (only for images).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Height">
            <summary>
            Gets or sets the height, in pixels, of the blob (only for images).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Size">
            <summary>
            Gets or sets the size, in bytes, of the file.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.MediaType">
            <summary>
            Gets or sets the Media Type (https://www.iana.org/assignments/media-types/media-types.xhtml) of the file, e.g. "image/png".
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Download">
            <summary>
            Gets or sets an url for downloading the blob.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Embed">
            <summary>
            Gets or sets an url used for embedding the blob.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Thumb">
            <summary>
            Gets or sets a thumbnail url for the blob.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalBlob.Raw">
            <summary>
            Gets the raw metadata from the provider.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ExternalBlob.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified object is valid.
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.Directory">
            <summary>
            A class for represents a user directory.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Directory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Directory"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Directory.Id">
            <summary>
            Gets the id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Directory.Name">
            <summary>
            Gets or sets the directory name.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Directory.Members">
            <summary>
            Gets the number of members in the directory.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Directory.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.BlobSearchResult">
            <summary>
            Result class returned when searching for blobs.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.BlobSearchResult.#ctor">
            <summary>
            Initializes an empty BlobSearchResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.BlobSearchResult.#ctor(Weavy.Core.Models.BlobQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Blob},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the BlobSearchResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.BlobSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.BlobQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Weavy.Core.Models.Blob"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.BlobQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.BlobQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.BlobQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.BlobQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.BlobQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.BlobQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.BlobQuery.External">
            <summary>
            Gets or sets a value indicating whether the search should return external blobs or not.
            <c>true</c> returns external blobs, <c>false</c> returns internal blobs and <c>null</c> returns all blobs.
            Default is <c>null</c>. 
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Comments">
            <summary>
            An app for comments.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comments.SearchResult">
            <summary>
            Gets or sets the comments to display.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IHasThumb">
            <summary>
            Interface for content with thumbnail images. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IHasThumb.CreateThumb(System.IO.FileInfo)">
            <summary>
            Create and write a thumbnail image for this content item.
            Subclasses can override this method to supply their own implementation.
            </summary>
            <param name="output">A file where the thumbnail image should be written.</param>
            <remarks>This is an internal, and potentially expensive, operation and should not be called directly by user code.</remarks>
        </member>
        <member name="T:Weavy.Core.Models.IHasMeetings">
            <summary>
            Interface for entities that can have an <see cref="T:Weavy.Core.Models.Meeting"/> resource. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IHasMeetings.MeetingIds">
            <summary>
            Gets or sets the ids of all embeds attached to the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IHasMeetingExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IHasMeetingExtensions.Meetings(Weavy.Core.Models.IHasMeetings)">
            <summary>
            Gets the <see cref="T:Weavy.Core.Models.Meeting"/> for the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IVisitable">
            <summary>
            Interface for entities that can be visited. 
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Meeting">
            <summary>
            Represents an online meeting.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Meeting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Meeting"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.Id">
            <summary>
            Gets the meeting id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.Parent">
            <summary>
            Gets a reference to the entity where the meeting is attached.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.CreatedAt">
            <summary>
            Gets the time (UTC) the meeting was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.CreatedById">
            <summary>
            Gets the id of the user that created the meeting.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.Provider">
            <summary>
            Gets the provider of the meeting.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.Uuid">
            <summary>
            Gets the provider specific uuid of the meeting.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.MeetingId">
            <summary>
            Gets the provider specific id of the meeting.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.JoinUrl">
            <summary>
            Gets the url to join the meeting.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.EndedAt">
            <summary>
            Gets the date when the meeting ended.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.RecordingUrl">
            <summary>
            Gets the url to the meeting recording.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Meeting.CreatedBy">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> that created the meeting.
            </summary>           
        </member>
        <member name="M:Weavy.Core.Models.Meeting.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Token">
            <summary>
              An object representing a OAuth token.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Token.Id">
            <summary>
             Gets the id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Token.UserId">
            <summary>
             Gets or sets the <see cref="T:Weavy.Core.Models.Token"/> user id.
            </summary>                
        </member>
        <member name="P:Weavy.Core.Models.Token.Provider">
            <summary>
             Gets or sets the <see cref="T:Weavy.Core.Models.Token"/> provider.
            </summary>                
        </member>
        <member name="P:Weavy.Core.Models.Token.AccessToken">
            <summary>
             Gets or sets the <see cref="T:Weavy.Core.Models.Token"/> access token.
            </summary>                
        </member>
        <member name="P:Weavy.Core.Models.Token.RefreshToken">
            <summary>
             Gets or sets the <see cref="T:Weavy.Core.Models.Token"/> refreshtoken.
            </summary>                
        </member>
        <member name="P:Weavy.Core.Models.Token.MetaData">
            <summary>
             Gets or sets the <see cref="T:Weavy.Core.Models.Token"/> meta data.
            </summary>                
        </member>
        <member name="P:Weavy.Core.Models.Token.Expires">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.TeamsMeeting">
            <summary>
            A class representing a Teams Online meeting
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TeamsMeeting.Id">
            <summary>
            The Id of the meeting
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TeamsMeeting.JoinUrl">
            <summary>
            The url to join the meeting
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.TeamsUser">
            <summary>
            A class representing a Teams Online meeting user
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TeamsUser.FullName">
            <summary>
            The full name of the user
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TeamsUser.Email">
            <summary>
            The email of the user
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ZoomNotification">
            <summary>
            A model representing a Zoom webhook notification received from the Zoom proxy
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomNotification.MeetingId">
            <summary>
            The id of the meeting
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomNotification.UUID">
            <summary>
            The UUID of the meeting
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomNotification.EventType">
            <summary>
            The type of webhook notification
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomNotification.MetaData">
            <summary>
            Additional metadata used for some of the events
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ZoomMeeting">
            <summary>
            A class representing a Zoom meeting
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomMeeting.Id">
            <summary>
            The id of the Zoom meeting
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomMeeting.Uuid">
            <summary>
            The uuid of the Zoom meeting
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomMeeting.PMI">
            <summary>
            The personal meeting id of the Zoom meeting
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomMeeting.StartTime">
            <summary>
            The id of the Zoom meeting
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomMeeting.JoinUrl">
            <summary>
            The url to join a Zoom meeting
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ZoomUser">
            <summary>
            A class representing a user in Zoom
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomUser.FirstName">
            <summary>
            The first name of the user
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomUser.LastName">
            <summary>
            The last name of the user
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomUser.Email">
            <summary>
            The email of the user
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ZoomUser.FullName">
            <summary>
            Computed property of full name
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.DirectoryQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Weavy.Core.Models.Directory"/> items.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DirectoryQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.DirectoryQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DirectoryQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.DirectoryQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.DirectoryQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.DirectoryQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.DirectoryQuery.BuiltIn">
            <summary>
            Gets or sets a value indicating whether the result should return built-in directories.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.DirectorySearchResult">
            <summary>
            Result class returned when searching for directories.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DirectorySearchResult.#ctor">
            <summary>
            Initializes an empty RoleResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DirectorySearchResult.#ctor(Weavy.Core.Models.DirectoryQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Directory},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the NotificationResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.DirectorySearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IAppEntity">
            <summary>
            Interface for entities that exists in apps.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IAppEntity.AppId">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.App"/> where the entity is located.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IAppEntityExtensions">
            <summary>
            Extension methods for classes implementing the <see cref="T:Weavy.Core.Models.IAppEntity"/> interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IAppEntityExtensions.App(Weavy.Core.Models.IAppEntity)">
            <summary>
            Gets the <see cref="M:Weavy.Core.Models.IAppEntityExtensions.App(Weavy.Core.Models.IAppEntity)"/> where the entity is located.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Weavy.Core.Models.IHostEntity">
            <summary>
            Interface for entities that can be connected to a host system.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IHostEntity.Key">
            <summary>
            Gets or sets a unique identifier used for the entity in the host system.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ConversationMemberQuery">
            <summary>
            Defines a query used to find conversation members.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ConversationMemberQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ConversationMemberQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ConversationMemberQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ConversationMemberQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.ConversationMemberQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ConversationMemberQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.ConversationMemberQuery.Suspended">
            <summary>
            Gets or sets a value indicating whether to find suspended members or not, <c>null</c> returns all members.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.TrashSearchResult">
            <summary>
            Result class returned when searching for trashed entities.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TrashSearchResult.#ctor">
            <summary>
            Initializes an empty TrashResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TrashSearchResult.#ctor(Weavy.Core.Models.TrashQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.TrashedEntity},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the TrashResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.TrashSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.RoleSearchResult">
            <summary>
            Result class returned when searching for roles.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.RoleSearchResult.#ctor">
            <summary>
            Initializes an empty RoleResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.RoleSearchResult.#ctor(Weavy.Core.Models.RoleQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Role},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the NotificationResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.RoleSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.PostSearchResult">
            <summary>
            Result class returned when searching for posts.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PostSearchResult.#ctor">
            <summary>
            Initializes an empty PostResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PostSearchResult.#ctor(Weavy.Core.Models.PostQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Post},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the AttachmentResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.PostSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.NotificationSearchResult">
            <summary>
            Result class returned when searching for notifications.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.NotificationSearchResult.#ctor">
            <summary>
            Initializes an empty NotificationResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.NotificationSearchResult.#ctor(Weavy.Core.Models.NotificationQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Notification},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the NotificationResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.NotificationSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.MessageSearchResult">
            <summary>
            Result class returned when searching for messages.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MessageSearchResult.#ctor">
            <summary>
            Initializes an empty MessageResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MessageSearchResult.#ctor(Weavy.Core.Models.MessageQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Message},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the InviteResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.MessageSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.MemberSearchResult">
            <summary>
            Result class returned when searching for members.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MemberSearchResult.#ctor">
            <summary>
            Initializes an empty MemberSearchResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MemberSearchResult.#ctor(Weavy.Core.Models.MemberQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Member},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the MemberSearchResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.MemberSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.LogEntrySearchResult">
            <summary>
            Result class returned when searching for log entries.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.LogEntrySearchResult.#ctor">
            <summary>
            Initializes an empty InviteResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.LogEntrySearchResult.#ctor(Weavy.Core.Models.LogEntryQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.LogEntry},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the LogEntryResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.LogEntrySearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.CommentSearchResult">
            <summary>
            Result class returned when searching for comments.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.CommentSearchResult.#ctor">
            <summary>
            Initializes an empty CommentResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.CommentSearchResult.#ctor(Weavy.Core.Models.CommentQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Comment},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the CommentResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.CommentSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.AttachmentSearchResult">
            <summary>
            Result class returned when searching for attachments.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AttachmentSearchResult.#ctor">
            <summary>
            Initializes an empty AttachmentResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AttachmentSearchResult.#ctor(Weavy.Core.Models.AttachmentQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Attachment},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the AttachmentResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.AttachmentSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.App">
            <summary>
             Base class for all apps.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.App.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.App"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.Id">
            <summary>
            Gets the entity id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.Type">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.SpaceId">
            <summary>
            Gets the space id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.Key">
            <summary>
             Gets or sets a unique identifier for the app in the host system.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.Name">
            <summary>
             Gets or sets the name of the app.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.CreatedAt">
            <summary>
             Gets or sets the time the entity was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.CreatedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that created the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the entity was last modified.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.ModifiedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that last updated the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.TrashedAt">
            <summary>
            Gets or sets the time (UTC) the entity was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.TrashedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that trashed the entity.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.App.GetIcon">
            <summary>
            Get the icon for the app.
            Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.App.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results. 
            Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.App.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            Subclasses can override this method to supply their own implementation.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="P:Weavy.Core.Models.App.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.AppGuid">
            <summary>
            Gets the guid of the underlying app type.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.App.CommentIds">
            <summary>
            Gets the ids of all comments for the entity.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.App.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="M:Weavy.Core.Models.App.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation. Subclasses can override this method to add their own validation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.AppAttribute">
            <summary>
              Attribute for providing metadata about apps.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AppAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.AppAttribute"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AppAttribute.AllowMultiple">
            <summary>
             Gets or sets a value indicating whether users can add multiple instances of the app to a space.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AppAttribute.AllowChildrenWithSameName">
            <summary>
            Gets or sets a value indicating whether multiple content items with the same name are allowed in the app.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AppAttribute.Children">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of content allowed in the app, <c>null</c> means no content allowed and an an empty list means that any type of content is allowed.
            </summary>
            <remarks>We need this attribute since <see cref="T:System.Guid"/>is not a valid attribute parameter type.</remarks>
        </member>
        <member name="P:Weavy.Core.Models.AppAttribute.Layout">
            <summary>
            Gets or sets the default layout.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AppAttribute.Layouts">
            <summary>
            Gets or sets the allowed layouts.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AppAttribute.SortBy">
            <summary>
            Gets or sets the default sort order.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AppAttribute.SortBys">
            <summary>
            Gets the possible ways to sort content.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AppAttribute.AllowedChildren">
            <summary>
            Gets the allowed content types for the app as a comma separated string of guids, <c>null</c> means no content allowed and "*" means any type of content is allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.AppAttribute.IsChildAllowed(System.Guid)">
            <summary>
            Gets a value indicating whether the specied content item is an allowed child item.
            </summary>
            <param name="guid">GUID of content type.</param>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Models.AppAttribute.IsSystem">
            <summary>
            Gets or sets a value indicating that the app is a system app and treated a bit different, for instance hidden in the add app menu.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.AppRow">
            <summary>
             Represents a row in the dbo.Apps table.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AppRow.FollowedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that follow the item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AppRow.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AppRow.Tags">
            <summary>
            Gets the list of tags. 
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.AppQuery">
            <summary>
            Defines a query used to find matching apps.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AppQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.AppQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AppQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.AppQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.AppQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.AppQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.AppQuery.Guids">
            <summary>
            Gets or sets the Guids of the app types to search, default is an empty list which searches all types of apps.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.EntitySearchResult">
            <summary>
            Result class returned when searching for entities.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.EntitySearchResult.#ctor">
            <summary>
            Initializes an empty EntityResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.EntitySearchResult.#ctor(Weavy.Core.Models.EntityQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Entity},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the EntityResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.EntitySearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ConversationSearchResult">
            <summary>
            Result class returned when searching for conversations.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ConversationSearchResult.#ctor">
            <summary>
            Initializes an empty ConversationResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ConversationSearchResult.#ctor(Weavy.Core.Models.ConversationQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Conversation},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the ConversationResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.ConversationSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ContentRow">
            <summary>
             Represents a row in the dbo.Content table.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.AttachmentIds">
            <summary>
            Gets the ids of all files attached to the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.CommentIds">
            <summary>
            Gets the ids of all comments for the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.FollowedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that follow the item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.IsDraft">
            <summary>
             Gets or sets a value indicating whether this is a draft.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.IsTransient">
            <summary>
            Gets or sets a value indicating whether this is a transient draft, i.e. a draft that has never been published.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.LikedByIds">
            <summary>
            Gets the ids of the users that have liked the item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.LockedAt">
            <summary>
            Gets the time (UTC) the entity was locked.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.LockedById">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.User"/> that locked the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.Tags">
            <summary>
            Gets the list of tags. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.Version">
            <summary>
            Gets the timestamp of the revision.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.Blob">
            <summary>
            Gets the blob (for files).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentRow.ContentType">
            <summary>
            Gets the type of content.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Content">
            <summary>
             Base class for all content items.
            </summary>
            <remarks>
            Used as fallback when actual item implementation cannot be resolved.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Models.Content.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Content"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.Id">
            <summary>
            Gets the entity id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.Type">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.ParentId">
            <summary>
            Gets the id of the parent content item (for hierarchical content items).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.AppId">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.App"/> where the content item is located.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.SpaceId">
            <summary>
            Gets the space id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.Name">
            <summary>
             Gets or sets the name of the content item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.CreatedAt">
            <summary>
             Gets or sets the time the entity was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.CreatedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that created the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the entity was last modified.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.ModifiedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that last updated the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.TrashedAt">
            <summary>
            Gets or sets the time (UTC) the entity was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.TrashedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that trashed the entity.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Content.GetIcon">
            <summary>
            Get the icon for the content item.
            Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Content.GetKind">
            <summary>
            Get the kind of the content (as a lowercased string).
            Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Content.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results. 
            Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Content.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            Subclasses can override this method to supply their own implementation.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="P:Weavy.Core.Models.Content.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Content.ContentGuid">
            <summary>
            Gets the guid of the underlying content type.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Content.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Content.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation. Subclasses can override this method to add their own validation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.BrowserInfo">
            <summary>
            Super simple browser detection. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent.
            and https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.BrowserInfo.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="userAgent"></param>
        </member>
        <member name="P:Weavy.Core.Models.BrowserInfo.Browser">
            <summary>
            Gets the browser name, e.g. "Firefox", "Chrome", "Safari" etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.BrowserInfo.Desktop">
            <summary>
            Gets a value indicating whether this is a desktop browser.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.BrowserInfo.Engine">
            <summary>
            Gets the rendering engine, e.g. "Gecko", "WebKit", "Presto", "Trident", "Bink" etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.BrowserInfo.Framed">
            <summary>
            Gets a value indicating whether the web page is being loaded inside an iframe or not.
            </summary>
            <remarks>Iframe detection is done on the client so the server always returns false for this property.</remarks>
        </member>
        <member name="P:Weavy.Core.Models.BrowserInfo.Mobile">
            <summary>
            Gets a value indicating whether this is a mobile device.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.BrowserInfo.Platform">
            <summary>
            Gets the operating system platform, e.g. "Windows", "Linux", "Mac", "iOS"
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.BrowserInfo.Tablet">
            <summary>
            Gets a value indicating whether this is a tablet.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.BrowserInfo.WebView">
            <summary>
            Gets a value indicating whether this is an embedded WebView.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Badge">
            <summary>
            Represents a users current badge.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Badge.#ctor(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="conversations"></param>
            <param name="notifications"></param>
        </member>
        <member name="P:Weavy.Core.Models.Badge.Conversations">
            <summary>
            Get the number of unread conversations.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.Badge.Notifications">
            <summary>
            The number of unread notifications.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.Badge.Total">
            <summary>
            The total number of unread conversations and notifications.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Attachment">
            <summary>
            An file attached to an entity, e.g. Content, Comment, Message or Post.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Attachment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Attachment"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.Id">
            <summary>
            Gets the id of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.Type">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.Parent">
            <summary>
            Gets a reference to the entity where the file is attached.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.CreatedAt">
            <summary>
             Gets or sets the time the entity was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.CreatedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that created the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the entity was last modified.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.ModifiedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that last updated the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.TrashedAt">
            <summary>
            Gets the time (UTC) the entity was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.TrashedById">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.User"/> that trashed the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.SpaceId">
            <summary>
            Gets the id of the space where the file is attached.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Attachment.Blob">
            <summary>
            Gets or sets the <see cref="P:Weavy.Core.Models.Attachment.Blob"/> containing metadata about, and pointing to, the actual binary data.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Attachment.GetIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Attachment.GetTitle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Attachment.GetExcerpt(System.Boolean)">
            <summary>
            
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Attachment.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.ImageAttribute">
            <summary>
            Specifies the file type, size and dimensions of an uploaded image.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ImageAttribute.#ctor">
            <summary>
            Initializes a new instance of the ImageAttribute..
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ImageAttribute.#ctor(Weavy.Core.Models.EntityType)">
            <summary>
            Initializes a new instance of the ImageAttribute class with a placeholder image for the specified EntityType.
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="P:Weavy.Core.Models.ImageAttribute.MinWidth">
            <summary>
            Gets or sets the minimum width in pixels.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageAttribute.MinHeight">
            <summary>
            Gets or sets the minimum height in pixels.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ImageAttribute.IsValid(System.Object)">
            <summary>
            Checks that the value of the data field is valid.
            </summary>
            <param name="value">The data field value to validate.</param>
            <returns><c>true</c> if the specified value is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Models.ImageAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error,</returns>
        </member>
        <member name="T:Weavy.Core.Models.ContentType">
            <summary>
            Enum for types of content.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.ContentType.File">
            <summary>
            A binary file, such as image, document, spreadsheet etc.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.ContentType.Folder">
            <summary>
            A container for organizing content into a hierarchy.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.ContentType.Item">
            <summary>
            Genric content type for notes, forms etc. 
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.UpsertMode">
            <summary>
            Defines different insert/edit modes for content items.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.UpsertMode.None">
            <summary>
            Custom handling of inserts/edits.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.UpsertMode.Modal">
            <summary>
            Use modal window for inserts/edits.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.UpsertMode.Page">
            <summary>
            Navigate to new page for inserts/edits.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Search">
            <summary>
            An app for searching within a space.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Search.Result">
            <summary>
            Gets or sets the search result.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Posts">
            <summary>
            An app with a message stream.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Posts.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Posts.Prompt">
            <summary>
            Prompt to display in the textbox, e.g. "What's on your mind?"
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IApp">
            <summary>
            Base interface for apps.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IApp.Name">
            <summary>
            Gets or sets the name of the app item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IApp.AppGuid">
            <summary>
             Gets the guid of the underlying app type.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IHasEmbeds">
            <summary>
            Interface for entities that can have an <see cref="T:Weavy.Core.Models.Embed"/> resource. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IHasEmbeds.EmbedIds">
            <summary>
            Gets or sets the ids of all embeds attached to the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IHasEmbedExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IHasEmbedExtensions.Embeds(Weavy.Core.Models.IHasEmbeds)">
            <summary>
            Gets the <see cref="T:Weavy.Core.Models.Embed"/> for the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Icon">
            <summary>
            Metadata about an icon used in our interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Icon.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Icon.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Icon.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Icon.Name">
            <summary>
            Gets or sets the icon name (must be in our icon sprite), e.g. "file-document-box".
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Icon.Color">
            <summary>
            Gets or sets the icon color (must be one of the theme colors in our css), e.g. "red-500".
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Icon.Size">
            <summary>
            Gets or sets the size of the icon, i.e. 18, 24, 36, 48.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IContent">
            <summary>
            Base interface for content items.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IContent.ParentId">
            <summary>
            Gets the id of the parent content item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IContent.Name">
            <summary>
            Gets or sets the name of the content item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IContent.ContentGuid">
            <summary>
             Gets the guid of the underlying content type.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IContent.GetKind">
            <summary>
            Get the kind of the content (as a lowercased string).
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IContentExtensions">
            <summary>
            Extension methods for classes implementing the <see cref="T:Weavy.Core.Models.IContent"/> interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IContentExtensions.Parent(Weavy.Core.Models.IContent)">
            <summary>
            Gets the parent item, or <c>null</c> if the item is located at the top of the content hierarchy.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Weavy.Core.Models.IContentExtensions.Children(Weavy.Core.Models.IContent)">
            <summary>
            Gets child items for the specified content item.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Weavy.Core.Models.IContentExtensions.ETag(Weavy.Core.Models.IContent)">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.IDraftable">
            <summary>
            Interface for content items that can exist as drafts. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IDraftable.IsDraft">
            <summary>
            Gets or sets a value indicating whether this is a draft.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IDraftable.IsTransient">
            <summary>
            Gets a value indicating whether this is a transient draft, i.e. a draft that has never been published.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IArchiveable">
            <summary>
            Interface for entities that can be archived. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IArchiveable.ArchivedAt">
            <summary>
            Gets the date and time (UTC) the entity was archived.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IArchiveable.ArchivedById">
            <summary>
            Gets the id of the user that archived the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IArchiveableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IArchiveableExtensions.IsArchived(Weavy.Core.Models.IArchiveable)">
            <summary>
            Gets a value indicating whether the entity is archived.
            </summary>
            <param name="archiveable"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.ContentAttribute">
            <summary>
              Attribute for providing metadata about content items.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ContentAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ContentAttribute"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.AllowChildrenWithSameName">
            <summary>
            Gets or sets a value indicating whether multiple child items with the same name are allowed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.SingularName">
            <summary>
             This setting determines how a singular item will be referred to, e.g. 'a blog post'.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.PluralName">
            <summary>
             This setting determines how multiple items will be referred to, e.g. 'blog posts'.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.CreateMode">
            <summary>
            Gets or sets the the UI to use when creating new content.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.CreateVerb">
            <summary>
             This setting determines the verb used when when creating a new instance, e.g. 'Create'.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.ModifyMode">
            <summary>
            Gets or sets the the UI to use when updating an existing content item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.ModifyVerb">
            <summary>
             This setting determines the verb used when modifying en existing instance, e.g. 'Update'.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.Children">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of allowed child content, <c>null</c> means no children allowed and an an empty list means that any type of content is allowed.
            </summary>
            <remarks>We need this attribute since <see cref="T:System.Guid"/>is not a valid attribute parameter type.</remarks>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.Parents">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of allowed parent apps and content types. If <c>null</c> (or empty) any type of app and/or content type is allowed.
            </summary>
            <remarks>We need this attribute since <see cref="T:System.Guid"/> is not a valid attribute parameter type.</remarks>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.Layout">
            <summary>
            Gets or sets the default layout.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.Layouts">
            <summary>
            Gets or sets the allowed layouts.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.SortBy">
            <summary>
            Gets or sets the default sort order.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentAttribute.SortBys">
            <summary>
            Gets the possible ways to sort content.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ContentAttribute.AllowedChildren">
            <summary>
            Gets the allowed children for the content item as a comma separated string of guids, <c>null</c> means no child items allowed and "*" means any type of child content is allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.ContentAttribute.AllowedParents">
            <summary>
            Gets the allowed parents for the content item as a comma separated string of guids, "*" means any type of parent is allowed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.ContentAttribute.IsChildAllowed(System.Guid)">
            <summary>
            Gets a value indicating whether the specied content item is an allowed child item.
            </summary>
            <param name="guid">GUID of content type.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.ContentAttribute.IsParentAllowed(System.Guid)">
            <summary>
            Gets a value indicating whether the specifed content item or app is an allowed parent.
            </summary>
            <param name="guid">GUID of content type or app.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.IFile">
            <summary>
            Base interface for files.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IFile.Blob">
            <summary>
            Gets or sets the underlying <see cref="P:Weavy.Core.Models.IFile.Blob"/> with meta data about, and pointing to, the binary data of the file.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ISortable">
            <summary>
            Interface for items that can be manually sorted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ISortable.SortOrder">
            <summary>
            Gets or sets a value that decides the order in which the item will appear in lists.
            A lower value will float to the top, while higher values will appear lower in lists. 
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ITrashable">
            <summary>
            Interface for objects that can be trashed/restored. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ITrashable.TrashedAt">
            <summary>
            Gets or sets the date and time (UTC) the entity was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ITrashable.TrashedById">
            <summary>
            Gets or sets the id of the user that trashed the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ITrashableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ITrashableExtensions.IsTrashed(Weavy.Core.Models.ITrashable)">
            <summary>
            Gets a value indicating whether the entity is trashed.
            </summary>
            <param name="trashable"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.ITrashableExtensions.TrashedBy(Weavy.Core.Models.ITrashable)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> that trashed the entity.
            </summary>   
            <param name="trashable"></param>
        </member>
        <member name="T:Weavy.Core.Models.Note">
            <summary>
            A simple note for general purpose documentation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Note.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Note"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Note.Body">
            <summary>
            Gets or sets the body text of the note.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Note.IsDraft">
            <summary>
            Gets or sets a value indicating whether this is a draft.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Note.IsTransient">
            <summary>
            Gets a value indicating whether this is a transient draft.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Note.LockedAt">
            <summary>
            Gets or sets the time (UTC) the item was locked.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Note.LockedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that locked the item or <c>null</c> if no lock exists.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Note.Version">
            <summary>
            Gets the timestamp of the revision.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Note.AttachmentIds">
            <summary>
            Gets the ids of all files attached to the item.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.Note.CommentIds">
            <summary>
            Gets the ids of all comments.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.Note.FollowedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that follow the item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Note.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the item.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.Note.Tags">
            <summary>
            Gets or sets the list of tags associated with the item. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Note.CreateThumb(System.IO.FileInfo)">
            <summary>
            Creates a thumbnail image for this <see cref="T:Weavy.Core.Models.Note"/>. 
            Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Note.GetHtml">
            <summary>
            Gets the body text to export.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.ContentSearchResult`1">
            <summary>
            Result class returned when searching for content.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ContentSearchResult`1.#ctor">
            <summary>
            Initializes an empty ContentResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ContentSearchResult`1.#ctor(Weavy.Core.Models.ContentQuery{`0},System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the ContentResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.ContentSearchResult`1.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.AppSearchResult">
            <summary>
            Result class returned when searching for apps.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AppSearchResult.#ctor">
            <summary>
            Initializes an empty AppResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AppSearchResult.#ctor(Weavy.Core.Models.AppQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.App},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the AppResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.AppSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.UserSearchResult">
            <summary>
            Result class returned when searching for spaces.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UserSearchResult.#ctor">
            <summary>
            Initializes an empty UserResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UserSearchResult.#ctor(Weavy.Core.Models.UserQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.User},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the UserResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.UserSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.SpaceSearchResult">
            <summary>
            Result class returned when searching for spaces.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.SpaceSearchResult.#ctor">
            <summary>
            Initializes an empty SpaceResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.SpaceSearchResult.#ctor(Weavy.Core.Models.SpaceQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Space},System.Nullable{System.Int64})">
            <summary>
            Initializes an instance of the SpaceResult class with the specified query and result.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="total"></param>
        </member>
        <member name="P:Weavy.Core.Models.SpaceSearchResult.Query">
            <summary>
            Gets the query used in the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.StatisticsEntry">
            <summary>
            Describes an entry in the Stats table, i.e. the number of spaces, users, apps etc. at a given time.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.StatisticsEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.StatisticsEntry"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.Id">
            <summary>
            Gets the id of the entry.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.CreatedAt">
            <summary>
              Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.StatisticsEntry"/> was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.AppCount">
            <summary>
            Gets or sets the number of apps.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.BlobCount">
            <summary>
            Gets or sets the number of blobs.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.BlobSize">
            <summary>
            Gets or sets the total size (in bytes) of all blobs.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.ContentCount">
            <summary>
            Gets or sets the number of content items.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.CommentCount">
            <summary>
            Gets or ses the number of comments.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.DatabaseSize">
            <summary>
            Gets or sets the total size (in bytes) of the database.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.IndexCount">
            <summary>
            Gets or sets the number of documents in the full text index.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.IndexSize">
            <summary>
            Gets or sets the total size (in bytes) of the fulltext index.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.LikeCount">
            <summary>
            Gets or sets the number of likes.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.MessageCount">
            <summary>
            Gets or sets the number of private message.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.PostCount">
            <summary>
            Gets or sets the number of posts.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.SpaceCount">
            <summary>
            Gets or sets the number of spaces.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.StarCount">
            <summary>
            Gets or sets the number of stars.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.TagCount">
            <summary>
            Gets or sets the number of tags.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.StatisticsEntry.UserCount">
            <summary>
            Gets or sets the number of (active) users.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Files">
            <summary>
            An app for storing files.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Files.FollowedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that follow the item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Files.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the item.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.Files.Items">
            <summary>
            Gets or sets the <see cref="T:Weavy.Core.Models.Content"/> items to display.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Theme">
            <summary>
            View model for the theme page.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Theme._color">
            <summary>
            Backing field for the <see cref="P:Weavy.Core.Models.Theme.Color"/> property.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Theme.Logo">
            <summary>
            Gets or sets an image used as apple-touch-icon, favicon etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Theme.Name">
            <summary>
             Gets or sets the installation name.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Theme.Color">
            <summary>
            Gets or sets the theme color as a hexencoded string.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Theme.ThemeColor">
            <summary>
            Get the exact theme <see cref="T:System.Drawing.Color"/> as specified by the user in the theme settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Theme.PrimaryColor(Weavy.Core.Imaging.Shade,System.Nullable{System.Drawing.Color})">
            <summary>
            Get the primary color in the specified shade.
            </summary>
            <param name="shade"></param>
            <param name="baseColor">Base color used to calculate color palette, <c>null</c> to use the current theme color.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Theme.SuccessColor(Weavy.Core.Imaging.Shade,System.Nullable{System.Drawing.Color})">
            <summary>
            Get the success color in the specified shade.
            </summary>
            <param name="shade"></param>
            <param name="baseColor">Base color used to calculate color palette, <c>null</c> to use the current theme color.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Theme.InfoColor(Weavy.Core.Imaging.Shade,System.Nullable{System.Drawing.Color})">
            <summary>
            Get the info color in the specified shade.
            </summary>
            <param name="shade"></param>
            <param name="baseColor">Base color used to calculate color palette, <c>null</c> to use the current theme color.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Theme.WarningColor(Weavy.Core.Imaging.Shade,System.Nullable{System.Drawing.Color})">
            <summary>
            Get the warning color in the specified shade.
            </summary>
            <param name="shade"></param>
            <param name="baseColor">Base color used to calculate color palette, <c>null</c> to use the current theme color.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Theme.DangerColor(Weavy.Core.Imaging.Shade,System.Nullable{System.Drawing.Color})">
            <summary>
            Get the danger color in the specified shade.
            </summary>
            <param name="shade"></param>
            <param name="baseColor">Base color used to calculate color palette, <c>null</c> to use the current theme color.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Theme.NeutralColor(Weavy.Core.Imaging.Shade)">
            <summary>
            Get the neutral color in the specified shade.
            </summary>
            <param name="shade"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Theme.GetColor(Weavy.Core.Imaging.ColorName,Weavy.Core.Imaging.Shade,System.Nullable{System.Drawing.Color})">
            <summary>
            Get a theme color in the specified shade.
            </summary>
            <param name="name">Name of color to get.</param>
            <param name="shade">Shade of the color to get.</param>
            <param name="baseColor">Base color used to calculate color palette, <c>null</c> to use the current theme color.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Theme.PrimaryColorName(System.Nullable{System.Drawing.Color})">
            <summary>
            Get the name of the primary color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Models.Theme.Manifest">
            <summary>
            Gets the web app manifest for the theme.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Models.Theme.ETag">
            <summary>
            Gets the ETag for the web app manifest.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ExternalLink">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ExternalLink.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ExternalLink.#ctor(Weavy.Core.Models.IEntity)">
            <summary>
            
            </summary>
            <param name="entity"></param>
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.Id">
            <summary>
            Gets the id of the link.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.Entity">
            <summary>
            Gets a reference to the entity the link references, i.e. File, Item etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.CreatedAt">
            <summary>
            Gets or sets the time (UTC) the link was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.CreatedBy">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> that created the link.
            </summary>   
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.CreatedById">
            <summary>
            Gets the id of the user that created the link.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.ExpiresAt">
            <summary>
            Gets or sets the time (UTC) the link expires.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.IsExpired">
            <summary>
            Gets or sets a value indicating whether this link has expired.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.IsPasswordProtected">
            <summary>
            Gets or sets a value indicating whether this link is password protected.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.Password">
            <summary>
            Gets or sets the password that protects this link.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ExternalLink.Views">
            <summary>
            Gets the number of times this link has been used. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ExternalLink.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.PreviewFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PreviewFormat.None">
            <summary>
            Preview unavailable
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PreviewFormat.Document">
            <summary>
            Preview as document
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PreviewFormat.Icon">
            <summary>
            Preview as icon
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PreviewFormat.Image">
            <summary>
            Preview as image
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PreviewFormat.Text">
            <summary>
            Preview as plain text
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PreviewFormat.Video">
            <summary>
            Preview as video
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PreviewFormat.Audio">
            <summary>
            Preview as audio
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.AlertType">
            <summary>
            Defines different alert types.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.AlertType.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.AlertType.Success">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.AlertType.Info">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.AlertType.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.AlertType.Danger">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.DataUri">
            <summary>
            Represents a data uri, e.g. or data:image/gif;base64,.... 
            See http://www.ietf.org/rfc/rfc2397.txt for details.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.DataUri.Pattern">
            <summary>
            A regular expression pattern for data uris.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DataUri.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="uri"></param>
        </member>
        <member name="P:Weavy.Core.Models.DataUri.Uri">
            <summary>
            Gets the uri.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DataUri.MediaType">
            <summary>
            Gets the media type.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DataUri.Encoding">
            <summary>
            Gets the encoding.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DataUri.Data">
            <summary>
            Gets the data.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DataUri.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.IFolder">
            <summary>
            Base interface for folders.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.TrashQuery">
            <summary>
            Defines a query used to find trashed entities.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TrashQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.TrashQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TrashQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.TrashQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.TrashQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.TrashQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.TrashQuery.TrashedBefore">
            <summary>
            Gets or sets the date that limits the result to entities trashed on or before this date.
            </summary>
            <remarks>The date should be specified as Coordinated Universal Time (UTC).</remarks>
        </member>
        <member name="P:Weavy.Core.Models.TrashQuery.TrashedById">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/>. Used to find entities trashed by a specific <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> to ignore the TrashedBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashQuery.Trashed">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.SortBy">
            <summary>
            An enum for configuring content sort order.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.Unknown">
            <summary>
            Unspecified or unknown sort order.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.Id">
            <summary>
            Sort by Id.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.IdDesc">
            <summary>
            Sort by Id descending
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.Name">
            <summary>
            Sort by Name
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.NameDesc">
            <summary>
            Sort by Name descending
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.Kind">
            <summary>
            Sort by Type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.KindDesc">
            <summary>
            Sort by Type descending
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.Created">
            <summary>
            Sort by Created
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.CreatedDesc">
            <summary>
            Sort by Created descending
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.Modified">
            <summary>
            Sort by Modified
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.ModifiedDesc">
            <summary>
            Sort by Modified descending
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.Size">
            <summary>
            Sort by Size
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.SizeDesc">
            <summary>
            Sort by Size descending
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.SortOrder">
            <summary>
            Sort by SortOrder
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.SortOrderDesc">
            <summary>
            Sort by SortOrder descending
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.Random">
            <summary>
            Random sort order
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortBy.RandomDesc">
            <summary>
            Random sort order
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Breadcrumb">
            <summary>
            An individual item in a breadcrumb menu.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Breadcrumb.Icon">
            <summary>
            Gets or sets the icon used for the breadcrumb item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Breadcrumb.Text">
            <summary>
            Gets or sets the text used for the breadcrumb item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Breadcrumb.Url">
            <summary>
            Gets or sets the url to navigate to when clicking the breadcrumb item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Breadcrumb.Entity">
            <summary>
            Gets or sets the entity of the breadcrumb.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Breadcrumb.IsActive">
            <summary>
            Gets or sets a value indicating whether the breadcumb item is active.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Breadcrumb.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.ContentQuery`1">
            <summary>
            Defines a query used to find matching content.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ContentQuery`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ContentQuery`1.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ContentQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.ContentQuery`1.#ctor(Weavy.Core.Models.Query)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.ContentQuery`1.Depth">
            <summary>
            Gets or sets a value indicating the depth of the search (only when <see cref="P:Weavy.Core.Models.ContentQuery`1.ParentId"/> and/or <see cref="P:Weavy.Core.Models.ContentQuery`1.AppId"/> is specified).
            Default is <c>0</c> which disables <see cref="P:Weavy.Core.Models.ContentQuery`1.Depth"/> search, <c>1</c> returns only the immediate children of the specified parent, <c>2</c> returns children and grandchildren etc. 
            Setting <see cref="P:Weavy.Core.Models.ContentQuery`1.Depth"/> to <c>null</c> will search all descendants of the specified parent.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentQuery`1.DraftBy">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/> for which to get drafts and locked items (when this is set only drafts and locked items is returned).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentQuery`1.Guid">
            <summary>
            Gets or sets the Guid of the content type to search, default is <c>null</c> which finds any type of content item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentQuery`1.AppId">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.App"/> to search.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentQuery`1.ParentId">
            <summary>
            Gets or sets an the id of the parent <see cref="T:Weavy.Core.Models.Content"/> item. Used to find descendants of the specified content item. Combine with <see cref="P:Weavy.Core.Models.ContentQuery`1.Depth"/> to specify if the search should look at all descendants or only the immediate children.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentQuery`1.TransientBy">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/> for which to include transient drafts for (drafts that has not yet been published).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ContentQuery`1.Type">
            <summary>
            Gets or sets the type of content to search, default is <c>null</c> which searches all content items regardless of type.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ContentQuery">
            <summary>
            Defines a query used to find matching content.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ContentQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ContentQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.ContentQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ContentQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ContentQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ContentQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Models.FabLink">
            <summary>
            A link for the FAB button list
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FabLink.Href">
            <summary>
            The url where clicking the item should take you. You should specify Href -or- AppGuid, ItemGuid, AppTitle
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FabLink.Title">
            <summary>
            The title of the link
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FabLink.Icon">
            <summary>
            The icon of the link
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FabLink.AppGuid">
            <summary>
            The app guid for the item
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FabLink.ItemGuid">
            <summary>
            The item guid for the item
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FabLink.AppTitle">
            <summary>
            The title for the app
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ILockable">
            <summary>
            Interface for entities that can/should be locked during edit. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ILockable.LockedAt">
            <summary>
            Gets or sets the time (UTC) the entity was locked.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ILockable.LockedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that locked the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ILockableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ILockableExtensions.IsLocked(Weavy.Core.Models.ILockable)">
            <summary>
            Gets a value indicating whether the specified entity is locked for edit.
            </summary>
            <param name="lockable"></param>
        </member>
        <member name="M:Weavy.Core.Models.ILockableExtensions.LockedBy(Weavy.Core.Models.ILockable)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> that locked the <see cref="T:Weavy.Core.Models.Content" /> item or <c>null</c> if no lock exists.
            </summary>   
            <param name="lockable"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.IVersionable">
            <summary>
            Marker interface for content items that should keep a version history. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IVersionable.Version">
            <summary>
            Gets or sets the timestamp of the version.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IVersionableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IVersionableExtensions.IsCurrent(Weavy.Core.Models.IVersionable)">
            <summary>
            Gets a value indicating whether this is the current version of the entity.
            </summary>
            <param name="versionable"></param>
        </member>
        <member name="T:Weavy.Core.Models.ImageMetadata">
            <summary>
            A class containing metadata about an image. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ImageMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ImageMetadata"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageMetadata.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageMetadata.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageMetadata.Orientation">
            <summary>
            Gets or sets the EXIF orientation of the image (1-8).
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ImageSizeInfo">
            <summary>
            Represents size info for an image in the stream
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageSizeInfo.Width">
            <summary>
            The width of the image to use
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageSizeInfo.Height">
            <summary>
            The height of the image to use
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageSizeInfo.PercentageWidth">
            <summary>
            The calculated width in %
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageSizeInfo.PaddingTop">
            <summary>
            The top padding to use
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageSizeInfo.PaddingRight">
            <summary>
            The right padding to use
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ImageSizeInfo.PaddingLeft">
            <summary>
            The left padding to use
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IPinnable">
            <summary>
            Interface for entities that can be pinned. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPinnable.PinnedAt">
            <summary>
            Gets the date and time (UTC) the entity was pinned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPinnable.PinnedById">
            <summary>
            Gets the id of the user that pinned the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IPinnableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IPinnableExtensions.IsPinned(Weavy.Core.Models.IPinnable)">
            <summary>
            Gets a value indicating whether the entity is pinned.
            </summary>
            <param name="pinnable"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.PresenceStatus">
            <summary>
            Enum type for user presence. 
            A user can have one of two possible presence values, active or away. 
            A user is active if they have at least one active client connected, and they are not manually marked as "away".
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PresenceStatus.Away">
            <summary>
            User is away
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PresenceStatus.Active">
            <summary>
            User is active.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.FacetItem">
            <summary>
            The individual items in a faceted search.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FacetItem.Name">
            <summary>
            Gets or sets the display name of the facet item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FacetItem.Value">
            <summary>
            Gets or sets the value of the facet item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FacetItem.Count">
            <summary>
            Gets or sets the number of hits for this facet item.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IEmbeddable">
            <summary>
            Interface for entities that can be embedded in the stream.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IEmbeddable.GetEmbed(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Returns the embed data for the entity.
            </summary>
            <param name="maxwidth"></param>
            <param name="maxheight"></param>
            <returns>An <see cref="T:Weavy.Core.Models.Embed" /> object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.IHtmlDocument">
            <summary>
            Interface for objects that represents a document (and can be exported to .docx).
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IHtmlDocument.GetHtml">
            <summary>
            Gets the document content as html for export.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.PushNotificationDestination">
            <summary>
            The push notification types, used when pushing to mobile apps.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PushNotificationDestination.Spaces">
            <summary>
            Push to Weavy Spaces app.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PushNotificationDestination.Messenger">
            <summary>
            Push to Weavy Messenger app.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Layout">
            <summary>
            Defines different layouts.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Layout.Unknown">
            <summary>
            Unspecified or unknown layout.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Layout.Card">
            <summary>
            Card layout.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Layout.List">
            <summary>
            List layout.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Layout.Table">
            <summary>
            Table layout.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ConversationMember">
            <summary>
            An object representing a member of a conversation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ConversationMember.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ConversationMember"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationMember.DeliveredAt">
            <summary>
            Gets the date and time (UTC) when the member last had a message delivered in the the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationMember.ReadAt">
            <summary>
            Gets the date and time (UTC) when the member last read the conversation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IndexAttribute">
            <summary>
            Provides an attribute for specifying whether a field/property should be indexed for fulltext search.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexAttribute.Index">
            <summary>
            Indicates whether or not the field/property should be indexed for fulltext search.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IndexAttribute.#ctor(System.Boolean)">
            <summary>
            Indicate whether or not a field/property is editable.
            </summary>
            <param name="index">Indicates whether the field/property should be indexed for fulltext search.</param>
        </member>
        <member name="T:Weavy.Core.Models.Facet">
            <summary>
            A facet for filtering search result.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Facet.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Facet.Name">
            <summary>
            Gets or sets the display name of the facet.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Facet.Field">
            <summary>
            Gets or sets the name of the index field for the facet.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Facet.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.PresenceInfo">
            <summary>
            A class for describing a user's presence information (active or away).
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PresenceInfo.#ctor(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Connection},System.Boolean)">
            <summary>
            
            </summary>
            <param name="connections">A list of connections.</param>
            <param name="manualAway"><c>true</c> if user was manually marked as away, otherwise <c>false</c></param>
        </member>
        <member name="P:Weavy.Core.Models.PresenceInfo.Connections">
            <summary>
            Gets the total number of connections.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PresenceInfo.LastActiveAt">
            <summary>
            Gets a time indicating when the user was last active.
            If a user has no connected clients then this property will be absent.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PresenceInfo.Status">
            <summary>
            Gets the user's presence status.
            A user is active if they they have at least one active client connected (and they are not manually marked as away).
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Poll">
            <summary>
            A multiple choice poll.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Poll.Id">
            <summary>
            Gets the id of the poll.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Poll.OptionIds">
            <summary>
            Gets the ids of the poll options (if any).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Poll.Options">
            <summary>
            Gets the options for the poll.
            </summary>
            <remarks>
            This property is lazy loaded, use <see cref="P:Weavy.Core.Models.Poll.OptionIds"/> if you don't need the actual options.
            </remarks>
        </member>
        <member name="P:Weavy.Core.Models.Poll.HasVoted">
            <summary>
            Gets a value indicating whether the current user has voted in this poll.
            </summary>
            <remarks>
            This property is lazy loaded.
            </remarks>
        </member>
        <member name="P:Weavy.Core.Models.Poll.VoteCount">
            <summary>
            Gets the total number of votes in this poll.
            </summary>
            <remarks>
            This property is lazy loaded.
            </remarks>
        </member>
        <member name="T:Weavy.Core.Models.PollOption">
            <summary>
            An individual option in a poll.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PollOption.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.PollOption"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.Id">
            <summary>
            Gets the option id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.PollId">
            <summary>
            Gets the id of the poll.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.Poll">
            <summary>
              Gets the poll that the option is attached to.
            </summary>   
            <remarks>This property is lazy loaded, use <see cref="P:Weavy.Core.Models.PollOption.PollId"/> if you only need the id of the poll.</remarks>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.Text">
            <summary>
            Gets or sets the option text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.Html">
            <summary>
             Gets or sets the option text as html.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.Tokens">
            <summary>
            Gets the list of tokens (urls, #hashtags, @mentions and $cashtags) in this option.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.CreatedAt">
            <summary>
            Gets or sets the time (UTC) the option was initially created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.CreatedById">
            <summary>
            Gets or sets the id of the User that posted the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.VoterIds">
            <summary>
            Gets the ids of all users that voted for this option.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.VotersString">
            <summary>
            Sets the underlying value for the <see cref="P:Weavy.Core.Models.PollOption.VoterIds"/> list.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.Voters">
            <summary>
            Gets the voters, i.e. the people that voted for this option.
            </summary>
            <remarks>
            This property is lazy loaded, use <see cref="P:Weavy.Core.Models.PollOption.VoterIds"/> if you don't need the actual results.
            </remarks>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.HasVoted">
            <summary>
            Gets a value indicating if the current user has voted for this option.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PollOption.VoteCount">
            <summary>
            Get the total number of votes for this option.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PollOption.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.PollOption.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Weavy.Core.Models.SearchResult`1">
            <summary>
            Abastract base class used for search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.SearchResult`1.#ctor(Weavy.Core.Models.Query{`0},System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int64})">
            <summary>
              Initializes a new instance of the SearchResult class.
            </summary>
            <param name="query">The query used to perform the search.</param>
            <param name="result">The collection of items that matched the query.</param>
            <param name="total">The total number of hits in the result set.</param>
        </member>
        <member name="P:Weavy.Core.Models.SearchResult`1.Query">
            <summary>
            Gets the query used to perform the search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Connection">
            <summary>
            A class for tracking realtime connections.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Connection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Connection.Id">
            <summary>
            Gets or sets the connection id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Connection.UserId">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> on this connection.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Connection.CreatedAt">
            <summary>
            Gets or sets the time this connection was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Connection.ModifiedAt">
            <summary>
            Gets or sets the time the connection was last modified (seen alive).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Connection.ActiveAt">
            <summary>
            Gets or sets the time the connection was last reported active.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Connection.IsActive">
            <summary>
            Gets a value indicating whether this connection is active.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Connection.UserAgent">
            <summary>
            Gets or sets the UserAgent string of the connection.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Access">
            <summary>
              Indicates the possible access rights to en entity or entity type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Access.None">
            <summary>
            No access.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Access.Read">
            <summary>
            Read access
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Access.Write">
            <summary>
            Write access.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Access.Admin">
            <summary>
            Admin access.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.AccessControlEntry">
            <summary>
            An object representing an access contol entry (ACE).
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AccessControlEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.AccessControlEntry"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AccessControlEntry.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},Weavy.Core.Models.Access)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.AccessControlEntry"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AccessControlEntry.UserId">
            <summary>
              Gets the user id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AccessControlEntry.RoleId">
            <summary>
              Gets the role id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.AccessControlEntry.Access">
            <summary>
              Gets the access rights for the user/role.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AccessControlEntry.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.AccessControlEntry.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="M:Weavy.Core.Models.AccessControlEntry.Equals(System.Object)">
            <summary>
            Determines whether two instances of Reference are equal. 
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Weavy.Core.Models.AccessControlEntry.GetHashCode">
            <summary>
            Returns a hash code for the Reference. 
            </summary>
            <returns>A hash code for the Reference.</returns>
        </member>
        <member name="T:Weavy.Core.Models.Folder">
            <summary>
             A folder used for organizing files.
            </summary>
            <remarks>
             Also used as fallback when actual folder implementation cannot be resolved.
            </remarks>
        </member>
        <member name="P:Weavy.Core.Models.Folder.FollowedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that follow the space.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Folder.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Folder.Items">
            <summary>
            Gets or sets the <see cref="T:Weavy.Core.Models.Content"/> items to display in the folder.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Folder.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.MemberQuery">
            <summary>
            Defines a query used to find members.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MemberQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.MemberQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MemberQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.MemberQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.MemberQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.MemberQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.MemberQuery.Admin">
            <summary>
            Gets or sets a value indicating whether the search should return members that are admins;
            <c>true</c> returns only admins, <c>false</c> returns only entities that are not admins and <c>null</c> ignores the IsAdmin property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.MemberQuery.Suspended">
            <summary>
            Gets or sets a value indicating whether to find suspended members or not, <c>null</c> returns all members.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.DaemonAttribute">
            <summary>
              Attribute for providing metadata about daemons.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DaemonAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.DaemonAttribute"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.DaemonAttribute.Schedule">
            <summary>
            Gets or sets the Crontab expression representing the schedule when the daemon should run. See http://en.wikipedia.org/wiki/Cron.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ArchiveList">
            <summary>
              An <see cref="T:Weavy.Core.Models.ArchiveList"/> contains methods for displaying the number of items created during a specific year, month and/or day.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ArchiveList.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ArchiveList"/> class with a dictionary of dates and the number of items for each date.
            </summary>
            <param name="archive">A list with dates and the number of items for each date.</param>
        </member>
        <member name="M:Weavy.Core.Models.ArchiveList.GetYears">
            <summary>
            Gets the list of years with items in the archive list.
            </summary>
            <returns>A list of years with items in the archive.</returns>
        </member>
        <member name="M:Weavy.Core.Models.ArchiveList.GetMonths(System.Int32)">
            <summary>
            Gets a list of months, for the specified year, with items in the archive list.
            </summary>
            <param name="year">The year for which to return months.</param>
            <returns>A list of months with items in the archive.</returns>
        </member>
        <member name="M:Weavy.Core.Models.ArchiveList.GetDays(System.Int32,System.Int32)">
            <summary>
            Gets a list of days, for the specified year and month, with items in the archive list.
            </summary>
            <param name="year">The year for which to return days.</param>
            <param name="month">The month for which to return days.</param>
            <returns>A list of days with items in the archive.</returns>
        </member>
        <member name="M:Weavy.Core.Models.ArchiveList.GetCount">
            <summary>
            Gets the total number of items in the archive list.
            </summary>
            <returns>The total number of items in thte archive list.</returns>
        </member>
        <member name="M:Weavy.Core.Models.ArchiveList.GetCount(System.Int32)">
            <summary>
            Gets the total number of items in the archive list for the specified year.
            </summary>
            <param name="year">The year for which to return the item count.</param>
            <returns>The total number of items in the archive for the specified year.</returns>
        </member>
        <member name="M:Weavy.Core.Models.ArchiveList.GetCount(System.Int32,System.Int32)">
            <summary>
            Gets the total number of items in the archive list for the specified year and month.
            </summary>
            <param name="year">The year for which to return the item count.</param>
            <param name="month">The month for which to return the item count.</param>
            <returns>The total number of items in the archive for the specified year and month.</returns>
        </member>
        <member name="M:Weavy.Core.Models.ArchiveList.GetCount(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the total number of items in the archive list for the specified year, month and day.
            </summary>
            <param name="year">The year for which to return the item count.</param>
            <param name="month">The month for which to return the item count.</param>
            <param name="day">The day for which to return the item count.</param>
            <returns>The total number of items in the archive for the specified year, month and day.</returns>
        </member>
        <member name="T:Weavy.Core.Models.Blob">
            <summary>
            A class containing metadata about a blob. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Blob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Blob"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Blob.#ctor(Weavy.Core.Models.ExternalBlob)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Blob"/> class from the specified <see cref="T:Weavy.Core.Models.ExternalBlob"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.Id">
            <summary>
            Gets the blob id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.Name">
            <summary>
            Gets or sets the file name of the blob.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.MediaType">
            <summary>
            Gets or sets the Media Type (https://www.iana.org/assignments/media-types/media-types.xhtml) of the file, e.g. "image/png".
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.Width">
            <summary>
            Gets the width, in pixels, of the blob (only for images).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.Height">
            <summary>
            Gets the height, in pixels, of the blob (only for images).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.Size">
            <summary>
            Gets the size, in bytes, of the file.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.ETag">
            <summary>
            Gets the ETag that uniquely identifies the blob.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.CreatedAt">
            <summary>
            Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.Blob"/> was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.CreatedById">
            <summary>
            Gets or sets the id of the user that created the <see cref="T:Weavy.Core.Models.Blob"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.Provider">
            <summary>
            Gets the provider name (for external blobs).
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.Blob.Link">
            <summary>
            Gets an url for viewing the blob (for external blobs).
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.Blob.Download">
            <summary>
            Gets an url for downloading the blob (for external blobs).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.Embed">
            <summary>
            Gets an url used for embedding the blob (for external blobs).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.Thumb">
            <summary>
            Gets a thumbnail url for the blob (for external blobs).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Blob.Raw">
            <summary>
            Gets the raw metadata from the provider (for external blobs).
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Blob.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Blob.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified object is valid.
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.CacheRegion">
            <summary>
              Enumerate the available Cache regions.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CacheRegion.None">
            <summary>
            No cache region.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CacheRegion.Permission">
            <summary>
            Cache region for Permissions.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CacheRegion.Plugin">
            <summary>
            Cache region for Plugins.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CacheRegion.Role">
            <summary>
            Cache region for Roles.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CacheRegion.Setting">
            <summary>
            Cache region for Settings.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CacheRegion.Space">
            <summary>
            Cache region for Spaces.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CacheRegion.User">
            <summary>
             Cache region for Users.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CacheRegion.Directory">
            <summary>
             Cache region for Directories.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.CheckStatus">
            <summary>
            Defines the possible states of an installation check.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CheckStatus.Skipped">
            <summary>
            Check was skipped.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CheckStatus.Passed">
            <summary>
            Check passed.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.CheckStatus.Failed">
            <summary>
            Check failed.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Comment">
            <summary>
              An object representing Comments.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Comment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Comment"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.Id">
            <summary>
             Gets the id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.Type">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.Text">
            <summary>
             Gets or sets the <see cref="T:Weavy.Core.Models.Comment"/> text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.Html">
            <summary>
             Gets the <see cref="T:Weavy.Core.Models.Comment"/> html.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.CreatedAt">
            <summary>
              Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.Comment"/> was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.CreatedById">
            <summary>
              Gets or sets the id of the user that created the <see cref="T:Weavy.Core.Models.Comment"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.Comment"/> was last updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.ModifiedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that last updated the <see cref="T:Weavy.Core.Models.Comment"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.TrashedAt">
            <summary>
            Gets the time (UTC) the <see cref="T:Weavy.Core.Models.Comment"/> was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.TrashedById">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.User"/> that trashed this <see cref="T:Weavy.Core.Models.Comment"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.LikedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that like the <see cref="T:Weavy.Core.Models.Comment"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the <see cref="T:Weavy.Core.Models.Comment"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.AttachmentIds">
            <summary>
            Gets the ids of all <see cref="T:Weavy.Core.Models.Attachment"/>s attached to the <see cref="T:Weavy.Core.Models.Comment"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.EmbedIds">
            <summary>
            Gets the ids of all <see cref="T:Weavy.Core.Models.Embed"/>s attached to the <see cref="T:Weavy.Core.Models.Comment"/>
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.MeetingIds">
            <summary>
            Gets the ids of all <see cref="T:Weavy.Core.Models.Meeting"/>s attached to the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.Tags">
            <summary>
            Gets the list of unique tags in this <see cref="T:Weavy.Core.Models.Comment"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.Tokens">
            <summary>
            Gets or sets the list of tokens (urls, #hashtags, @mentions and $cashtags) in this <see cref="T:Weavy.Core.Models.Comment"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.Parent">
            <summary>
            Gets the commented entity, i.e. Content, Post etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.SpaceId">
            <summary>
            Gets the id of the space where the <see cref="T:Weavy.Core.Models.Comment"/> exists.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Comment.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Comment.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Comment.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Comment.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="M:Weavy.Core.Models.Comment.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Comment.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.CommentQuery">
            <summary>
            Defines a query used to find matching comments.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.CommentQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.CommentQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.CommentQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.CommentQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.CommentQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.CommentQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.CommentQuery.Parent">
            <summary>
            Gets or sets the parent entity for which to find comments, <c>null</c> to find all comments.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Daemon">
            <summary>
              Base class for daemons (background services).
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Daemon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Daemon"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Daemon.StartedAt">
            <summary>
            Gets or sets the time the daemon was last started.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Daemon.FinishedAt">
            <summary>
            Gets or sets the time the daemon was last finished.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Daemon.Schedule">
            <summary>
            Gets or sets the Crontab expression representing the schedule when the daemon should run. See http://en.wikipedia.org/wiki/Cron.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Daemon.Crontab">
            <summary>
            Gets the crontab schedule for the daemon.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Daemon.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate that the expression is valid.
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Models.Daemon.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Profile">
            <summary>
              Default user profile.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Profile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Profile"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Profile.Title">
            <summary>
             Gets or sets the title.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Profile.Department">
            <summary>
             Gets or sets the department.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Profile.Location">
            <summary>
             Gets or sets the location.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Profile.Phone">
            <summary>
             Gets or sets the phone number.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Profile.Tags">
            <summary>
            Gets or sets the list of tags for the profile.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Profile.Bio">
            <summary>
             Gets or sets the bio.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Profile.GetExcerpt">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.EmailModel">
            <summary>
              Base class for email models.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.EmailModel.#ctor(Weavy.Core.Models.User)">
            <summary>
            Creates a new instance of the <see cref="T:Weavy.Core.Models.EmailModel"/> class.
            </summary>
            <param name="to">The recipient of the email.</param>
        </member>
        <member name="P:Weavy.Core.Models.EmailModel.User">
            <summary>
              Gets the <see cref="P:Weavy.Core.Models.EmailModel.User"/> that should receive the email.
            </summary>   
        </member>
        <member name="P:Weavy.Core.Models.EmailModel.Theme">
            <summary>
            Gets the current theme settings.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ConversationEmail">
            <summary>
              A model for notifying users about unread messages in a conversation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ConversationEmail.#ctor(Weavy.Core.Models.User,Weavy.Core.Models.Conversation,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Message})">
            <summary>
            Creates a new instance of the <see cref="T:Weavy.Core.Models.ConversationEmail"/> class.
            </summary>
            <param name="to">The recipient of the email.</param>
            <param name="conversation">The conversation to display in the email.</param>
            <param name="messages">The messages to display in the email.</param>
        </member>
        <member name="P:Weavy.Core.Models.ConversationEmail.Conversation">
            <summary>
            Gets the conversation to display in the email.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationEmail.Messages">
            <summary>
            Gets the messages to display in the email.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.DailyDigestEmail">
            <summary>
              An object representing the daily digest email.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.DailyDigestEmail.#ctor(Weavy.Core.Models.User,System.Collections.Generic.IList{Weavy.Core.Models.Notification})">
            <summary>
            Daily Digest
            </summary>
            <param name="to"></param>
            <param name="notifications"></param>
        </member>
        <member name="P:Weavy.Core.Models.DailyDigestEmail.Notifications">
            <summary>
            Gets the notifications to display in the daily digest email.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.NotificationEmail">
            <summary>
              An model for notifying users about an unread notification.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.NotificationEmail.#ctor(Weavy.Core.Models.User,System.Collections.Generic.List{Weavy.Core.Models.Notification})">
            <summary>
            
            </summary>
            <param name="to"></param>
            <param name="notifications"></param>
        </member>
        <member name="P:Weavy.Core.Models.NotificationEmail.Notifications">
            <summary>
            Gets the notifications to display in the email.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.PasswordResetEmail">
            <summary>
              A model for password reset emails.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PasswordResetEmail.#ctor(Weavy.Core.Models.User)">
            <summary>
            
            </summary>
            <param name="to"></param>
        </member>
        <member name="T:Weavy.Core.Models.WelcomeEmail">
            <summary>
            An model for welcome emails.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.WelcomeEmail.#ctor(Weavy.Core.Models.User,System.String)">
            <summary>
            
            </summary>
            <param name="to"></param>
            <param name="password">The (generated) password.</param>
        </member>
        <member name="P:Weavy.Core.Models.WelcomeEmail.Password">
            <summary>
            Gets the password to display in the email.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.TestEmail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TestEmail.#ctor(Weavy.Core.Models.User)">
            <summary>
            
            </summary>
            <param name="to"></param>
        </member>
        <member name="P:Weavy.Core.Models.TestEmail.Body">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TestEmail.Date">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ExampleEmail">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ExampleEmail.#ctor(Weavy.Core.Models.User)">
            <summary>
            
            </summary>
            <param name="to"></param>
        </member>
        <member name="T:Weavy.Core.Models.EntityQuery">
            <summary>
            Defines a query used to find entities.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.EntityQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.EntityQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.EntityQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.EntityQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.EntityQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.EntityQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.EntityQuery.StarredById">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/>. Used to find entities starred by a specific <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> to ignore the StarredBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.EntityQuery.LikedById">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/>. Used to find entities liked by a specific <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> to ignore the LikedBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.EntityQuery.FollowedById">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/>. Used to find entities followed by a specific <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> to ignore the FollowedBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.EntityQuery.VisitedById">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/>. Used to find entities visited by a specific <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> to ignore the VisitedBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ITool">
            <summary>
              Interface for web tools.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ICommand">
            <summary>
              Interface for command line tools.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.FileAttribute">
            <summary>
            Specifies the accepted file types and size of an uploaded file.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.FileAttribute.#ctor">
            <summary>
            Initializes a new instance of the FileAttribute class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FileAttribute.Accept">
            <summary>
            Gets or sets the file type specifiers that the file input should accept, e.g. ".gif, .png".
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FileAttribute.MaxSize">
            <summary>
            Gets or sets the maximum accepted file size.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.FileAttribute.PlaceholderImage">
            <summary>
            Gets or sets the virtual path to a placeholder image, e.g. ~/img/pixel.png.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.FileAttribute.GetBlob(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.FileAttribute.IsValid(System.Object)">
            <summary>
            Checks that the value of the data field is valid.
            </summary>
            <param name="value">The data field value to validate.</param>
            <returns><c>true</c> if the specified value is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Models.FileAttribute.FormatErrorMessage(System.String)">
            <summary>
            Formats the error message to present to the user.
            </summary>
            <param name="name">The user-visible name to include in the formatted message.</param>
            <returns>The localized string describing the validation error,</returns>
        </member>
        <member name="T:Weavy.Core.Models.OEmbed">
            <summary>
            Represents an oEmbed object. See http://oembed.com for more details.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.OEmbed.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.Type">
            <summary>
            Gets the type of embed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.Version">
            <summary>
            Gets the oembed version.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.Title">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.AuthorName">
            <summary>
            Gets the author name.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.AuthorUrl">
            <summary>
            Gets the author url.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.ProviderName">
            <summary>
            Gets the provider name.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.ProviderUrl">
            <summary>
            Gets the provider url.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.CacheAge">
            <summary>
            Gets the cache age in seconds.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.ThumbnailUrl">
            <summary>
            Gets the thumbnail url.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.ThumbnailWidth">
            <summary>
            Gets the width of the thumbnail.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.ThumbnailHeight">
            <summary>
            Gets the height of the thumbnail.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.Url">
            <summary>
            Gets the source url of the image (when EmbedType is "photo"). Consumers should be able to insert this URL into an &lt;img&gt; element.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.Width">
            <summary>
            Gets the width in pixels of the embed (when EmbedType is "photo", "rich" or "video").
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.Height">
            <summary>
            Gets the height in pixels of the embed (when EmbedType is "photo", "rich" or "video").
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.OEmbed.Html">
            <summary>
            Gets the html required to display the resource (when EmbedType is "rich" or "video").
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Embed">
            <summary>
            Represents an embedded object.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Embed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Embed"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Embed.#ctor(Weavy.Core.Models.OEmbed)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Embed"/> class with the given oEmbed data.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Embed.Id">
            <summary>
            Gets the embed id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Embed.Parent">
            <summary>
            Gets a reference to the entity where the embed is embedded.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Embed.Description">
            <summary>
            Gets or sets a description for the embed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Embed.CreatedAt">
            <summary>
            Gets the time (UTC) the embed url was fetched.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Embed.CreatedById">
            <summary>
            Gets the id of the user that created the embed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Embed.Host">
            <summary>
            Gets the name of the host/domain where the embed originates.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Embed.Image">
            <summary>
            Gets the primary image for the embed (if any).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Embed.OriginalUrl">
            <summary>
            Gets the original url the user provided.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Embed.IsLink">
            <summary>
            Gets or sets a UI hint telling the UI to render this embed as a link.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Embed.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Embed.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.EmbedType">
            <summary>
            Indicates the type of embed.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EmbedType.None">
            <summary>
            Unknown or unsupported embed type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EmbedType.Photo">
            <summary>
            This type is used for representing static photos.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EmbedType.Video">
            <summary>
            This type is used for representing playable videos. 
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EmbedType.Link">
            <summary>
            Responses of this type allow a provider to return any generic embed data (such as title and author_name), without providing either the url or html parameters. 
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EmbedType.Rich">
            <summary>
            This type is used for rich HTML content that does not fall under one of the other categories.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EmbedType.Audio">
            <summary>
            This type is used for representing audio files.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Entity">
            <summary>
            Encapsulates a reference to an entity.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Entity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Entity" /> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Entity.#ctor(Weavy.Core.Models.EntityType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Entity" /> class.
            </summary>
            <param name="type"></param>
            <param name="id"></param>
        </member>
        <member name="M:Weavy.Core.Models.Entity.#ctor(Weavy.Core.Models.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Entity" /> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Weavy.Core.Models.Entity.Id">
            <summary>
            Gets or sets the Id of the referenced subject.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.Type">
            <summary>
            Gets the type of the referenced entity, e.g. File, Comment, Content, Message, Role, Space, User etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.SpaceId">
            <summary>
            Gets the id of the space where the entity is located.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.CreatedAt">
            <summary>
            Gets the date and time the entity was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.CreatedById">
            <summary>
            Gets the id of the user that created the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.ModifiedAt">
            <summary>
            Gets the date and time the entity was modified.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.ModifiedById">
            <summary>
            Gets the id of the user that modified the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.TrashedAt">
            <summary>
            Gets the date and time the entity was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.TrashedById">
            <summary>
            Gets the id of the user that trashed the entity.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Entity.GetIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Entity.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Entity.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity.Value">
            <summary>
            Gets or sets the value of the referenced entity.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Entity.Equals(System.Object)">
            <summary>
            Determines whether two instances of Reference are equal. 
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Entity.GetHashCode">
            <summary>
            Returns a hash code for the Reference. 
            </summary>
            <returns>A hash code for the Reference.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Entity.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.Entity`1">
            <summary>
            Encapsulates a reference to an entity.
            </summary>
            <typeparam name="T">The entity type.</typeparam>
        </member>
        <member name="M:Weavy.Core.Models.Entity`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Entity`1" /> class.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Weavy.Core.Models.Entity`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Entity`1" /> class.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Weavy.Core.Models.Entity`1.Type">
            <summary>
            Gets the type of the referenced entity, e.g. Comment, Content, Message, Role, Space, User etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Entity`1.Value">
            <summary>
            Gets or sets the value of the referenced entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.EntityType">
            <summary>
              Enum for entity types.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.App">
            <summary>
            App
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.Role">
            <summary>
            Role
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.Post">
            <summary>
            Post
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.Space">
            <summary>
            Space
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.User">
            <summary>
            User
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.Notification">
            <summary>
            Notification
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.Conversation">
            <summary>
            Conversation
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.EntityType.Attachment">
            <summary>
            Attachment
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.LogEntry">
            <summary>
            Describes an entry in the system event log, e.g. a user posts something in the stream, edits a wiki article, joins a space etc.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.LogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.LogEntry"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.LogEntry.#ctor(Weavy.Core.Models.LogEntryType)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.LogEntry"/> class with the specified action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Weavy.Core.Models.LogEntry.#ctor(Weavy.Core.Models.LogEntryType,Weavy.Core.Models.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.LogEntry"/> class with the specified type and object reference.
            </summary>
            <param name="action"></param>
            <param name="subject"></param>
        </member>
        <member name="M:Weavy.Core.Models.LogEntry.#ctor(Weavy.Core.Models.LogEntryType,Weavy.Core.Models.IEntity,Weavy.Core.Models.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.LogEntry"/> class with the specified type, object and context reference.
            </summary>
            <param name="action"></param>
            <param name="subject"></param>
            <param name="context"></param>
        </member>
        <member name="P:Weavy.Core.Models.LogEntry.Id">
            <summary>
            Gets the id of the event.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LogEntry.ActorId">
            <summary>
              Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that performed the action.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LogEntry.Actor">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> that performed the action.
            </summary>   
        </member>
        <member name="P:Weavy.Core.Models.LogEntry.CreatedAt">
            <summary>
              Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.LogEntry"/> occured.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LogEntry.Action">
            <summary>
            Gets or sets the action that occured.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LogEntry.Subject">
            <summary>
            Gets or sets a reference to the subject of the action.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LogEntry.Context">
            <summary>
            Gets or sets a reference to the context of the action.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LogEntry.Text">
            <summary>
            Gets or sets the entry text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LogEntry.Html">
            <summary>
            Gets or sets the entry text as html.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.LogEntry.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Weavy.Core.Models.LogEntryQuery">
            <summary>
            Defines a query used to find event log entries.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.LogEntryQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.LogEntryQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.LogEntryQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.LogEntryQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.LogEntryQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.LogEntryQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.LogEntryQuery.Subject">
            <summary>
            Gets or sets the subject for which to find events, <c>null</c> returns all events.
            Default value is <c>null</c>. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LogEntryQuery.Context">
            <summary>
            Gets or sets the context for which to find events, <c>null</c> returns all events.
            Default value is <c>null</c>. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LogEntryQuery.Action">
            <summary>
            Gets or sets a value indicating the type of actions to return.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.LogEntryType">
            <summary>
            The log entry types, used for entries in the system event log etc.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Created">
            <summary>
            An entity was created.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Posted">
            <summary>
            A message was posted in a stream.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Replied">
            <summary>
            Replied to a post.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Commented">
            <summary>
            Commented on an item.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Modified">
            <summary>
            An entity was modified.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Changed">
            <summary>
            Entity avatar changed.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Edited">
            <summary>
            An item, post or comment was edited.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Updated">
            <summary>
            A user updated his/her profile.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Deleted">
            <summary>
            An entity was deleted.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Liked">
            <summary>
            An entity was liked.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Mentioned">
            <summary>
            A user or space was @mentioned.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Joined">
            <summary>
            A user joined a space or event.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Left">
            <summary>
            A user left a space or conversation.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Added">
            <summary>
            A user was added to a space or event.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Removed">
            <summary>
            A user was removed from a space or conversation.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Uploaded">
            <summary>
            A file was uploaded.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.ResetPassword">
            <summary>
            A users password was reset. 
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Moved">
            <summary>
            A user moved an item to a new destination.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Copied">
            <summary>
            A user copied an item.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Reverted">
            <summary>
            A user reverted an item to a previous version.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Restored">
            <summary>
             A user restored a trashed entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Trashed">
            <summary>
             A user trashed an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.SendMail">
            <summary>
            An email was sent.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Followed">
            <summary>
            An entity was followed.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Unfollowed">
            <summary>
            An entity was unfollowed.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Attached">
            <summary>
            A file was attached.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.RequestedMembership">
            <summary>
            A user requested membership to a closed space.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Verified">
            <summary>
            A user verified his/her email.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.SignedIn">
            <summary>
            A user signed in.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Voted">
            <summary>
            A user voted for an option in a poll.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.Shared">
            <summary>
            Someone shared en entity with another user.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.LogEntryType.SignedOut">
            <summary>
            A user signed out.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Expando">
            <summary>
              Base class for objects with both static and dynamic properties.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Expando._properties">
            <summary>
            Backing store for dynamic properties
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Expando.Properties">
            <summary>
            Gets or sets the backing store for property values.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Expando.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            If you try to get a value of a property not defined in the class, this method is called.
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Expando.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            If you try to set a value of a property that is not defined in the class, this method is called.
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Expando.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Models.Expando.Property(System.String)">
            <summary>
            Gets or sets the value of the property with the specified name.
            </summary>
            <param name="name">The name of the property to get or set.</param>
            <returns>Returns the value of the specified property.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Expando.Value``1(System.String)">
            <summary>
            Gets the value of the specified property, or the default value for <typeparamref name="T"/> if the property does not exist.
            </summary>
            <typeparam name="T">The type of the value to get.</typeparam>
            <param name="name">The property name.</param>
            <returns>Returns the value of the specified property or the default value for <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Expando.GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the dynamic properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Expando.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates over the dynamic properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Expando.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.File">
            <summary>
            A content file. 
            </summary>
            <remarks>
             Also used as fallback when actual file implementation cannot be resolved.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Models.File.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.File"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.File.Blob">
            <summary>
            Gets or sets the underlying <see cref="P:Weavy.Core.Models.File.Blob"/> with meta data about, and pointing to, the binary data of the file.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.File.Description">
            <summary>
            Gets or sets a short description of the file.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.File.Tags">
            <summary>
            Gets or sets the list of tags for the file.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.File.CommentIds">
            <summary>
            Gets the ids of all comments for the entity.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.File.FollowedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that follow the space.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.File.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the item.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.File.Version">
            <summary>
            Gets or sets the timestamp of the revision.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.File.GetIcon">
            <summary>
            Gets the icon to use for the file.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.File.GetKind">
            <summary>
            Returns the kind of the file, e.g. "image", "document", "video" etc.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.File.CreateThumb(System.IO.FileInfo)">
            <summary>
            Creates a thumbnail image for the file.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.File.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.AttachmentQuery">
            <summary>
            Defines a query used to find attachments.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AttachmentQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.AttachmentQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AttachmentQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.AttachmentQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.AttachmentQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.AttachmentQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.AttachmentQuery.AttachedTo">
            <summary>
            Gets or sets the parent object.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.AttachmentQuery.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.ForbiddenException">
            <summary>
            The exception that is thrown when the current user has not been granted permission to the requested resource.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ForbiddenException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ForbiddenException"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ForbiddenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ForbiddenException"/> class with a specified error message.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ForbiddenException.Entity">
            <summary>
            Gets the entity for which permission was denied.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ForbiddenException.Permission">
            <summary>
            Gets the permission that was denied.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ForbiddenException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ISettings">
            <summary>
              Interface for settings.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Message">
            <summary>
            An individual message in a conversation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Message.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Message"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.Id">
            <summary>
            Gets the message id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.Type">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.Conversation">
            <summary>
            Gets a reference to the <see cref="T:Weavy.Core.Models.Conversation"/> where the message is posted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.Text">
            <summary>
            Gets or sets the message text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.Html">
            <summary>
             Gets or sets the message html.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.CreatedAt">
            <summary>
            Gets or sets the time (UTC) the message was initially created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.CreatedById">
            <summary>
            Gets or sets the id of the User that posted the <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.Message"/> was last updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.ModifiedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that last updated the <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.TrashedAt">
            <summary>
            Gets the time (UTC) the <see cref="T:Weavy.Core.Models.Message"/> was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.TrashedById">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.User"/> that trashed this <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.LikedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that like the <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.AttachmentIds">
            <summary>
            Gets the ids of all files attached to the <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.EmbedIds">
            <summary>
            Gets the ids of all <see cref="T:Weavy.Core.Models.Embed"/>s attached to the <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.MeetingIds">
            <summary>
            Gets the ids of all <see cref="T:Weavy.Core.Models.Meeting"/>s attached to the <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.Tags">
            <summary>
            Gets the list of unique tags in this Message.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.Tokens">
            <summary>
            Gets the list of tokens (urls, #hashtags, @mentions and $cashtags) in this message.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Message.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Message.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Message.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="M:Weavy.Core.Models.Message.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Models.Message.SpaceId">
            <summary>
            Always returns <see cref="F:Weavy.Core.Services.SpaceService.ConversationsId"/>
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Message.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Message.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Message.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.MessageQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Weavy.Core.Models.Message"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MessageQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.MessageQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.MessageQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.MessageQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.MessageQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.MessageQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.MessageQuery.ConversationIds">
            <summary>
            Gets or sets the ids of conversations to search, <c>null</c> to search all conversations.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.TrashedEntity">
            <summary>
            A class that represents a trashed entity.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TrashedEntity.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.Id">
            <summary>
            Gets the id of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.SpaceId">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.Space"/> where the entity is located.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.Type">
            <summary>
            Gets the type of entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.Title">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TrashedEntity.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TrashedEntity.GetTitle">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TrashedEntity.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.CreatedAt">
            <summary>
            Gets the date and time (UTC) the entity was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.CreatedById">
            <summary>
            Gets the id of the user that created the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.ModifiedAt">
            <summary>
            Gets the date and time (UTC) the entity was modified.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.ModifiedById">
            <summary>
            Gets the id of the user that modified the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.TrashedAt">
            <summary>
            Gets the date and time (UTC) the entity was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.TrashedById">
            <summary>
            Gets the id of the user that trashed the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.TrashedEntity.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.TrashedEntity.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.Settings">
            <summary>
              Base class for settings.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Settings.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Function">
            <summary>
              Base class for command line and web tools.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Function.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Function.Output">
            <summary>
             Gets or sets an output writer.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Function.Log">
            <summary>
            Gets or sets the output from the last run.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Function.Result">
            <summary>
            Gets or sets the result of the last run.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Function.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Performs the work of the tool.
            </summary>
            <returns>An value indicating the success of the tool.</returns>
        </member>
        <member name="P:Weavy.Core.Models.Function.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Role">
            <summary>
              An object representing a security role.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Role.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Role"/> class.
            </summary>
            <param name="createdById">Id of the user that created the role</param>
        </member>
        <member name="M:Weavy.Core.Models.Role.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Role"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.Id">
            <summary>
             Gets the id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.Type">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.Name">
            <summary>
             Gets or sets the name of the role (used for authorization).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.Description">
            <summary>
             Gets or sets a short description of the <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.CreatedAt">
            <summary>
            Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.Role"/> was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.CreatedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that updated the <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.Role"/> was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.ModifiedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that updated the <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.TrashedAt">
            <summary>
            Gets the time (UTC) the <see cref="T:Weavy.Core.Models.Role"/> was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.TrashedById">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.User"/> that trashed this <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.Iss">
            <summary>
            Gets or sets the issuer (for external roles).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.Sub">
            <summary>
            Gets or sets the subject (for external roles).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.SyncedAt">
            <summary>
             Gets the time the <see cref="T:Weavy.Core.Models.Role"/> was last synchronized with the external provider.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.MemberIds">
            <summary>
            Gets the ids of the users that are members of the <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Role.IsMember">
            <summary>
            Gets a value indicating whether the current user is a member of the <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Role.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Role.GetTitle">
            <summary>
            Gets the display name of the <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Role.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="P:Weavy.Core.Models.Role.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Role.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Role.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.RoleQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Weavy.Core.Models.Role"/> items.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.RoleQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.RoleQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.RoleQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.RoleQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.RoleQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.RoleQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.RoleQuery.BuiltIn">
            <summary>
            Gets or sets a value indicating whether the result should return built-in roles.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.RoleQuery.MemberId">
            <summary>
            Gets or sets a user id. Can be used to find all roles that a <see cref="T:Weavy.Core.Models.User"/> is member of.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.RoleQuery.Iss">
            <summary>
            Gets or sets the role issuer. Can be used to find all roles from a specific issuer.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Hook">
            <summary>
              Base class for hooks.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ICommentable">
            <summary>
            Interface for entities that can be commented. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ICommentable.CommentIds">
            <summary>
            Gets or sets the ids of all comments for the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ICommentableExtensions">
            <summary>
            Extension methods for classes implementing the <see cref="T:Weavy.Core.Models.ICommentable"/> interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ICommentableExtensions.Comments(Weavy.Core.Models.ICommentable)">
            <summary>
            Gets the comments for the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IDaemon">
            <summary>
              Interface for daemons.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IDaemon.StartedAt">
            <summary>
            Gets or sets the time the daemon was last started.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IDaemon.FinishedAt">
            <summary>
            Gets or sets the time the daemon was last finished.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IDaemon.Schedule">
            <summary>
            Gets or sets the Crontab expression representing the schedule when the daemon should run.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IDaemon.Crontab">
            <summary>
            Gets the crontab schedule for the daemon.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IEntity">
            <summary>
            Interface for entities.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IEntity.Id">
            <summary>
            Gets the id of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IEntity.Type">
            <summary>
            Gets the type of entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IEntity.CreatedAt">
            <summary>
            Gets or sets the date and time (UTC) the entity was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IEntity.CreatedById">
            <summary>
            Gets or sets the id of the user that created the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IEntity.ModifiedAt">
            <summary>
            Gets or sets the date and time (UTC) the entity was modified.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IEntity.ModifiedById">
            <summary>
            Gets or sets the id of the user that modified the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IEntity.Timestamp">
            <summary>
            Gets the timestamp of the entity.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IEntity.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.IEntity.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.IEntity.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.IEntityExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IEntityExtensions.IsBuiltIn(Weavy.Core.Models.IEntity)">
            <summary>
            Gets a value indicating whether the specified entity is built-in.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Weavy.Core.Models.IEntityExtensions.CreatedBy(Weavy.Core.Models.IEntity)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> that created the item.
            </summary>   
            <param name="entity"></param>
        </member>
        <member name="M:Weavy.Core.Models.IEntityExtensions.ModifiedBy(Weavy.Core.Models.IEntity)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> that modified the item.
            </summary>   
            <param name="entity"></param>
        </member>
        <member name="T:Weavy.Core.Models.IExpando">
            <summary>
            Base interface for objects with dynamic behavior.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IExpando.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the specified name.
            </summary>
            <param name="name">The name of the property to get or set.</param>
            <returns>Returns the value of the specified property.</returns>
        </member>
        <member name="M:Weavy.Core.Models.IExpando.Value``1(System.String)">
            <summary>
            Gets the value of the specified property, or the default value for <typeparamref name="T"/> if the property does not exist.
            </summary>
            <typeparam name="T">The type of the value to get.</typeparam>
            <param name="name">The property name.</param>
            <returns>Returns the value of the specified property or the default value for <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Weavy.Core.Models.IExpandoExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IExpandoExtensions.GetHtmlProperties(Weavy.Core.Models.IExpando)">
            <summary>
            Helper method for getting all string properties marked with <see cref="F:Weavy.Core.Models.DataType.Html"/>.
            </summary>
            <param name="expando"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.IExpandoExtensions.GetProperties(Weavy.Core.Models.IExpando,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get a list of property values from an object implementing the <see cref="T:Weavy.Core.Models.IExpando"/> interface. 
            </summary>
            <param name="expando">The object from which to get properties.</param>
            <param name="includeDynamic"></param>
            <param name="includeStatic"></param>
            <param name="includeNonPersisted"></param>
            <returns>A list of <see cref="T:Weavy.Core.Models.Property"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Models.IExpandoExtensions.Populate(Weavy.Core.Models.IExpando,Weavy.Core.Models.PropertyDictionary,System.Boolean,System.Boolean)">
            <summary>
            Populates the properties of an <see cref="T:Weavy.Core.Models.IExpando"/> with the specified values.
            </summary>
            <param name="expando"></param>
            <param name="dict"></param>
            <param name="populateDynamic"></param>
            <param name="populateStatic"></param>
        </member>
        <member name="M:Weavy.Core.Models.IExpandoExtensions.Populate(Weavy.Core.Models.IExpando,System.String,System.Boolean,System.Boolean)">
            <summary>
            Populates the properties of an <see cref="T:Weavy.Core.Models.IExpando"/> with values from the specified json string.
            </summary>
            <param name="expando"></param>
            <param name="json"></param>
            <param name="populateDynamic"></param>
            <param name="populateStatic"></param>
        </member>
        <member name="M:Weavy.Core.Models.IExpandoExtensions.SerializePropertiesToJson(Weavy.Core.Models.IExpando,System.Boolean,System.Boolean)">
            <summary>
            Gets a json string representing all properties in the expando.
            </summary>
            <param name="expando">The expando for which to serialize properties.</param>
            <param name="includeDynamic"><c>true</c> to include dynamic properties, otherwise <c>false</c>.</param>
            <param name="includeStatic"><c>true</c> to include static properties, otherwise <c>false</c>.</param>
            <returns>An json string representing the property data.</returns>
        </member>
        <member name="T:Weavy.Core.Models.IExtension">
            <summary>
            Base interface for all extensions.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IExtractor">
            <summary>
            Interface for objects that can extract text from files for fulltext indexing.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IExtractor.CanExtract(Weavy.Core.Models.File)">
            <summary>
            Gets a value indicating whether the specified file is supported by this extractor.
            </summary>
            <param name="file">The file.</param>
            <returns>
              <c>true</c> if the specified file is supported; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Weavy.Core.Models.IExtractor.Extract(Weavy.Core.Models.File)">
            <summary>
            Returns extracted text for the specified file.
            </summary>
            <param name="file">The file whose content should be extracted.</param>
            <returns>A string with the extracted text.</returns>
        </member>
        <member name="T:Weavy.Core.Models.IFollowable">
            <summary>
            Interface for entities that can be followed by a <see cref="T:Weavy.Core.Models.User"/>. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IFollowable.FollowedByIds">
            <summary>
            Gets or sets the ids of the users that follow the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IFollowableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IFollowableExtensions.IsFollowed(Weavy.Core.Models.IFollowable,System.Nullable{System.Int32})">
            <summary>
            Gets a value indicating whether the specified user follows the entity.
            </summary>
            <param name="followable"></param>
            <param name="userid"></param>
        </member>
        <member name="M:Weavy.Core.Models.IFollowableExtensions.FollowedBy(Weavy.Core.Models.IFollowable)">
            <summary>
            Get the users that follow the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IFunction">
            <summary>
              Base interface for command line, web tools and daemons.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IFunction.Output">
            <summary>
            Gets or sets a writer where the tool can write its output.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IFunction.Log">
            <summary>
            Gets or sets the output from the last run.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IFunction.Result">
            <summary>
            Gets or sets the result of the last run.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IFunction.Run(System.Threading.CancellationToken,System.String[])">
            <summary>
            Performs the work of the tool.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IHasAttachments">
            <summary>
            Interface for entities that can have attachments. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IHasAttachments.AttachmentIds">
            <summary>
            Gets or sets the ids of all files attached to the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IHasAttachmentsExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IHasAttachmentsExtensions.Attachments(Weavy.Core.Models.IHasAttachments)">
            <summary>
            Gets the files attached to the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IHasAvatar">
            <summary>
            Interface for entities that have avatar images. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IHasAvatar.Avatar">
            <summary>
            Gets or sets the avatar image.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IHook">
            <summary>
             Placeholder interface for hooks.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IHook`1">
            <summary>
            An interface for hooks that handles a specific event.
            </summary>
            <typeparam name="TEvent"></typeparam>
        </member>
        <member name="M:Weavy.Core.Models.IHook`1.Handle(`0)">
            <summary>
            Handles the specified event.
            </summary>
            <param name="e">Contains information about the event that occured.</param>
        </member>
        <member name="T:Weavy.Core.Models.ILikeable">
            <summary>
            Interface for entities that can be liked by a <see cref="T:Weavy.Core.Models.User"/>. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ILikeable.LikedByIds">
            <summary>
            Gets or sest the ids of the users that have liked the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ILikeableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ILikeableExtensions.IsLiked(Weavy.Core.Models.ILikeable,System.Nullable{System.Int32})">
            <summary>
            Gets a value indicating whether the specified user has liked the entity.
            </summary>
            <param name="likeable"></param>
            <param name="userid"></param>
        </member>
        <member name="M:Weavy.Core.Models.ILikeableExtensions.LikedBy(Weavy.Core.Models.ILikeable)">
            <summary>
            Gets the users that have liked the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.BoostAttribute">
            <summary>
            Provides an attribute for setting the document boost factor for fulltext search.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.BoostAttribute.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.BoostAttribute"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.BoostAttribute.Boost">
            <summary>
            Gets or sets the boost factor for fulltext search. By default, the boost factor is 1.
            Setting the boost factor to <c>0</c> excludes the entity from the fulltext index.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IndexDocument">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IndexDocument.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IndexDocument.#ctor(Lucene.Net.Documents.Document)">
            <summary>
            
            </summary>
            <param name="doc"></param>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Id">
            <summary>
            Gets the id of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Type">
            <summary>
            Gets the type of entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.SpaceId">
            <summary>
            Gets the id of the space where the entity is located.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Icon">
            <summary>
            Gets the icon.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Color">
            <summary>
            Gets the icon color.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Kind">
            <summary>
            Gets the kind.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Name">
            <summary>
            Gets the name as plain text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Title">
            <summary>
            Gets the title as plain text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.TitleHighlight">
            <summary>
            Gets or sets the title with hit highlighting.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Text">
            <summary>
            Gets the indexed text (only for development/debugging purposes).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Description">
            <summary>
            Gets the description as plain text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.DescriptionHighlight">
            <summary>
            Gets or sets the indexed text with hit highlighting.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.CreatedAt">
            <summary>
            Gets or sets the date and time the item was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.CreatedById">
            <summary>
            Gets the id of the user that created the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.ModifiedAt">
            <summary>
            Gets or sets the date and time the item was modified.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.ModifiedById">
            <summary>
            Gets the id of the user that modified the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.TrashedAt">
            <summary>
            Gets the date and time (UTC) the entity was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.TrashedById">
            <summary>
            Gets the id of the user that trashed the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Tags">
            <summary>
            Gets the list of tags for the document.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Breadcrumb">
            <summary>
            Gets or sets the breadcrumb items to display in the result view.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Score">
            <summary>
            Gets or sets the score for his document in the query.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Document">
            <summary>
            Gets the native Lucene document.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Explanation">
            <summary>
            Gets or sets the scoring explanation (for development/debugging purposes).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexDocument.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IndexDocument.GetIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.IndexDocument.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IndexDocument.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="M:Weavy.Core.Models.IndexDocument.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.InstallationCheck">
            <summary>
            Encapsulates info about an installation requirement.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.InstallationCheck.Status">
            <summary>
            Gets or sets a value indicating whether the installation check failed or not.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.InstallationCheck.FailureMessage">
            <summary>
            Gets or sets a message indicating why the check failed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.InstallationCheck.Text">
            <summary>
            Gete or sets a descriptive text about the installation check.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IPlugin">
            <summary>
              Interface for plugins and their metadata. The functionality in plugins can be enabled or disabled by toggling the IsEnabled flag.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPlugin.Id">
            <summary>
             Gets the globally unique Id of the plugin.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPlugin.Type">
            <summary>
            Gets the type of the plugin.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPlugin.FullName">
            <summary>
            Gets the fully qualified class name of the plugin.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPlugin.Icon">
            <summary>
             Gets or sets the icon name.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPlugin.Color">
            <summary>
             Gets or sets the icon color.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPlugin.Name">
            <summary>
             Gets or sets a value that is used for display in the UI.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPlugin.Description">
            <summary>
             Gets or sets a value that is used to display a description in the UI.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IPlugin.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IScraper">
            <summary>
            Interface for objects that can scrape urls for data and return an embed.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IScraper.CanScrape(System.String)">
            <summary>
            Gets a value indicating whether the specified URL is supported by this scraper.
            </summary>
            <param name="url">The URL to scrape.</param>
            <returns>
              <c>true</c> if the specified URL is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Weavy.Core.Models.IScraper.Scrape(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Returns embed data for the specified url.
            </summary>
            <param name="url">The URL to scrape.</param>
            <param name="maxwidth">The maximum width of the embedded resource.</param>
            <param name="maxheight">The maximum height of the embedded resource.</param>
            <returns>An <see cref="T:Weavy.Core.Models.Embed"/>.</returns>
        </member>
        <member name="T:Weavy.Core.Models.ISpaceEntity">
            <summary>
            Interface for entities that exists in spaces.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ISpaceEntity.SpaceId">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.Space"/> where the entity is located.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ISpaceEntityExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ISpaceEntityExtensions.Space(Weavy.Core.Models.ISpaceEntity)">
            <summary>
            Gets the <see cref="T:Weavy.Core.Models.Space"/> where the entity is located.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Weavy.Core.Models.IStarrable">
            <summary>
            Interface for entities that can be starred by a <see cref="T:Weavy.Core.Models.User"/>. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IStarrable.StarredByIds">
            <summary>
            Gets or sets the ids of the users that have starred the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IStarrableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IStarrableExtensions.IsStarred(Weavy.Core.Models.IStarrable,System.Nullable{System.Int32})">
            <summary>
            Gets a value indicating whether the specified user has starred the entity.
            </summary>
            <param name="starrable">The starrable entity.</param>
            <param name="userid">Id of user, or <c>null</c> for current user</param>
        </member>
        <member name="M:Weavy.Core.Models.IStarrableExtensions.StarredBy(Weavy.Core.Models.IStarrable)">
            <summary>
            Gets the users that have starred the entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ITaggable">
            <summary>
            Interface for entities that can have tags. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ITaggable.Tags">
            <summary>
            Gets or sets the list of tags for en entity. 
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.License">
            <summary>
              An object representing a license.
            </summary>
            <remarks>Properties in this class must be kept in sync with the Weavy.Shared.Models.License class.</remarks>
        </member>
        <member name="M:Weavy.Core.Models.License.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.License"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.Key">
            <summary>
            Gets the license key.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.IssuedTo">
            <summary>
            Gets or sets the company name of the customer.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.ExpiresAt">
            <summary>
            Gets or sets the date and time when the license expires, <c>null</c> means that it never expires.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.MaintenanceExpiresAt">
            <summary>
            Gets or sets the date and time when the service and maintencence agreement expires, <c>null</c> means that it never expires.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.GraceDays">
            <summary>
            Gets or sets the number of days that the license will continue to work after it has expired, <c>null</c> means no grace days.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.MaxSpaces">
            <summary>
            Gets or sets the maximum number of spaces allowed by the license, <c>null</c> means unlimited.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.MaxUsers">
            <summary>
            Gets or sets the maximum number of users allowed by the license, <c>null</c> means unlimited.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.MaxItems">
            <summary>
            Gets or sets the maximum number of items allowed by the license, <c>null</c> means unlimited.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.Modules">
            <summary>
            Gets or sets the list of modules (add-ons) allowed by the license.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.License.Signature">
            <summary>
            Gets or sets the cryptographic signature of the license.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.License.HasModule(System.String)">
            <summary>
            Determines whether the license has access to the specified module.
            </summary>
            <param name="module">The name of the module to check.</param>
            <returns>True if the current license has access to the specified module, otherwise False.</returns>
        </member>
        <member name="M:Weavy.Core.Models.License.ShouldSerializeModules">
            <summary>
            Tell JSON.NET that the <see cref="P:Weavy.Core.Models.License.Modules"/> property should not be serialized if empty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.License.ToString">
            <summary>
            Returns a json representation of the license.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.Login">
            <summary>
            A class representing an external login, e.g. Active Directory, Google, Windows etc. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Login.Id">
            <summary>
            Gets the login id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Login.Type">
            <summary>
            Gets or sets the authentication type.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Login.Iss">
            <summary>
            Gets or sets the issuer of the login.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Login.Sub">
            <summary>
            Gets or sets the unique user id in the external systwem.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Login.Email">
            <summary>
            Gets or sets the email claim from the external login provider.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Login.Claims">
            <summary>
            Gets or sets the claims received from the external login provider.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Login.SyncedAt">
            <summary>
             Gets the time the <see cref="T:Weavy.Core.Models.User"/> was last synchronized with the authentication provider.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Login.UserId">
            <summary>
            Gets or sets the id of the associated <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Login.ClaimsString">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Post">
            <summary>
            An individual post.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Post.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Post"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.Id">
            <summary>
            Gets the post id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.Type">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.Text">
            <summary>
            Gets or sets the post text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.Html">
            <summary>
             Gets or sets the post text as html.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.Color">
            <summary>
            Gets or sets the post color (for pinned posts).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.PinnedAt">
            <summary>
            Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.Post"/> was pinned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.PinnedById">
            <summary>
            Gets or sets the id of the User that pinned the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.CreatedAt">
            <summary>
            Gets or sets the time (UTC) the post was initially created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.CreatedById">
            <summary>
            Gets or sets the id of the User that posted the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.Post"/> was last updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.ModifiedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that last updated the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.TrashedAt">
            <summary>
            Gets the time (UTC) the <see cref="T:Weavy.Core.Models.Post"/> was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.TrashedById">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.User"/> that trashed this <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.CommentIds">
            <summary>
            Gets the ids of all comments for the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.LikedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that like the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.FollowedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that follow the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.AttachmentIds">
            <summary>
            Gets the ids of all files attached to the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.EmbedIds">
            <summary>
            Gets the ids of all <see cref="T:Weavy.Core.Models.Embed"/>s attached to the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.Poll">
            <summary>
            Gets the poll associated with this post (if any).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.Tags">
            <summary>
            Gets the list of unique tags in this comment.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.Tokens">
            <summary>
            Gets the list of tokens (urls, #hashtags, @mentions and $cashtags) in this post.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Post.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Post.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Post.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="P:Weavy.Core.Models.Post.AppId">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.App"/> where the post  is located.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.SpaceId">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.Space"/> where the post lives.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Post.MeetingIds">
            <summary>
            Gets the ids of all <see cref="T:Weavy.Core.Models.Meeting"/>s attached to the <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Post.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Models.Post.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Post.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.PostQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Weavy.Core.Models.Post"/> items.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PostQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.PostQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PostQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.PostQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.PostQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.PostQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.PostQuery.AppId">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.App"/> to search.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.PersistAttribute">
            <summary>
            Provides an attribute for specifying whether a field/property should be persisted to the database Properties column.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PersistAttribute.Persist">
            <summary>
            Indicates whether or not the field/property should be persisted to the database Properties column.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PersistAttribute.#ctor(System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref="T:Weavy.Core.Models.PersistAttribute"/> class.
            </summary>
            <param name="persist">Indicates whether the field/property should be persisted to the database Properties column.</param>
        </member>
        <member name="T:Weavy.Core.Models.Notification">
            <summary>
              An object representing a notification.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Notification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Notification"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Notification.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Notification"/> class.
            </summary>
            <param name="userId">Id of user that should receive notification.</param>
        </member>
        <member name="M:Weavy.Core.Models.Notification.#ctor(System.Int32,System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Weavy.Core.Models.Notification"/> class.
            </summary>
            <param name="userId">Id of user that should receive notification.</param>
            <param name="html"></param>
        </member>
        <member name="M:Weavy.Core.Models.Notification.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:Weavy.Core.Models.Notification"/> class.
            </summary>
            <param name="userId">Id of user that should receive notification.</param>
            <param name="logEntryId"></param>
            <param name="html"></param>
        </member>
        <member name="P:Weavy.Core.Models.Notification.Id">
            <summary>
             Gets the id of the notification
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.Type">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.CreatedAt">
            <summary>
            Gets or sets the time (UTC) the notification was initially created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.CreatedById">
            <summary>
            Gets or sets the id of the user that created the notification.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the notification was last modified.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.ModifiedById">
            <summary>
            Gets or sets the id of the user that modified the notification.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.User">
            <summary>
              Gets the <see cref="P:Weavy.Core.Models.Notification.User"/> that should receive the <see cref="T:Weavy.Core.Models.Notification"/>.
            </summary>   
        </member>
        <member name="P:Weavy.Core.Models.Notification.UserId">
            <summary>
              Gets or sets the id of the User that should receive the <see cref="T:Weavy.Core.Models.Notification"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.LogEntry">
            <summary>
            Gets the associated <see cref="P:Weavy.Core.Models.Notification.LogEntry"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.LogEntryId">
            <summary>
             Gets or sets the id of the (last) associated <see cref="P:Weavy.Core.Models.Notification.LogEntry"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.Text">
            <summary>
            Gets or sets the notification text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.Html">
            <summary>
            Gets or sets the notification text as html.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.ReadAt">
            <summary>
            Gets the time when this notification was read.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.IsRead">
            <summary>
            Gets a value indicating whether the notification has been read or not. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.NotifiedAt">
            <summary>
            Gets or sets the date and time when the notification was sent via email.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.LogEntryIds">
            <summary>
            Gets the ids of all related event log entries for the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.LogEntries">
            <summary>
            Gets the list of related event log entries.
            </summary>
            <remarks>
            This property is lazy loaded, use <see cref="P:Weavy.Core.Models.Notification.LogEntryIds"/> if you don't need the actual entries.
            </remarks>
        </member>
        <member name="P:Weavy.Core.Models.Notification.LogEntriesString">
            <summary>
            Gets or sets the underlying value for the <see cref="P:Weavy.Core.Models.Notification.LogEntryIds"/> list.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Notification.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Notification.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Notification.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="P:Weavy.Core.Models.Notification.Link">
            <summary>
            Gets or sets the entity where a click on the notification would take someone.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Notification.LinkUrl">
            <summary>
            Gets or sets the (relative) url where a click on the notification would take someone.
            </summary>        
            <remarks>This property takes precedence over the <see cref="P:Weavy.Core.Models.Notification.Link"/> property.</remarks>
        </member>
        <member name="P:Weavy.Core.Models.Notification.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Notification.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Weavy.Core.Models.NotificationQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Weavy.Core.Models.Notification"/> items.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.NotificationQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.NotificationQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.NotificationQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.NotificationQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.NotificationQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.NotificationQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.UserId">
            <summary>
            Gets or sets the Id of the notification receiver, default is the Id of the current user.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.SearchRead">
            <summary>
            Gets or sets a value indicating whether already read notifications should be included.
            <c>true</c> returns only read notifications, <c>false</c> returns only unread notifications and <c>null</c> ignores the IsRead property.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.SubjectId">
            <summary>
            Gets or sets the subject id for the associated <see cref="T:Weavy.Core.Models.LogEntry"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.SubjectType">
            <summary>
            Gets or sets the subject type for the associated <see cref="T:Weavy.Core.Models.LogEntry"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.ContextId">
            <summary>
            Gets or sets the context id for the associated <see cref="T:Weavy.Core.Models.LogEntry"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.ContextType">
            <summary>
            Gets or sets the context type for the associated <see cref="T:Weavy.Core.Models.LogEntry"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.Actions">
            <summary>
            Gets or sets the type of actions to include in the search.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.InvertActions">
            <summary>
            Gets or sets a flag indicating if the actions filter should be inverted. All notifications except those specified in <see cref="P:Weavy.Core.Models.NotificationQuery.Actions"/> are returned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.LogEntryId">
            <summary>
            Gets or sets the event id to search for.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.LinkedTo">
            <summary>
            Gets or sets an entity. All notifications linked to the specified entity is returned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.ParentType">
            <summary>
            Gets or sets the parent type. All notifications that belong to the parent or the children of the parent is returned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.ParentId">
            <summary>
            Gets or sets the parent id. All notifications that belong to the parent or the children of the parent is returned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.NotificationQuery.SearchNotified">
            <summary>
            Gets or sets a value indicating whether already sent notifications should be included.
            <c>true</c> returns only sent notifications, <c>false</c> returns only notifications that have not been sent and <c>null</c> ignores the NotifiedAt property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Permission">
            <summary>
              Indicates the permissions a user can have on an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.None">
            <summary>
            No permission.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Admin">
            <summary>
            Permission to set permissions on the entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Apps">
            <summary>
            Permission to add apps to a space.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Members">
            <summary>
            Permission to add/remove members from a space, conversation or role.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Attach">
            <summary>
            Permission to add/remove attachments from an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Comment">
            <summary>
            Permission to add comments to an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Delete">
            <summary>
            Permission to delete/trash/restore an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Edit">
            <summary>
            Permission to edit an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Follow">
            <summary>
            Permission to follow/unfollow an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Content">
            <summary>
            Permission to add content to an app.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Like">
            <summary>
            Permission to like/unlike an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.List">
            <summary>
            Permission to view child entities e.g. apps, comments, content, posts etc.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Manage">
            <summary>
            Permission to manage the system (users, roles, directories, license, etc.)
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Message">
            <summary>
            Permission to post messages to a conversation.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Post">
            <summary>
            Permission to post messages to an app.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Star">
            <summary>
            Permission to star/unstar an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.View">
            <summary>
            Permission to view an entity.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Permission.Pin">
            <summary>
            Permission to pin/unpin an entity.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Plugin">
            <summary>
              Base class for plugins.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Plugin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Plugin"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Plugin.Id">
            <summary>
             Gets the globally unique Id of the plugin.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Plugin.Type">
            <summary>
            Gets the plugin type.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Plugin.FullName">
            <summary>
            Gets or sets the full type name of the plugin.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Plugin.Icon">
            <summary>
             Gets or sets the icon name.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Plugin.Color">
            <summary>
             Gets or sets the icon color.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Plugin.Name">
            <summary>
             Gets or sets a value that is used for display in the UI.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Plugin.Description">
            <summary>
             Gets or sets a value that is used to display a description in the UI.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Plugin.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the plugin is enabled.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Plugin.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.PluginAttribute">
            <summary>
              Attribute for providing plugin metadata.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.PluginAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PluginAttribute.Icon">
            <summary>
            Gets or sets the name of a material-design icon to use in the UI.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PluginAttribute.Color">
            <summary>
            Gets or sets the color to use for the icon.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PluginAttribute.Name">
            <summary>
             Gets or sets a value that is used for display in the UI.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PluginAttribute.Description">
            <summary>
             Gets or sets a value that is used to display a description in the UI.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.PluginType">
            <summary>
            Indicates the possible plugin types.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PluginType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PluginType.App">
            <summary>
            App
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PluginType.Content">
            <summary>
            Content Type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PluginType.Daemon">
            <summary>
            Background task
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PluginType.Function">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PluginType.Hook">
            <summary>
            Event handler
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PluginType.Profile">
            <summary>
            Profile type
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.PluginType.Settings">
            <summary>
            Settings object
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ProfileBase">
            <summary>
              Base class for user profiles. Can be overridden to add custom profile data.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ProfileBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ProfileBase"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ProfileBase.Id">
            <summary>
            Gets or sets the Guid of the profile type.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ProfileBase.Avatar">
            <summary>
            Gets or sets the profile picture.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ProfileBase.Name">
            <summary>
             Gets or sets the full name (firstname lastname) of the <see cref="T:Weavy.Core.Models.ProfileBase"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ProfileBase.Tags">
            <summary>
            Gets or sets the list of tags for the profile.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ProfileBase.GetExcerpt">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ProfileBase.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation. Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Property">
            <summary>
            An object representing the name and value of a property.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Property.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Property"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Property.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Property"/> class.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Weavy.Core.Models.Property.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Property"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:Weavy.Core.Models.Property.#ctor(System.String,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Property"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
            <param name="info">The underlying <see cref="T:System.Reflection.PropertyInfo"/>.</param>
        </member>
        <member name="P:Weavy.Core.Models.Property.Name">
            <summary>
            Gets or sets the name of the field.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Property.Value">
            <summary>
            Gets or sets the value of the field.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Property.PropertyType">
            <summary>
            Gets the data type of the properyt.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Property.Info">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Property.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.Query">
            <summary>
            Defines a base class for search queries.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Query.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Query" /> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Query.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Query" /> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Query.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Query"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.Query.CreatedAfter">
            <summary>
            Gets or sets a date that limits the result to entities created on or after this date.
            </summary> 
            <remarks>The date should be specified as Coordinated Universal Time (UTC).</remarks>
        </member>
        <member name="P:Weavy.Core.Models.Query.CreatedBefore">
            <summary>
            Gets or sets the date that limits the result to entities created on or before this date.
            </summary>
            <remarks>The date should be specified as Coordinated Universal Time (UTC).</remarks>
        </member>
        <member name="P:Weavy.Core.Models.Query.CreatedById">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/>. Used to find entities created by a specific <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> to ignore the CreatedBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.CreatedOrModifiedById">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/>. Used to find entities created -or- modified by a specific <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> to ignore the CreateOrModifiedById property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.EntityTypes">
            <summary>
            Gets or sets the type of entities to find. Default is an empty list which searches all entities.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.IndexSearch">
            <summary>
            Gets or sets a value indicating whether we should use the full text index when searching with <see cref="P:Weavy.Core.Models.Query.Text"/> or if we should perform a simple LIKE query with SQL.
            Default value is <c>true</c> which searches against the fulltext index.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.IndexQuery">
            <summary>
            Gets the actual query that was sent to the fulltext search engine.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.OrderBy">
            <summary>
            Gets or sets the sort order of the result.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.SortItems">
            <summary>
            Gets the properties to sort the result by.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.SortProperties">
            <summary>
            Gets the possible properties to sort by.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.SpaceId">
            <summary>
            Gets or sets the id of a space to search, empty to search all spaces.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.Sudo">
            <summary>
            Gets or sets a value indicating whether to perfom the query as super user, default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.ModifiedById">
            <summary>
            Gets or sets the id of a <see cref="T:Weavy.Core.Models.User"/>. Used to find entities modified by a specific <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> to ignore the ModifiedBy property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.Tag">
            <summary>
            Gets or sets a tag for which to find entities.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.Text">
            <summary>
            Gets or sets the text used to search.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.TimestampAfter">
            <summary>
            Gets or sets a timestamp that limits the result to entities with a timestamp larger than this value.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Query.Trashed">
            <summary>
            Gets or sets a value indicating whether the search should return trashed entities;
            <c>true</c> returns only trashed entities, <c>false</c> returns only entities that has not been trashed and <c>null</c> ignores the IsTrashed property.
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Query.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.Query`1">
            <summary>
            Abstract base class for strongly typed search queries.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Query`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Query`1.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Query`1.#ctor(Weavy.Core.Models.Query)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Models.QueryOptions">
            <summary>
            Query options for result paging etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.QueryOptions.Top">
            <summary>
             Gets or sets the number of items to return, <c>null</c> returns all items.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.QueryOptions.Skip">
            <summary>
             Gets or sets the number of items to skip before returning.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.QueryOptions.Count">
            <summary>
            Gets or sets a value indicating whether the response should include the total number of items in the result.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.QueryOptions.CountOnly">
            <summary>
            Gets or sets a value indicating whether the search should only return the number of matching items.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.QueryOptions.OrderBy">
            <summary>
             Gets or sets the sort properties and sort direction (ascending or descending).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.QueryOptions.Layout">
            <summary>
            Gets or sets the preferred layout when rendering the result.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.QueryOptions.ShouldCount">
            <summary>
            Gets a value indicating whether the search should count the total number of hits.
            </summary>        
        </member>
        <member name="M:Weavy.Core.Models.QueryOptions.Clone">
            <summary>
            Create a deep copy of the current object.
            </summary>
            <returns>A deep copy of the current object.</returns>
        </member>
        <member name="T:Weavy.Core.Models.SortDirection">
            <summary>
             Indicates the direction to sort by.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortDirection.Ascending">
            <summary>
            Sorts the data in ascending order.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SortDirection.Descending">
            <summary>
            Sorts the data in descending order.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.SortItem">
            <summary>
            Represents a sort order in a search. One or more SortItem objects 
            can be added to a <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.SortItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.SortItem"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.SortItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.SortItem"/> class 
            with the specified column name.
            </summary>
            <param name="column">The column to sort by.</param>
        </member>
        <member name="M:Weavy.Core.Models.SortItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.SortItem"/> class 
            with the specified column name and <see cref="T:Weavy.Core.Models.SortDirection"/>.
            </summary>
            <param name="column">The column to sort by.</param>
            <param name="direction">The direction to sort by.</param>
        </member>
        <member name="P:Weavy.Core.Models.SortItem.Column">
            <summary>
            Gets or sets the column to sort by.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.SortItem.Direction">
            <summary>
            Gets or sets the direction to sort by (ascending or descending).
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.SortItem.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Weavy.Core.Models.SortItem"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Weavy.Core.Models.SortItem"/>.</returns>
        </member>
        <member name="T:Weavy.Core.Models.Conversation">
            <summary>
              An object representing a conversation between 2 or more people.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Conversation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Conversation"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.Id">
            <summary>
             Gets the id of the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.Type">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.SpaceId">
            <summary>
            Always returns <see cref="F:Weavy.Core.Services.SpaceService.ConversationsId"/>
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.Name">
            <summary>
             Gets or sets the name of the room.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.IsRoom">
            <summary>
            Gets a value indicating whether this is a chat room or a conversation between just 2 people.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.Avatar">
            <summary>
            Gets the avatar image.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.ArchivedAt">
            <summary>
            Gets the date and time (UTC) when the current user archived the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.DeliveredAt">
            <summary>
            Gets the date and time (UTC) when the current user last had a message delivered in the the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.NotifiedAt">
            <summary>
            Gets the date and time (UTC) when the current user was notified (via email or push) about unread messages.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.ReadAt">
            <summary>
            Gets the date and time (UTC) when the current user viewed the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.IsRead">
            <summary>
            Gets a value indicating if the current user has read all messages in the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.PinnedAt">
            <summary>
            Gets or sets the time (UTC) when the current user pinned the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.IsPinned">
            <summary>
            Gets a value indicating if the current user has pinned the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.CreatedAt">
            <summary>
             Gets or sets the time the conversation was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.CreatedById">
            <summary>
            Gets or sets the id of the user that created the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the conversation was last updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.ModifiedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that last updated the <see cref="T:Weavy.Core.Models.Conversation"/> .
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.TrashedAt">
            <summary>
            Gets the time (UTC) the <see cref="T:Weavy.Core.Models.Conversation"/> was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.TrashedById">
            <summary>
            Gets the id of the user that trashed the <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.LastMessage">
            <summary>
              Gets the last posted <see cref="T:Weavy.Core.Models.Message"/> in the conversation.
            </summary>           
        </member>
        <member name="P:Weavy.Core.Models.Conversation.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.FollowedByIds">
            <summary>
            Gets the ids of the users that follow the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.MemberId">
            <summary>
            Gets the id of the current user.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.MemberIds">
            <summary>
            Gets the ids of the users that are members of the conversation.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.MembersInternal">
            <summary>
            Gets the list of users that are members of the conversation (including trashed and suspended users).
            </summary>
            <remarks>This property is lazy loaded, use <see cref="P:Weavy.Core.Models.Conversation.IsMember"/> and <see cref="P:Weavy.Core.Models.Conversation.MemberIds"/> if you don't need the actual users.</remarks>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.Members">
            <summary>
            Gets the list of users that are members of the conversation.
            </summary>
            <remarks>This property is lazy loaded, use <see cref="P:Weavy.Core.Models.Conversation.IsMember"/> and <see cref="P:Weavy.Core.Models.Conversation.MemberIds"/> if you don't need the actual users.</remarks>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.IsMember">
            <summary>
            Gets a value indicating whether the current user is a member of the conversation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Conversation.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Conversation.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Conversation.GetExcerpt(System.Boolean)">
            <summary>
            Gets a snippet of the most recent message in the conversation.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="P:Weavy.Core.Models.Conversation.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Conversation.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Conversation.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Weavy.Core.Models.Space">
            <summary>
              An object representing a workspace.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.Space._color">
            <summary>
            Backing field for the <see cref="P:Weavy.Core.Models.Space.Color"/> property.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Space.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Space"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.Id">
            <summary>
             Gets the id of the space.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.Type">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.Avatar">
            <summary>
            Gets or sets the avatar image.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.Name">
            <summary>
             Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.Teamname">
            <summary>
             Gets or sets the team name (used for @mentions).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.Color">
            <summary>
            Gets or sets the theme color.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.Description">
            <summary>
             Gets or sets the description text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.Key">
            <summary>
             Gets or sets a unique identifier for the space in the host system.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.CreatedAt">
            <summary>
             Gets or sets the time (UTC) the item was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.CreatedById">
            <summary>
            Gets or sets the id of the User that created the <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the item was last updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.ModifiedById">
            <summary>
            Gets or sets the Id of the <see cref="T:Weavy.Core.Models.User"/> that last updated the <see cref="T:Weavy.Core.Models.Space"/> item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.ArchivedAt">
            <summary>
            Gets the time (UTC) the <see cref="T:Weavy.Core.Models.Space"/> was archived.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.ArchivedById">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.User"/> that archived the <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.TrashedAt">
            <summary>
            Gets the time (UTC) the <see cref="T:Weavy.Core.Models.Space"/> item was trashed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.TrashedById">
            <summary>
            Gets the id of the User that trashed the <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.Tags">
            <summary>
            Gets or sets the list of tags for the space.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.StarredByIds">
            <summary>
            Gets the ids of the users that have starred the item.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.FollowedByIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that follow the space.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.MemberIds">
            <summary>
            Gets the ids of the <see cref="T:Weavy.Core.Models.User"/>s that are members of the space.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Space.IsMember">
            <summary>
            Gets a value indicating whether the current user is a member of the space.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Space.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Space.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Space.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="P:Weavy.Core.Models.Space.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Space.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Weavy.Core.Models.Space.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation. Subclasses can override this method to perform their own implementation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.ConversationQuery">
            <summary>
            Defines a query used to find matching conversations.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ConversationQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ConversationQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.ConversationQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ConversationQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.ConversationQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.ConversationQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.UserId">
            <summary>
            Gets or sets the id of the conversation member, default is the id of the current user, <c>null</c> returns all conversations.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.SearchEmpty">
            <summary>
            Gets or sets a value indicating whether empty conversations should be included.
            <c>true</c> returns only empty conversations, <c>false</c> returns only conversations with messages and <c>null</c> returns all conversations.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.SearchRead">
            <summary>
            Gets or sets a value indicating whether already read conversations should be included.
            <c>true</c> returns only read conversations, <c>false</c> returns only unread conversations and <c>null</c> returns all conversations.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.SearchArchived">
            <summary>
            Gets or sets a value indicating wheather to return archived conversations.
            <c>true</c> returns only archived conversations, <c>false</c> returns only non-archived conversations and <c>null</c> ignores the archived field.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.SearchNotified">
            <summary>
            Gets or sets a value indicating whether to find conversations where the user has been notified via email about new messages.
            <c>true</c> returns only conversations where the user has been notified via email, <c>false</c> returns only conversations where the user has not been notified via email, and <c>null</c> returns all conversations.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.SearchRooms">
            <summary>
            Gets or sets a value indicating whether to find chat rooms.
            <c>true</c> returns only rooms, <c>false</c> returns only one-on-one conversations and <c>null</c> returns all conversations.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.FollowerId">
            <summary>
            Gets or sets a user id. Can be used to find the conversations that a user is following.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.StarredById">
            <summary>
            Gets or sets a user id. Can be used to find all conversations the user has starred.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.LastMessageAfter">
            <summary>
            Gets or sets a date that limits the result to conversations with new messages created on or after this date.
            </summary> 
            <remarks>The date should be specified as Coordinated Universal Time (UTC).</remarks>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.LastMessageBefore">
            <summary>
            Gets or sets a date that limits the result to conversations with new messages created on or before this date.
            </summary>
            <remarks>The date should be specified as Coordinated Universal Time (UTC).</remarks>
        </member>
        <member name="P:Weavy.Core.Models.ConversationQuery.Followed">
            <summary>
            Gets or sets a value indicating if only followed conversations should be returned.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.SpaceQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Weavy.Core.Models.Space"/> items.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.SpaceQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.SpaceQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.SpaceQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.SpaceQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.SpaceQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.SpaceQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.SpaceQuery.Archived">
            <summary>
            Gets or sets a value indicating whether to return archived spaces or not.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.SpaceQuery.MemberId">
            <summary>
            Gets or sets a user id. Can be used to find spaces where a user is member. 
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.SystemStatus">
            <summary>
            Defines the current system status.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SystemStatus.Unknown">
            <summary>
            Status is unknown or has not been set.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SystemStatus.Ready">
            <summary>
            Indicates that the system is ready for the setup wizard.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SystemStatus.Setup">
            <summary>
            Indicates that the system is currently running the setup wizard.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SystemStatus.Ok">
            <summary>
            Status is A-OK ;)
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SystemStatus.ConfigurationInvalid">
            <summary>
            Indicates that invalid configuration settings were detected.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SystemStatus.DatabaseVersionInvalid">
            <summary>
            Indicates that the database version does not match the expected system version (resolved by upgrading the database or downgrading the application).
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SystemStatus.LicenseError">
            <summary>
            Indicates that there is something wrong with the license, i.e. invalid key and/or signature (resolved by registering a valid license).
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SystemStatus.LicenseInvalid">
            <summary>
            Indicates that the license is invalid, i.e. expired and/or not allowed (resolved by updating the license).
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.SystemStatus.Error">
            <summary>
            Indicates an error that prevents the system from running, e.g. exception during startup, could not connect to database etc.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Mention">
            <summary>
            A class representing a @mention. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Mention.Id">
            <summary>
            Gets the id of the mention.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Mention.AttachedTo">
            <summary>
            Gets or sets a reference to the entity where the mentioned is attached, i.e. Space, User etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Mention.Mentioned">
            <summary>
            Gets a reference to the <see cref="T:Weavy.Core.Models.User"/> or <see cref="T:Weavy.Core.Models.Space"/> that was mentioned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Mention.MentionedAt">
            <summary>
            Gets the time the user/space was mentioned.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Mention.MentionedById">
            <summary>
            Gets the id of the user that mentioned the user/group.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Tag">
            <summary>
            A class representing a tag. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Tag.Name">
            <summary>
            Gets the name of the tag.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Tag.Tagged">
            <summary>
            Gets the tagged entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Tag.TaggedAt">
            <summary>
            Gets the time the entity was tagged.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Tag.TaggedById">
            <summary>
            Gets the id of the user that tagged the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Tag.Count">
            <summary>
            Gets the tag count.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Tag.Weight">
            <summary>
            Gets the relative weight of this tag.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Tag.Size">
            <summary>
            Gets the font size of the tag.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Tag.Opacity">
            <summary>
            Gets the opacity of the tag.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Tag.ToString">
            <summary>
            Returns the name of the tag.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Models.TagFilterMode">
            <summary>
             The filter mode used when searching for content by tags.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.TagFilterMode.Any">
            <summary>
            Indicates a filter that matches on any of the specified tags.
            </summary>
        </member>
        <member name="F:Weavy.Core.Models.TagFilterMode.All">
            <summary>
            Indicates a filter that matches on all of the specified tags.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.LicenseRequest">
            <summary>
            Model for requesting a new license from the license server.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.LicenseRequest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LicenseRequest.Name">
            <summary>
            Gets or sets the name for the account.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LicenseRequest.Email">
            <summary>
            Gets or sets the email of the account
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LicenseRequest.Organization">
            <summary>
            Gets or sets the company name.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LicenseRequest.Phone">
            <summary>
            Gets or sets the phone number.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.LicenseRequest.Newsletter">
            <summary>
            Gets or sets a value indicating if the user has signed up for the newsletter.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.Member">
            <summary>
            An object representing a space member.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.Member.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.Member"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.Member.Access">
            <summary>
              Gets the access rights for the user.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.User">
            <summary>
            An object representing a user.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.User.#ctor(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.User"/> class.
            </summary>
            <param name="createdById">Id of the user that created the user</param>
            <param name="id"></param>
            <remarks>We need this constructor to avoid NullReferenceExceptions when we initialize system users in UserService.</remarks>
        </member>
        <member name="M:Weavy.Core.Models.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.User"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Id">
            <summary>
             Gets the user id.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Type">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Guid">
            <summary>
            Gets a globally unique identifier for the user.
            </summary>        
        </member>
        <member name="P:Weavy.Core.Models.User.Username">
            <summary>
             Gets or sets the username (used for login, @mentions etc).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Email">
            <summary>
             Gets or sets the email address.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Comment">
            <summary>
             Gets or sets application-specific information for the <see cref="T:Weavy.Core.Models.User"/>. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.CreatedAt">
            <summary>
            Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.User"/> item was created.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.CreatedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that updated the <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.ModifiedAt">
            <summary>
            Gets or sets the time (UTC) the <see cref="T:Weavy.Core.Models.User"/> was updated.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.ModifiedById">
            <summary>
            Gets or sets the id of the <see cref="T:Weavy.Core.Models.User"/> that updated this <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.TrashedAt">
            <summary>
            Gets the time (UTC) the <see cref="T:Weavy.Core.Models.User"/> was deleted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.TrashedById">
            <summary>
            Gets the id of the <see cref="T:Weavy.Core.Models.User"/> that trashed this <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.FollowedByIds">
            <summary>
            Gets the ids of the users that follow this user.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.DirectoryId">
            <summary>
            Gets or sets the user directory.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Profile">
            <summary>
            Gets profile data for the user.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Roles">
            <summary>
              Gets the list of roles the <see cref="T:Weavy.Core.Models.User"/> is member of.
            </summary>
            <remarks>
            This property is lazy loaded and read only.
            </remarks>
        </member>
        <member name="P:Weavy.Core.Models.User.IsAdmin">
            <summary>
             Gets a value indicating whether the <see cref="T:Weavy.Core.Models.User"/> is a system administrator.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.IsClient">
            <summary>
            Gets a value indicating if the user is configured as a client.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.LastSeenAt">
            <summary>
             Gets the time the <see cref="T:Weavy.Core.Models.User"/> was last seen.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Token">
            <summary>
            Gets or sets a token that can be used to request a new password.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.IsSuspended">
            <summary>
            Gets or sets a value indicating whether the user account is suspended.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.ClientId">
            <summary>
            Gets or sets the client id to associate with this user.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Avatar">
            <summary>
            Gets or sets the avatar image.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Logins">
            <summary>
              Gets the list of logins for the <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.User.IsInRole(System.String)">
            <summary>
            Determines whether the user belongs to the specified role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <returns><c>true</c> if the current user is a member of the specified role, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Weavy.Core.Models.User.Presence">
            <summary>
              Gets a value indicating the current user's presence.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.User.Identity">
            <summary>
            Gets the identity of the current user.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.User.GetIcon">
            <summary>
            Gets an icon suitable for display in the user interface.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.User.GetTitle">
            <summary>
            Gets a title suitable for display in lists and search results.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.User.GetExcerpt(System.Boolean)">
            <summary>
            Gets an excerpt or summary suitable for display in lists and search results.
            </summary>
            <param name="html"><c>true</c> to return html, <c>false</c> to return plain text.</param>
        </member>
        <member name="P:Weavy.Core.Models.User.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.User.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Weavy.Core.Models.User.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs custom validation. Subclasses can override this method to supply their own implementation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.UserQuery">
            <summary>
            Defines a query used to find matching <see cref="T:Weavy.Core.Models.User"/> items.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UserQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.UserQuery"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UserQuery.#ctor(Weavy.Core.Models.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.UserQuery"/> class with the specified <see cref="T:Weavy.Core.Models.QueryOptions"/>.
            </summary>
            <param name="opts"></param>
        </member>
        <member name="M:Weavy.Core.Models.UserQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.UserQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Models.UserQuery.Active">
            <summary>
            Gets or sets a value indicating whether the search should return active users;
            <c>true</c> returns only active users, <c>false</c> returns only users that are away and <c>null</c> ignores the Active property.
            Default is <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.UserQuery.BuiltIn">
            <summary>
            Gets or sets a value indicating whether the result should return built-in users;
            <c>true</c> returns only built-in users, <c>false</c> returns only users that are not built-in, and <c>null</c> returns all users. 
            Default is <c>false</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.UserQuery.DirectoryId">
            <summary>
            Gets or sets the directory to search, <c>null</c> finds users in all directories.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.UserQuery.Suspended">
            <summary>
            Gets or sets a value indicating whether to find suspended users or not, <c>null</c> returns all users.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.UserQuery.Clients">
            <summary>
            Gets or sets a value indicating whether to find users that are clients (i.e. has values for ClientId and ClientSecret) or not, <c>null</c> returns all users. 
            Default is <c>false</c>
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.UserSettings">
            <summary>
            Model used for user settings.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.UserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Models.UserSettings"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.Language">
            <summary>
            Gets or sets the ui culture used in the format languagecode2-country/regioncode2.
            </summary>                                         
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.Region">
            <summary>
            Gets or sets a two-letter ISO 3166 region code.
            </summary>                                         
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.TimeZone">
            <summary>
            Gets or sets the user time zone.
            </summary>                                         
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.CommentNotifications">
            <summary>
            Gets or sets a value indicating whether the user wants to be notified about comments.
            </summary>                                         
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.LikeNotifications">
            <summary>
            Gets or sets a value indicating whether the user wants to be notified about likes.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.VoteNotifications">
            <summary>
            Gets or sets a value indicating whether the user wants to be notified about votes.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.DesktopNotifications">
            <summary>
            Gets or sets a value indicating whether the user wants to get desktop push notifications.
            </summary>                                         
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.MobileNotifications">
            <summary>
            Gets or sets a value indicating whether the user wants to get mobile push notifications.
            </summary>                                         
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.EmailNotifications">
            <summary>
            Gets or sets a value indicating whether the user wants to get email notifications.
            </summary>                                         
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.DailyDigest">
            <summary>
            Gets or sets a value indicating whether the user wants to receive a daily digest.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.UserSettings.EnterToSend">
            <summary>
            Gets or sets a value indicating whether Enter should send a message or insert a new line.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.PushNotification">
            <summary>
            An object representing a push notification (to mobile devices).
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PushNotification.Badge">
            <summary>
            Gets or sets a number to apply to the app badge.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PushNotification.Destination">
            <summary>
            Gets or sets a value indicating which app the push notification should be sent to.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PushNotification.Guid">
            <summary>
            Gets or sets the Guid of the notification receiver.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PushNotification.IsSilent">
            <summary>
            Gets or sets a value indicating whether the push notification should be silent, i.e. only update the badge.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PushNotification.Message">
            <summary>
            Gets or sets the message text to send.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.PushNotification.Url">
            <summary>
            Gets or sets the url where clicking the notification should take you.
            </summary>
        </member>
        <member name="T:Weavy.Core.Models.IndexSearchResult">
            <summary>
            Result object returned by fulltext search engine.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IndexSearchResult.#ctor">
            <summary>
              Initializes an empty IndexResult class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Models.IndexSearchResult.#ctor(Weavy.Core.Lucene.IndexQuery,System.Collections.Generic.IEnumerable{Weavy.Core.Models.IndexDocument},System.Nullable{System.Int64})">
            <summary>
              Initializes a new instance of the IndexResult class.
            </summary>
            <param name="query"></param>
            <param name="result"></param>
            <param name="count"></param>
        </member>
        <member name="P:Weavy.Core.Models.IndexSearchResult.Query">
            <summary>
            Gets the query used to perform the search.
            </summary>
        </member>
        <member name="P:Weavy.Core.Models.IndexSearchResult.Facets">
            <summary>
            Gets a lists of facets.
            </summary>
        </member>
        <member name="T:Weavy.Core.Bootstrapper">
            <summary>
            A class that performs various start up tasks such as configuring the IoC container, starting daemons etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.Container">
            <summary>
            Gets a reference to the IoC container.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.DaemonTimer">
            <summary>
            Gets or sets the timer used to run daemons.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.Extensions">
            <summary>
            Gets or sets the list of extension types located during startup.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.Exception">
            <summary>
            Gets the startup exception (if startup failed).
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.IsInUnitTest">
            <summary>
            Returns a value indicating whether we are running inside a unit test.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.ReleaseDate">
            <summary>
            Gets the release date of the current build.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.SemVer">
            <summary>
            Gets the version number as a string in the semver format.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.Status">
            <summary>
            Gets or sets the system status.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.TokenSource">
            <summary>
            Cancellation token source for background tasks.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.Token">
            <summary>
            Gets the cancellation token used for background tasks.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.Version">
            <summary>
            Gets the version number as a string in the MAJOR.MINOR.PATCH format.
            </summary>
        </member>
        <member name="P:Weavy.Core.Bootstrapper.WeavyAssembly">
            <summary>
            Gets the "Weavy" assembly.
            </summary>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.Startup">
            <summary>
            Initializes resources. Typically called on application start.
            </summary>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.Shutdown">
            <summary>
            Performs tasks associated with freeing and releasing resources. Typically called on application shutdown.
            </summary>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.Cleanup">
            <summary>
            Disposose and release some static resources (called during shutdown or when startup fails).
            </summary>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.ConfigureLogging">
            <summary>
            Configures logging.
            </summary>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.RunDaemons(System.Object)">
            <summary>
            Run daemons when the interval elapses.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.GetExtensionByGuid(System.Guid)">
            <summary>
            Gets the extension <see cref="T:System.Type"/> with the specified <see cref="T:System.Guid"/>. 
            </summary>
            <param name="guid">The Guid of the extension type to get.</param>
            <returns>The <see cref="T:System.Type"/> with the specified Guid or <c>null</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.GetExtensionsAssignableFrom(System.Type)">
            <summary>
            Gets all extension types that are assignable from the specified type.
            </summary>
            <param name="type">The type to check for assignability.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.RegisterExtensions(Autofac.ContainerBuilder)">
            <summary>
            Scan assemblies for extensions and register them in the container.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.RegisterExtension``1(Autofac.ContainerBuilder,``0)">
            <summary>
            Register the specified extension <see cref="T:System.Type"/> with the container.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <param name="ext"></param>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.RegisterProviders(Autofac.ContainerBuilder)">
            <summary>
            Register the configured providers.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.IsExtension(System.Type)">
            <summary>
            Checks if the specified type is an extension.
            </summary>
            <param name="t">The <see cref="T:System.Type"/> to check.</param>
            <returns><c>true</c> if the type is an extension, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.GetExtensionAssemblies">
            <summary>
            Returns a list of assemblies that might have extensions (daemons, hooks, items, etc.).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.ShouldScan(System.Reflection.AssemblyName)">
            <summary>
            Returns true if the assembly should be scanned for extensions.
            </summary>
            <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName"/> to check.</param>
            <returns><c>true</c> to scan the assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Bootstrapper.UpsertPlugins">
            <summary>
            Insert/Update plugins and their metadata in the repository.
            </summary>
        </member>
        <member name="T:Weavy.Core.Collections.IPagedList">
            <summary>
            Interface for a paged collection. 
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.IPagedList.Top">
            <summary>
            Gets the maximum number of items that was specified in the query.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.IPagedList.Skip">
            <summary>
            Gets the number of skipped items.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.IPagedList.PageCount">
            <summary>
              Gets the page count.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.IPagedList.PageNumber">
            <summary>
              Gets the page number.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.IPagedList.HasPreviousPage">
            <summary>
              Gets a value indicating whether the list has a previous page.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.IPagedList.HasNextPage">
            <summary>
              Gets a value indicating whether the list has a next page.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.IPagedList.TotalCount">
            <summary>
             Gets the total number of items in the result.
            </summary>
        </member>
        <member name="T:Weavy.Core.Collections.PagedList`1">
            <summary>
              Represents a collection of objects that can be paged.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Weavy.Core.Collections.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
              Initializes a new instance of the PagedList class.
            </summary>
            <param name="source">The collection of items to initialize the paged list with.</param>
            <param name="top">The number of items that was requested.</param>
            <param name="skip">The number of items that was skipped.</param>
            <param name="total">The total number of items in the result set.</param>        
        </member>
        <member name="P:Weavy.Core.Collections.PagedList`1.Skip">
            <summary>
            Gets the number of items that was skipped.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.PagedList`1.Top">
            <summary>
            Gets the maximum number of items that was requested.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.PagedList`1.PageCount">
            <summary>
              Gets the total number of pages in the result set.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.PagedList`1.PageNumber">
            <summary>
            Gets the current page number of the result.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.PagedList`1.HasPreviousPage">
            <summary>
              Gets a value indicating whether the list has a previous page.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.PagedList`1.HasNextPage">
            <summary>
              Gets a value indicating whether the list has a next page.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.PagedList`1.TotalCount">
            <summary>
            Gets the total number of items in the result (only available when QueryOptions.Count or QueryOptions.CountOnly is <c>true</c>)
            </summary>
        </member>
        <member name="T:Weavy.Core.Collections.SmartEnumerable`1">
            <summary>
            Type chaining an IEnumerable&lt;T&gt; to allow the iterating code
            to detect the first and last entries simply.
            </summary>
            <typeparam name="T">Type to iterate over</typeparam>
        </member>
        <member name="F:Weavy.Core.Collections.SmartEnumerable`1.enumerable">
            <summary>
            Enumerable we proxy to
            </summary>
        </member>
        <member name="M:Weavy.Core.Collections.SmartEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="enumerable">Collection to enumerate. Must not be null.</param>
        </member>
        <member name="M:Weavy.Core.Collections.SmartEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumeration of Entry objects, each of which knows
            whether it is the first/last of the enumeration, as well as the
            current value.
            </summary>
        </member>
        <member name="M:Weavy.Core.Collections.SmartEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Non-generic form of GetEnumerator.
            </summary>
        </member>
        <member name="T:Weavy.Core.Collections.SmartEnumerable`1.Entry">
            <summary>
            Represents each entry returned within a collection,
            containing the value and whether it is the first and/or
            the last entry in the collection's. enumeration
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.SmartEnumerable`1.Entry.Value">
            <summary>
            The value of the entry.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.SmartEnumerable`1.Entry.IsFirst">
            <summary>
            Whether or not this entry is first in the collection's enumeration.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.SmartEnumerable`1.Entry.IsLast">
            <summary>
            Whether or not this entry is last in the collection's enumeration.
            </summary>
        </member>
        <member name="P:Weavy.Core.Collections.SmartEnumerable`1.Entry.Index">
            <summary>
            The 0-based index of this entry (i.e. how many entries have been returned before this one)
            </summary>
        </member>
        <member name="T:Weavy.Core.Cron.CrontabField">
            <summary>
            Represents a single crontab field.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.Parse(Weavy.Core.Cron.CrontabFieldKind,System.String)">
            <summary>
            Parses a crontab field expression given its kind.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.Minutes(System.String)">
            <summary>
            Parses a crontab field expression representing minutes.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.Hours(System.String)">
            <summary>
            Parses a crontab field expression representing hours.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.Days(System.String)">
            <summary>
            Parses a crontab field expression representing days in any given month.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.Months(System.String)">
            <summary>
            Parses a crontab field expression representing months.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.DaysOfWeek(System.String)">
            <summary>
            Parses a crontab field expression representing days of a week.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.GetFirst">
            <summary>
            Gets the first value of the field or -1.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.Next(System.Int32)">
            <summary>
            Gets the next value of the field that occurs after the given 
            start value or -1 if there is no next value available.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.Contains(System.Int32)">
            <summary>
            Determines if the given value occurs in the field.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabField.Accumulate(System.Int32,System.Int32,System.Int32,Weavy.Core.Cron.ExceptionHandler)">
            <summary>
            Accumulates the given range (start to end) and interval of values
            into the current set of the field.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="interval"></param>
            <param name="onError"></param>
            <remarks>
            To set the entire range of values representable by the field,
            set <paramref name="start" /> and <paramref name="end" /> to -1 and
            <paramref name="interval" /> to 1.
            </remarks>
        </member>
        <member name="T:Weavy.Core.Cron.CrontabSchedule">
             <summary>
             Represents a schedule initialized from the crontab expression.
             </summary>
             <example>
             Crontab expression format:
            
             * * * * *
             - - - - -
             | | | | |
             | | | | +----- day of week (0 - 6) (Sunday=0)
             | | | +------- month (1 - 12)
             | | +--------- day of month (1 - 31)
             | +----------- hour (0 - 23)
             +------------- min (0 - 59)
            
             Star (*) in the value field above means all legal values as in 
             braces for that column. The value column can have a * or a list 
             of elements separated by commas. An element is either a number in 
             the ranges shown above or two numbers in the range separated by a 
             hyphen (meaning an inclusive range). 
            
             Source: http://www.adminschoice.com/docs/crontab.htm
             </example>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabSchedule.GetNextOccurrences(System.DateTime,System.DateTime)">
            <summary>
            Enumerates all the occurrences of this schedule starting with a
            base time and up to an end time limit. This method uses deferred
            execution such that the occurrences are only calculated as they 
            are enumerated.
            </summary>
            <param name="baseTime"></param>
            <param name="endTime"></param>
            <remarks>
            This method does not return the value of <paramref name="baseTime"/>
            itself if it falls on the schedule. For example, if <paramref name="baseTime" />
            is midnight and the schedule was created from the expression <c>* * * * *</c> 
            (meaning every minute) then the next occurrence of the schedule 
            will be at one minute past midnight and not midnight itself.
            The method returns the <em>next</em> occurrence <em>after</em> 
            <paramref name="baseTime"/>. Also, <param paramref="endTime" /> is
            exclusive.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabSchedule.GetNextOccurrence(System.DateTime)">
            <summary>
            Gets the next occurrence of this schedule starting with a base time.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabSchedule.GetNextOccurrence(System.DateTime,System.DateTime)">
            <summary>
            Gets the next occurrence of this schedule starting with a base 
            time and up to an end time limit.
            </summary>
            <param name="baseTime"></param>
            <param name="endTime"></param>
            <remarks>
            This method does not return the value of <paramref name="baseTime"/>
            itself if it falls on the schedule. For example, if <paramref name="baseTime" />
            is midnight and the schedule was created from the expression <c>* * * * *</c> 
            (meaning every minute) then the next occurrence of the schedule 
            will be at one minute past midnight and not midnight itself.
            The method returns the <em>next</em> occurrence <em>after</em> 
            <paramref name="baseTime"/>. Also, <paramref name="endTime" /> is
            exclusive.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Cron.CrontabSchedule.ToString">
            <summary>
            Returns a string in crontab expression (expanded) that represents this schedule.
            </summary>
        </member>
        <member name="T:Weavy.Core.Cron.ExceptionHandler">
            <summary>
            Represents the method that will handle an <see cref="T:System.Exception"/> object.
            </summary>
        </member>
        <member name="T:Weavy.Core.Cron.ExceptionProvider">
            <summary>
            Represents the method that will generate an <see cref="T:System.Exception"/> object.
            </summary>
        </member>
        <member name="T:Weavy.Core.Cron.ErrorHandling">
            <summary>
            Defines error handling strategies.
            </summary>
        </member>
        <member name="F:Weavy.Core.Cron.ErrorHandling.Throw">
            <summary>
            A stock <see cref="T:Weavy.Core.Cron.ExceptionHandler"/> that throws.
            </summary>
        </member>
        <member name="T:Weavy.Core.Cron.ExpressionDescriptor">
            <summary>
            Converts cron expressions into human readable strings.
            </summary>
        </member>
        <member name="T:Weavy.Core.Cron.ValueOrError`1">
            <summary>
            A generic type that either represents a value or an error condition.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.#ctor(`0)">
            <summary>
            Initializes the object with a defined value.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.#ctor(System.Exception)">
            <summary>
            Initializes the object with an error.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.#ctor(Weavy.Core.Cron.ExceptionProvider)">
            <summary>
            Initializes the object with a handler that will provide
            the error result when needed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Cron.ValueOrError`1.HasValue">
            <summary>
            Determines if object holds a defined value or not.
            </summary>
        </member>
        <member name="P:Weavy.Core.Cron.ValueOrError`1.Value">
            <summary>
            Gets the value otherwise throws an error if undefined.
            </summary>
        </member>
        <member name="P:Weavy.Core.Cron.ValueOrError`1.IsError">
            <summary>
            Determines if object identifies an error condition or not.
            </summary>
        </member>
        <member name="P:Weavy.Core.Cron.ValueOrError`1.Error">
            <summary>
            Gets the <see cref="T:System.Exception"/> object if this object
            represents an error condition otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Cron.ValueOrError`1.ErrorProvider">
            <summary>
            Gets the <see cref="T:Weavy.Core.Cron.ExceptionProvider"/> object if this 
            object represents an error condition otherwise it returns <c>null</c>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.TryGetValue(`0)">
            <summary>
            Attempts to get the defined value or another in case
            of an error.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.op_Implicit(`0)~Weavy.Core.Cron.ValueOrError{`0}">
            <summary>
            Implicitly converts a <typeparamref name="T"/> value to
            an object of this type.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.op_Implicit(System.Exception)~Weavy.Core.Cron.ValueOrError{`0}">
            <summary>
            Implicitly converts an <see cref="T:System.Exception"/> object to
            an object of this type that represents the error condition.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.op_Implicit(Weavy.Core.Cron.ExceptionProvider)~Weavy.Core.Cron.ValueOrError{`0}">
            <summary>
            Implicitly converts an <see cref="T:Weavy.Core.Cron.ExceptionProvider"/> object to
            an object of this type that represents the error condition.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.op_Explicit(Weavy.Core.Cron.ValueOrError{`0})~`0">
            <summary>
            Explicits converts this object to a <typeparamref name="T"/> value.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.op_Explicit(Weavy.Core.Cron.ValueOrError{`0})~System.Exception">
            <summary>
            Explicits converts this object to an <see cref="T:System.Exception"/> object
            if it represents an error condition. The conversion yields <c>null</c>
            if this object does not represent an error condition.
            </summary>
        </member>
        <member name="M:Weavy.Core.Cron.ValueOrError`1.op_Explicit(Weavy.Core.Cron.ValueOrError{`0})~Weavy.Core.Cron.ExceptionProvider">
            <summary>
            Explicits converts this object to an <see cref="T:Weavy.Core.Cron.ExceptionProvider"/> object
            if it represents an error condition. The conversion yields <c>null</c>
            if this object does not represent an error condition.
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.DirectoryJsonConverter">
            <summary>
            Converter used whern serializing the <see cref="P:Weavy.Core.Models.User.DirectoryId"/> property.
            </summary>
        </member>
        <member name="P:Weavy.Core.Json.DirectoryJsonConverter.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.DirectoryJsonConverter.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.DirectoryJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.DirectoryJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Weavy.Core.Json.ExpandoJsonConverter`1">
            <summary>
            Deserializes content and apps to their correct implementations.
            </summary>
        </member>
        <member name="P:Weavy.Core.Json.ExpandoJsonConverter`1.Guid">
            <summary>
            Guid of the app/content type.
            </summary>
        </member>
        <member name="P:Weavy.Core.Json.ExpandoJsonConverter`1.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Weavy.Core.Json.ExpandoJsonConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Weavy.Core.Json.ExpandoJsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Weavy.Core.Json.ExpandoJsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Weavy.Core.Json.AppJsonConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.AppJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Weavy.Core.Json.AppJsonConverter.Create(System.Type)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Json.ContentJsonConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.ContentJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Weavy.Core.Json.ContentJsonConverter.Create(System.Type)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Json.NotificationLinkJsonConverter">
            <summary>
            Converter used whern serializing the <see cref="P:Weavy.Core.Models.Notification.Link"/> property.
            </summary>
        </member>
        <member name="P:Weavy.Core.Json.NotificationLinkJsonConverter.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.NotificationLinkJsonConverter.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.NotificationLinkJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.NotificationLinkJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Weavy.Core.Json.EntityJsonConverter">
            <summary>
            Serializes only a small part of an entity object. Useful for entity references etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Json.EntityJsonConverter.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.EntityJsonConverter.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.EntityJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.EntityJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Weavy.Core.Json.SingleOrArrayConverter`1">
            <summary>
            Json converter that can handle both a single item and an array for the same property, see https://stackoverflow.com/a/18997172/891843
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Weavy.Core.Json.SingleOrArrayConverter`1.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.SingleOrArrayConverter`1.CanConvert(System.Type)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.SingleOrArrayConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.SingleOrArrayConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Weavy.Core.Json.ClaimJsonConverter">
            <summary>
            Serializes a Claim object to json.
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.ClaimJsonConverter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.ClaimJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
             Writes the JSON representation of the object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Weavy.Core.Json.ClaimJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
             Reads the JSON representation of the object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.ClaimJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Json.IEntityJsonConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.IEntityJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Weavy.Core.Json.IEntityJsonConverter.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="T:Weavy.Core.Json.EnumJsonConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its string value.
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.EnumJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Weavy.Core.Json.EnumJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Weavy.Core.Json.EnumJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Weavy.Core.Json.EnumJsonConverter.IsNullable(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.EnumJsonConverter.IsNullableType(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.EnumJsonConverter.GetEnumNameMap(System.Type,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A cached representation of the Enum string representation to respect per Enum field name.
            </summary>
            <param name="t">The type of the Enum.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>A map of enum field name to the lowerized field name,.</returns>
        </member>
        <member name="T:Weavy.Core.Json.EnumJsonConverter.BidirectionalDictionary`2">
            <summary>
            
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver">
            <summary>
             Custom contract resolver that removes empty collections, injects additional properties and uses snake_casing for the property names.
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.WeavyContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Json.WeavyContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.WeavyContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Makes sure empty collections are not serialized.
            </summary>
            <param name="member"></param>
            <param name="memberSerialization"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.WeavyContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            Adds some json properties when serializing entities.
            </summary>
            <param name="type"></param>
            <param name="memberSerialization"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.WeavyContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Returns the snake_cased name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The snake_cased or camelCased name.</returns>
        </member>
        <member name="M:Weavy.Core.Json.WeavyContractResolver.IsEmptyCollection(Newtonsoft.Json.Serialization.JsonProperty,System.Object)">
            <summary>
            Helper method for checking if a property contains an empty collection.
            </summary>
            <param name="property"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.EntityTypeValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.IconValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.CreatedValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.TrashedValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.CreatorValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.AttachmentsValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.CommentsValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.EmbedsValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.FollowsValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.LikesValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.StarsValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.TagsValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.ConversationValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.SpaceValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.AppValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.EmbedUrlValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.DownloadUrlValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.LinkUrlValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.OfficeUrlValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.ThumbUrlValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.UrlValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.MediaTypeValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.KindValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.SizeValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.ProviderValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.NameValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.WidthValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.HeightValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.WeavyContractResolver.ExpandoValueProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Json.ConversationMemberJsonConverter">
            <summary>
            Serializes only a small part of the ConversationMember object.
            </summary>
        </member>
        <member name="P:Weavy.Core.Json.ConversationMemberJsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this Newtonsoft.Json.JsonConverter can read JSON.
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.ConversationMemberJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.ConversationMemberJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
             Reads the JSON representation of the object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.ConversationMemberJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
             Writes the JSON representation of the object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Weavy.Core.Json.UserJsonConverter">
            <summary>
            Serializes only a small part of the User object. Useful for user references such as CreatedBy etc.
            </summary>
        </member>
        <member name="P:Weavy.Core.Json.UserJsonConverter.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Json.UserJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.UserJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Json.UserJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="T:Weavy.Core.Localization.HtmlEncodingFormatProvider">
            <summary>
            This class implements Html encoding via an ICustomFormatter. Passing an instance of this
            class into a string.Format method or anything similar will evaluate arguments implementing
            IHtmlString without HTML encoding them, and will give other arguments the standard
            composite format string treatment, and then HTML encode the result.
            </summary>
        </member>
        <member name="M:Weavy.Core.Localization.HtmlEncodingFormatProvider.#ctor(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="formatProvider"></param>
        </member>
        <member name="M:Weavy.Core.Localization.HtmlEncodingFormatProvider.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="arg"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Localization.HtmlEncodingFormatProvider.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Localization.HtmlLocalizer">
            <summary>
            Provides HTML-aware localization of strings by HTML encoding arguments that are formatted in the resource string.
            </summary>
        </member>
        <member name="M:Weavy.Core.Localization.HtmlLocalizer.#ctor">
            <summary>
            Creates a new <see cref="T:Weavy.Core.Localization.HtmlLocalizer"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Localization.HtmlLocalizer.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Weavy.Core.Localization.HtmlLocalizer"/> for the specified resource file.
            </summary>
            <param name="baseName">The root name of the resource file without its extension, but including any fully qualified namespace name.</param>
        </member>
        <member name="P:Weavy.Core.Localization.HtmlLocalizer.Item(System.Int64,System.String)">
            <summary>
            Gets the pluralized string resource with the given name and formatted with the supplied number.
            </summary>
            <param name="n">The number used to determine the plural form.</param>
            <param name="name">The name of the string resource.</param>
            <returns>The string resource.</returns>
        </member>
        <member name="P:Weavy.Core.Localization.HtmlLocalizer.Item(System.String,System.Object[])">
            <summary>
            Gets the string resource with the given name and formatted with the supplied arguments. 
            The arguments will be HTML encoded.
            </summary>
            <param name="name">The name of the string resource.</param>
            <param name="args">The values to format the string with.</param>
            <returns>The formatted string resource.</returns>
        </member>
        <member name="P:Weavy.Core.Localization.HtmlLocalizer.Item(System.String)">
            <summary>
            Gets the string resource with the given name.
            </summary>
            <param name="name">The name of the string resource.</param>
            <returns>The string resource.</returns>
        </member>
        <member name="T:Weavy.Core.Localization.StringLocalizer">
            <summary>
            Provides localized strings.
            </summary>
        </member>
        <member name="M:Weavy.Core.Localization.StringLocalizer.CreateInstance">
            <summary>
            Creates a new <see cref="T:Weavy.Core.Localization.StringLocalizer"/> for the current class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Localization.StringLocalizer.#ctor">
            <summary>
            Creates a new <see cref="T:Weavy.Core.Localization.StringLocalizer"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Localization.StringLocalizer.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Weavy.Core.Localization.StringLocalizer"/> for the given <see cref="T:System.Resources.ResourceManager"/>.
            </summary>
            <param name="baseName">The root name of the resource file without its extension, but including any fully qualified namespace name.</param>
        </member>
        <member name="P:Weavy.Core.Localization.StringLocalizer.Item(System.Int64,System.String)">
            <summary>
            Gets the pluralized string resource with the given name and formatted with the supplied number.
            </summary>
            <param name="n">The number used to determine the plural form.</param>
            <param name="name">The name of the string resource.</param>
            <returns>The string resource.</returns>
        </member>
        <member name="P:Weavy.Core.Localization.StringLocalizer.Item(System.String,System.Object[])">
            <summary>
            Gets the string resource with the given name and formatted with the supplied arguments.
            </summary>
            <param name="name">The name of the string resource.</param>
            <param name="args">The values to format the string with.</param>
            <returns>The formatted string resource.</returns>
        </member>
        <member name="P:Weavy.Core.Localization.StringLocalizer.Item(System.String)">
            <summary>
            Gets the string resource with the given name.
            </summary>
            <param name="name">The name of the string resource.</param>
            <returns>The string resource.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.ResourceUtils">
            <summary>
            Provides extension and helper methods for working with resource files.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ResourceUtils.GetFormatted(System.IFormatProvider,System.String,System.String,System.Object[])">
            <summary>
             Gets the composite format string resource with the given name and formats it with the supplied arguments.
            </summary>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name.</param>
            <param name="name">The name of string resource to retrieve.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ResourceUtils.GetFormatted(System.String,System.String,System.Object[])">
            <summary>
             Gets the composite format string resource with the given name and formats it with the supplied arguments.
            </summary>
            <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name.</param>
            <param name="name">The name of string resource to retrieve.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ResourceUtils.GetPluralized(System.String,System.String,System.Int64)">
            <summary>
            Gets the pluralized string resource with the given name and formatted with the specified number.
            </summary>
            <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name.</param>
            <param name="name">The name of the string resource (for the singular case).</param>
            <param name="n">The number used to determine the plural form.</param>
            <returns>The pluralized string resource localized for the current ui culture.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ResourceUtils.GetResourceManager(System.String)">
            <summary>
            Gets a resource manager for the specified resource file.
            </summary>
            <param name="baseName">The root name of the resource file without its extension, but including any fully qualified namespace name.</param>
            <returns>A <see cref="T:System.Resources.ResourceManager"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ResourceUtils.GetStringOrName(System.String,System.String)">
            <summary>
            Gets a resource string from the specified resource file and returns <paramref name="name"/> instead of throwing exceptions if a match isn't found.
            </summary>
            <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name.</param>
            <param name="name">The name of the resource to retrieve.</param>
            <returns>The value of the resource localized for the current ui culture or <paramref name="name"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ResourceUtils.GetStringOrNull(System.String,System.String)">
            <summary>
            Gets a resource string from the the specified resource file and returns <c>null</c> instead of throwing exceptions if a match isn't found.
            </summary>
            <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name.</param>
            <param name="name">Name of the resource to retrieve.</param>
            <returns>The value of the resource localized for the current ui culture, or <c>null</c> if <paramref name="name"/> cannot be found.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.AsyncHelper">
            <summary>
            Provides helper methods to call awaitable methods from a synchronous environment, see <see href="https://stackoverflow.com/a/40120697"/>
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.AsyncHelper.MyTaskFactory">
            <summary>
            The task factory.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.AsyncHelper.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes an async <see cref="T:System.Threading.Tasks.Task`1"/> method which has a TResult return type synchronously
            </summary>
            <param name="func">
            The <see cref="T:System.Func`1"/> delegate to run.
            </param>
            <typeparam name="TResult">
            <see cref="T:System.Type"/> that is the result of the task.
            </typeparam>
            <returns>
            The result.
            </returns>
        </member>
        <member name="M:Weavy.Core.Utils.AsyncHelper.RunSync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Executes an async <see cref="T:System.Threading.Tasks.Task`1"/> method which has a void return value synchronously.
            </summary>
            <param name="func">
            The <see cref="T:System.Func`1"/> delegate to run.
            </param>
        </member>
        <member name="T:Weavy.Core.Utils.CollectionUtils">
            <summary>
            Provides extension and helper methods for collections.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.Append(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the dictionary. If the key already exists, the specified value will be appended to the existing value (the values will be space separated).
            </summary>
            <param name="attrs"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffle the elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="rnd"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.Flip``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Returna a reverse dictionary.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.Assert(System.Collections.Generic.ICollection{Weavy.Core.Models.Permission},Weavy.Core.Models.Permission)">
            <summary>
             Throws a <see cref="T:Weavy.Core.Models.ForbiddenException"/> if the requested permission does not exist in the list of supplied permissions.
            </summary>
            <param name="permissions">The permissions to check.</param>
            <param name="requested">The requested permission.</param>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.ContainsAny(System.Collections.Generic.ICollection{Weavy.Core.Models.Permission},Weavy.Core.Models.Permission[])">
            <summary>
            Extension method to check if a list of permissions contains any of the the specified permissions.
            </summary>
            <param name="permissions">The permissions to look in.</param>
            <param name="permission">The permission to find.</param>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.AsPagedList``1(System.Collections.Generic.IEnumerable{``0},Weavy.Core.Models.QueryOptions,System.Nullable{System.Int64})">
            <summary>
            Extension method to make it easier to create a PagedList.
            </summary>
            <typeparam name="T">Type of enumerable</typeparam>
            <param name="source">The collection of items to initialize the paged list with.</param>
            <param name="opts">Options such as top, skip etc.</param>
            <param name="total">The total number of items (used to determine number of pages etc.)</param>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.AsSmartEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Extension method to make it easier to create a SmartEnumerable.
            </summary>
            <typeparam name="T">Type of enumerable</typeparam>
            <param name="source">Source enumerable</param>
            <returns>A new SmartEnumerable of the appropriate type</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.HasItems``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indicates whether the specified generic collection has any items.
            </summary>
            <typeparam name="T">The type of the elements of the collection.</typeparam>
            <param name="enumerable">The collection to check.</param>
            <returns><c>true</c> if the collection has any elements; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indicates whether the specified generic collection is null or empty.
            </summary>
            <typeparam name="T">The type of the elements of the collection.</typeparam>
            <param name="enumerable">The collection to check.</param>
            <returns><c>true</c> if the collection is null or empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.CleanTags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Cleans up a collection of tags by removing invalid characters.
            Duplicate and empty tags are removed before returning the remaining tags sorted in alphabetical order.
            </summary>
            <param name="tags">The list of tags to clean.</param>
            <returns>A cleaned list of tags.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.AreTagsDifferent(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Checks if two lists of tags are different.
            </summary>
            <param name="first">The first list of tags.</param>
            <param name="second">The second list of tags.</param>
            <returns><c>true</c> if the lists are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.CleanTags(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Cleans up a collection of tags by removing invalid characters.
            Duplicate and empty tags are removed before returning the remaining tags sorted in alphabetical order.
            </summary>
            <param name="tags">The list of tags to clean.</param>
            <param name="remove"><c>true</c> to remove invalid tags, otherwise <c>false</c>.</param>
            <returns>A cleaned list of tags.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.JoinTags(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Joins a list of tags into an alphabetically sorted comma separated string.
            </summary>
            <param name="tags">The list of tags to join.</param>
            <returns>A comma separated string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Converter{``0,System.String})">
            <summary>
            Concatenates a specified separator string between each element of a collection, yielding a single concatenated string.
            </summary>
            <typeparam name="T">The type of the elements of the collection.</typeparam>
            <param name="enumerable">The collection whose elements to join.</param>
            <param name="separator">The separator to use between items.</param>
            <param name="converter">A converter that converts each element from type <typeparamref name="T"/> to a string.</param>
            <returns>A string consisting of the elements of <paramref name="enumerable"/> interspersed with the separator string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Converter{``0,System.String})">
            <summary>
            Concatenates a specified separator string between each element of a collection, yielding a single concatenated string.
            </summary>
            <typeparam name="T">The type of the elements of the collection.</typeparam>
            <param name="enumerable">The collection whose elements to join.</param>
            <param name="separator">The separator to use between items.</param>
            <param name="lastseparator">The separator to use before the last element.</param>
            <param name="converter">A converter that converts each element from type <typeparamref name="T"/> to a string.</param>
            <returns>A string consisting of the elements of <paramref name="enumerable"/> interspersed with the separator string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns all distinct elements of the given source, where "distinctness" is determined via a projection 
            and the default equality comparer for the projected type, e.g. var distinct = list.DistinctBy(x => x.ID).
            </summary>
            <remarks>
            This operator uses deferred execution and streams the results, although
            a set of already-seen keys is retained. If a key is seen multiple times,
            only the first element with that key is returned.
            </remarks>
            <typeparam name="TSource">Type of the source sequence</typeparam>
            <typeparam name="TKey">Type of the projected element</typeparam>
            <param name="source">Source sequence</param>
            <param name="selector">Projection for determining "distinctness"</param>
            <returns>
            A sequence consisting of distinct elements from the source sequence,
            comparing them by the specified key projection.
            </returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.GetBool(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Helper method for returning a nullable bool from a <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="collection">The collection from which to get a value.</param>
            <param name="key">The string key of the entry to locate.</param>
            <returns>The value as a nullable bool.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.GetInt(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Helper method for returning a nullable bool from a <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="collection">The collection from which to get a value.</param>
            <param name="key">The string key of the entry to locate.</param>
            <returns>The value as a nullable bool.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.Rebuild(System.Collections.Specialized.NameValueCollection,System.Object[])">
            <summary>
            Rebuilds a NameValueCollection, optionally adding, removing and/or replacing the values in the replacement params.
            </summary>
            <param name="input"></param>
            <param name="replacement"></param>
            <returns></returns>
            <example>
            A call to <c>Request.QueryString.Rebuild("tab", null, "p", 1, "ps", 25)</c> should remove the 'tab' parameter and add or replace the 'p' and 'ps' parameters depending on if they exist or not.
            </example>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.AsQueryString(System.Collections.Specialized.NameValueCollection,System.Boolean,System.Boolean)">
            <summary>
            Converts a NameValueCollection to a query string including the leading ? or &amp;.
            </summary>
            <param name="input"></param>
            <param name="lowerCaseKeys"></param>
            <param name="addSeparator"></param>
            <returns>A query string, or <c>null</c> if the input list is null or empty.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CollectionUtils.AsHtmlAttributes(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Converts a NameValueCollection to a html attribute string.
            </summary>
            <param name="input"></param>
            <param name="lowerCaseKeys"></param>
            <returns>A string, or <c>null</c> if the input list is null or empty.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.ContentDispositionUtils">
            <summary>
            Provides helper methods for working with the "Content-Disposition" header.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ContentDispositionUtils.GetHeaderValue(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.ClaimsUtils">
            <summary>
            Provides helper and extension methods for working with claims and identities.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.AUTHENTICATION_TYPE">
            <summary>
            Name of the "authentication_type" claim type that tells us which authentication type was used to sign in
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.CLIENT_ID">
            <summary>
            Name of the "client_id" claim type that holds a reference to the client used to authenticate with.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.DIR">
            <summary>
            Name of the "dir" claim type that holds a reference to user directory.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.EMAIL">
            <summary>
            Name of the "email" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.EXP">
            <summary>
            Name of the "exp" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.FAMILY_NAME">
            <summary>
            Name of the "family_name" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.GIVEN_NAME">
            <summary>
            Name of the "given_name" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.ID">
            <summary>
            Name of the "id" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.ISS">
            <summary>
            Name of the "iss" claim.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.LOGIN_ID">
            <summary>
            Name of the "login_id" claim type that holds a reference to the login used when authenticating.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.NAME">
            <summary>
            Name of the "name" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.NBF">
            <summary>
            Name of the "nbf" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.NICKNAME">
            <summary>
            The "nickname" claim.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.PICTURE">
            <summary>
            Name of the "picture" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.PREFERRED_USERNAME">
            <summary>
            Name of the "preferred_username" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.ROLE">
            <summary>
            Name of the "role" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.SUB">
            <summary>
            Name of the "sub" claim type.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ClaimsUtils.USERNAME">
            <summary>
            Name of the "username" claim type.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.FindFirst(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String[])">
            <summary>
            Retrieves the first claim with any of the specified claim types, otherwise <c>null</c>.
            </summary>
            <param name="claims">A list of claims to check.</param>
            <param name="claimTypes">A list of claim types to check, e.g. ["sub", "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"].</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.GetClient(System.Security.Principal.IIdentity)">
            <summary>
            Gets a client from the "client_id" claim on the identity.
            </summary>
            <param name="identity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.GetDirectory(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Get the value of the "dir" claim as a <see cref="T:Weavy.Core.Models.Directory"/>. 
            </summary>
            <param name="claims">A claims collection.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.GetId(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the value of a claim identifying the user ("sid", "sub" or "nameidentifier") if it exists, otherwise <c>null</c>.
            </summary>
            <param name="identity">A claims-based identity.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.GetIdClaim(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get a claim identifying the user ("sid", "sub" or "nameidentifier") if it exists, otherwise <c>null</c>.
            </summary>
            <param name="identity">A claims-based identity.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.GetName(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Get the value of the name claim if it exists, otherwise <c>null</c>.
            </summary>
            <param name="claims">A claims collection.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.GetPicture(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Get the value of the picture claim as a <see cref="T:Weavy.Core.Models.Blob"/>, the claim can be either a blob id, a base64 encoded data URI or an url to a picture. 
            </summary>
            <param name="claims">A claims collection.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.GetIdentityFromCookie(System.String)">
            <summary>
            Reads the data from the cookie and returns the principal.
            </summary>
            <param name="cookieData">The protected cookie data.</param>
            <returns>The principal from the cookie if it exists and can be unprotected.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.GetUsername(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get the username if it exists, otherwise <c>null</c>.
            </summary>
            <param name="identity">A claims-based identity.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.GetValue(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String[])">
            <summary>
            Retrieves the value of the first claim with any of the specified claim types, otherwise <c>null</c>.
            </summary>
            <param name="claims">A list of claims to check.</param>
            <param name="claimTypes">A list of claim types to check, e.g. ["sub", "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"].</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ClaimsUtils.Subset(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String[])">
            <summary>
            Get the claims that match the supplied type(s), otherwise <c>null</c>.
            </summary>
            <param name="claims">A claims collection.</param>
            <param name="claimTypes">The claim types to return.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.StreamUtils">
            <summary>
            Provides helper methods for working with streams.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.StreamUtils.CopyTo(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Copy a range of bytes from a source to a destination stream.
            </summary>
            <param name="source">A <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="offset">The byte offset in <paramref name="source"/> at which to begin copying data.</param>
            <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="M:Weavy.Core.Utils.StreamUtils.CopyToAsync(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Copy a range of bytes from a source to a destination stream.
            </summary>
            <param name="source">A <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="offset">The byte offset in <paramref name="source"/> at which to begin copying data.</param>
            <param name="length">The maximum number of bytes to copy.</param>
        </member>
        <member name="T:Weavy.Core.Utils.JwtUtils">
            <summary>
            Provides helper methods for working with JWT tokens. See https://tools.ietf.org/html/rfc7519 and https://www.iana.org/assignments/jwt/jwt.xhtml.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.JwtUtils.Encode(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Jose.JwsAlgorithm,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Encode a JSON web token with the specified shared secret.
            </summary>
            <param name="payload">The claims to add to the token</param>
            <param name="secret">Private key or shared secret (depending on algorithm). Private keys should be encoded in PEM format.</param>
            <param name="alg">The algorithm to use.</param>
            <param name="headers">Extra headers in addition to <c>alg</c> and <c>typ</c> which are automatically encoded in the token.</param>
            <returns>The encoded JWT token string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.JwtUtils.Decode(System.String,System.String,System.Boolean)">
            <summary>
            Decodes a JSON web token.
            </summary>
            <param name="token">The JSON web token to decode.</param>
            <param name="secret">Public key, JWK, JWKS or shared secret for validating signature.</param>
            <param name="validate"><c>true</c> to validate exp, nbf etc.</param>
            <returns>A dictionary with claims from the token.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.JwtUtils.ValidateExp(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Verifies the exp claim.
            </summary>
            <remarks>See https://tools.ietf.org/html/rfc7515#section-4.1.4</remarks>        
        </member>
        <member name="M:Weavy.Core.Utils.JwtUtils.ValidateNbf(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Verifies the nbf claim.
            </summary>
            <remarks>See https://tools.ietf.org/html/rfc7515#section-4.1.4</remarks>        
        </member>
        <member name="T:Weavy.Core.Utils.CryptoUtils">
            <summary>
            Provides helper methods for encypting/decrypting text.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.CryptoUtils._rngCSP">
            <summary>
            Random number generator for creating secrets.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.CryptoUtils.Encrypt(System.String,System.String)">
            <summary>
            Encrypt a string into a string using a password 
            </summary>
            <param name="clearText">The input text you want to encrypt.</param>
            <param name="password">The password to use when encrypting the text.</param>
            <returns>The resulting cipher text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CryptoUtils.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Encrypt a byte array into a byte array using a key and an IV 
            </summary>
            <param name="clearData">The input data you want to encrypt.</param>
            <param name="key">The secret key for the underlying encryption algorithm.</param>
            <param name="iv">The initialization vector for underlying encryption algorithm.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CryptoUtils.Decrypt(System.String,System.String)">
            <summary>
            Decrypt a string into a string using a password  
            </summary>
            <param name="cipherText">The cipher text you want to decrypt.</param>
            <param name="password">The password to use when decrypting the text.</param>
            <returns>Returns a decrypted string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CryptoUtils.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Decrypt a byte array into a byte array using a key and an IV  
            </summary>
            <param name="cipherData">The cipher data you want to decrypt.</param>
            <param name="key">The secret key for the underlying encryption algorithm.</param>
            <param name="iv">The initialization vector for underlying encryption algorithm.</param>
            <returns>Returns a byte array.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.CryptoUtils.RandomString(System.Int32)">
            <summary>
            Returns a random string with the supplied length.
            </summary>
            <param name="length">The number of chars to include in the random string.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.EnumUtils">
            <summary>
            Provides helper and extension methods for enums.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.EnumUtils.Asc(Weavy.Core.Models.SortBy)">
            <summary>
            
            </summary>
            <param name="orderby"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EnumUtils.Desc(Weavy.Core.Models.SortBy)">
            <summary>
            
            </summary>
            <param name="orderby"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EnumUtils.Reverse(Weavy.Core.Models.SortBy)">
            <summary>
            
            </summary>
            <param name="orderby"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EnumUtils.GetDisplayName(System.Enum)">
            <summary>
            Get the enum name text from the enum display attribute if exists, otherwise the enum as string
            </summary>
            <param name="e"></param>
            <returns>The enum name text from the enum display attribute if exists, otherwise the enum as string</returns>
        </member>
        <member name="M:Weavy.Core.Utils.EnumUtils.GetDisplayDescription(System.Enum)">
            <summary>
            Get the enum description text from the enum display attribute if exists, otherwise <c>null</c>.
            </summary>
            <param name="e"></param>
            <returns>The enum description text from the enum display attribute if exists, otherwise the enum as string</returns>
        </member>
        <member name="M:Weavy.Core.Utils.EnumUtils.IsFlags(System.Enum)">
            <summary>
            Gets a value indicating whether the enum has the <see cref="T:System.FlagsAttribute"/>.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EnumUtils.GetFlags(System.Enum)">
            <summary>
            Get the bit values set in the enum.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.CultureUtils">
            <summary>
            Provides helper methods for various culture related things.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.CultureUtils.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.CultureUtils.Regions">
            <summary>
            Gets a list of supported regions.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.CultureUtils.GetCulture(System.Globalization.CultureInfo,System.String)">
            <summary>
            Get a culture for formatting dates etc. based on the specified ui culture and region
            </summary>
            <param name="uiCulture"></param>
            <param name="regionCode"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.CultureUtils.GetGultures(Weavy.Core.Models.User,System.Web.HttpRequest)">
            <summary>
            Gets UICulture and Culture for the specified user (and request).
            </summary>
            <param name="user"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.CultureUtils.SetCulture(Weavy.Core.Models.User)">
            <summary>
            Set ui culture and culture on current thread based on user settings.
            </summary>
            <param name="user"></param>
        </member>
        <member name="T:Weavy.Core.Utils.ColorUtils">
            <summary>
            Provides extensions and helper methods for working with colors.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.GetColors(System.Drawing.Color)">
            <summary>
            Helper method that returns an array of matching colors based on the specified color.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.CacheValueFactory(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.Alpha(System.Drawing.Color,System.Single)">
            <summary>
            Sets the alpha channel value for the specified color.
            </summary>
            <param name="color">The color to for which to set alpha channel value.</param>
            <param name="percentage">The alpha channel percentage (0-100%).</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.Mix(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Mix two colors. Replicating the Mix function in SASS
            </summary>
            <param name="color1">The first color.</param>
            <param name="color2">The second color.</param>
            <param name="weight">Percentage weight of the first color (0-100%).</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.Darken(System.Drawing.Color,System.Single)">
            <summary>
            Lighten a color.
            </summary>
            <param name="color">The color to darken.</param>
            <param name="percentage">A percentage to darken the color (0-100%).</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.Lighten(System.Drawing.Color,System.Single)">
            <summary>
            Lighten a color.
            </summary>
            <param name="color">The color to lighten.</param>
            <param name="percentage">A percentage to lighten the color (0-100%).</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.ToHex(System.Drawing.Color)">
            <summary>
            Returns a hex string representing the color.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.ToHex(Weavy.Core.Imaging.HslaColor)">
            <summary>
            Returns a hex string representing the color.
            </summary>
            <param name="color">The color.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.ToHslaColor(System.Drawing.Color)">
            <summary>
            Converts an ARGB color to HSLA.
            </summary>
            <param name="argb"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.ToArgbColor(Weavy.Core.Imaging.HslaColor)">
            <summary>
            Converts an HSL color value to RGB.
            </summary>
            <param name="hsla"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.UseDarkText(System.Drawing.Color)">
            <summary>
            Returns a value indicating whether we should use dark text or not against the specified background color.
            </summary>
            <param name="background"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.HueToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Helper method for HslToRgba 
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.GenerateColors(System.Drawing.Color,System.Int32)">
            <summary>
            Generate matching colors based on the specified <paramref name="baseColor"/>.
            </summary>
            <param name="baseColor"></param>
            <param name="divisions"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.RybHue(System.Single,System.Boolean)">
            <summary>
            Converts from RYB hue to RGB hue.
            </summary>
            <param name="h"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.RybSaturation(System.Single,System.Single,System.Boolean)">
            <summary>
            Gets the adjusted saturation for a given hue.
            </summary>
            <param name="rybHue"></param>
            <param name="s"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.RybColorToHsla(System.Single,System.Single,System.Single)">
            <summary>
            Returns a HSLA color from RYB
            </summary>
            <param name="rybHue"></param>
            <param name="rybSaturation"></param>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ColorUtils.GetAdjacent(Weavy.Core.Imaging.ColorName,System.Int32)">
            <summary>
            Get the color adjacent to the specified color in the palette.
            </summary>
            <param name="name"></param>
            <param name="steps"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.FileConversionUtils">
            <summary>
            Provides helper methods for converting files between different formats.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.#cctor">
            <summary>
            Static constructor that sets the license for the Aspose modules.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.CanConvertToImage(System.String)">
            <summary>
            Returns whether the specified file can be converted to an image format.
            </summary>
            <param name="filename">Filename to check.</param>
            <returns><c>true</c> if the file can be converted to an image, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.CanConvertToDocx(System.String)">
            <summary>
            Returns whether the specified file can be converted to the docx format.
            </summary>
            <param name="filename">Filename to check.</param>
            <returns><c>true</c> if the file can be converted to docx, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.CanConvertToHtml(System.String)">
            <summary>
            Returns whether the specified file can be converted to html.
            </summary>
            <param name="filename">Filename to check.</param>
            <returns><c>true</c> if the file can be converted to html, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.CanConvertToPdf(System.String)">
            <summary>
            Returns whether the specified file can be converted to pdf.
            </summary>
            <param name="filename">Filename to check.</param>
            <returns><c>true</c> if the file can be converted to pdf, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.CanConvertToText(System.String)">
            <summary>
            Returns whether the specified file can be converted to a text file.
            </summary>
            <param name="filename">Filename to check.</param>
            <returns><c>true</c> if the file can be converted to txt, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.ToDocx(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Convert the specified file to docx.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns>A <see cref="T:System.IO.FileInfo"/> with the file as docx, or <c>null</c> if the file could not be converted to docx.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.ToPdf(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Convert the specified file to pdf.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns>A <see cref="T:System.IO.FileInfo"/> with the file as pdf, or <c>null</c> if the file could not be converted to pdf.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.ToHtml(System.IO.FileInfo)">
            <summary>
            Returns the content of the specified file converted to html.
            </summary>
            <param name="file"></param>
            <returns>A html <see cref="T:System.String"/>, or <c>null</c> if the file could not be converted to html.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.ToText(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts the contents of the <paramref name="input"/> file to text and writes it to the <paramref name="output"/> file.
            If the file could not be converted to text the output file will not be created.
            </summary>
            <param name="input">The input file that should be converted to text.</param>
            <param name="output">The outpout file where the text should be written.</param>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.ToImage(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts the contents of the <paramref name="input"/> file to a <see cref="T:System.Drawing.Bitmap"/> image and writes it to the <paramref name="output"/> file. 
            Valid output formats are .gif, .jpg and .png. If the file could not be converted to a <see cref="T:System.Drawing.Bitmap"/> image the output file will not be created.
            </summary>
            <param name="input">The file that should be converted to an image.</param>        
            <param name="output">The output file where the image should be written.</param>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.WordToImage(System.IO.FileInfo,System.IO.FileInfo,System.Int32)">
            <summary>
            Converts a page in the specified word processor (Word) document to a <see cref="T:System.Drawing.Bitmap"/> image.
            </summary>
            <param name="input">The input word processor file to convert.</param>
            <param name="output">The output file where the image will be saved.</param>
            <param name="pageIndex">Zero-based page index.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.SlideToImage(System.IO.FileInfo,System.IO.FileInfo,System.Int32)">
            <summary>
            Converts a page in the specified presentation (Powerpoint) document to a <see cref="T:System.Drawing.Bitmap"/> image.
            </summary>
            <param name="input">The input presentation file to convert.</param>
            <param name="output">The output file where the image will be saved.</param>
            <param name="pageIndex">Zero-based page index.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.SheetToImage(System.IO.FileInfo,System.IO.FileInfo,System.Int32)">
            <summary>
            Converts a page in the specified spreadsheet (Excel) document to a <see cref="T:System.Drawing.Bitmap"/> image.
            </summary>
            <param name="input">The input spreadsheet file to convert.</param>
            <param name="output">The output file where the image will be saved.</param>
            <param name="pageIndex">Zero-based page index.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.ImageToImage(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts the specified input image, e.g. Photoshop, to a <see cref="T:System.Drawing.Bitmap"/> image.
            </summary>
            <param name="input">The input image to convert.</param>
            <param name="output">The output file where the image will be saved.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.HtmlToImage(System.String,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Renders the specified HTML into a new image of the requested size. The HTML will be layout by the given size but will be clipped if it cannot fit.
            </summary>
            <param name="html">HTML source to render.</param>
            <param name="width">The width of the image to render into.</param>
            <param name="height">The height of the image to render into.</param>
            <param name="margin">The margin used when rendering the HTML into the image.</param>
            <param name="backgroundColor">The color to fill the image with (the image cannot have transparent background, by default it will be white).</param>
            <returns>The generated image of the html.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">if <paramref name="backgroundColor"/> is <see cref="P:System.Drawing.Color.Transparent"/></exception>.
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.PdfToImage(System.IO.FileInfo,System.IO.FileInfo,System.Int32)">
            <summary>
            Converts a page in the specified pdf document to a <see cref="T:System.Drawing.Bitmap"/> image.
            </summary>
            <param name="input">The input pdf file.</param>
            <param name="output">The output file where the image will be saved.</param>
            <param name="pageIndex">Zero-based page index.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.Convert(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Converts a file to the specified filetype (if possible).
            </summary>
            <param name="input">The input file to convert.</param>
            <param name="output">The output file where the converted input file should be written.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object that points to the converted file.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.GetConversionFormat(System.String)">
            <summary>
            Gets the conversion format based on the specified file extension.
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.GetImageFormat(System.String)">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ImageFormat"/> used by the file in the specified path.
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentException">When the file in <paramref name="path"/> is not a .gif, .jpg or .png</exception>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.GetImageOptions(System.String)">
            <summary>
            Gets the <see cref="T:Aspose.Imaging.ImageOptionsBase"/> used by the file in the specified path.
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentException">When the file in <paramref name="path"/> is not a .gif, .png or .jpg</exception>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileConversionUtils.GetPsdImageOptions(System.String)">
            <summary>
            Gets the <see cref="T:Aspose.PSD.ImageOptionsBase"/> used by the file in the specified path.
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ArgumentException">When the file in <paramref name="path"/> is not a .gif, .png or .jpg</exception>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.FileConversionFormat">
            <summary>
            Defines the different formats that the <see cref="T:Weavy.Core.Utils.FileConversionUtils"/> understands.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.FileConversionFormat.None">
            <summary>
            No conversion
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.FileConversionFormat.Html">
            <summary>
            Convert to/from html.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.FileConversionFormat.Image">
            <summary>
            Convert to/from image.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.FileConversionFormat.Pdf">
            <summary>
            Convert to/from pdf document.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.FileConversionFormat.Sheet">
            <summary>
            Convert to/from spreadsheet.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.FileConversionFormat.Slide">
            <summary>
            Convert to/from presentation slide.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.FileConversionFormat.Text">
            <summary>
            Convert to/from text.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.FileConversionFormat.Word">
            <summary>
            Convert to/from MS Word.
            </summary>
        </member>
        <member name="T:Weavy.Core.Utils.MarkdownUtils">
            <summary>
            Provides helper methods for working with markdown.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.MarkdownUtils.AsHtml(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="markdown"></param>
            <param name="renderSoftLineBreaksAsLineBreaks"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.ConversionUtils">
            <summary>
            Provides extensiosn and helper methods for converting objects betwwen different representations.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ConversionUtils.Clone``1(System.Collections.Generic.List{``0})">
            <summary>
            Clones a generic list of ICloneable items.
            </summary>
            <typeparam name="T">The Type of item in the generic list.</typeparam>
            <param name="list">The list to clone.</param>
            <returns>A clone/deep copy of the list.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ConversionUtils.Copy(System.Object)">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <param name="instance">The object to be copied.</param>
            <returns>A deep copy of the object.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ConversionUtils.Copy(System.Object,System.Nullable{System.Boolean})">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <param name="instance">The object to be copied.</param>
            <param name="serialize">Null to serialize/deserialize, true to serialize only, false to deserialize only.</param>
            <returns>A deep copy of the object.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ConversionUtils.ConvertFromString``1(System.String)">
            <summary>
            Converts the specified text to an object. 
            </summary>
            <typeparam name="T">The type of the object to convert.</typeparam>
            <param name="value">The text representation of the object to convert. </param>
            <returns>An object that represents the converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ConversionUtils.ConvertFromString(System.String,System.Type)">
            <summary>
            Converts the specified text to an object. 
            </summary>
            <param name="value">The text representation of the object to convert. </param>
            <param name="type">The type of the object to convert.</param>
            <returns>An object of type <paramref name="type"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ConversionUtils.ConvertToString(System.Object)">
            <summary>
            Converts the specified value to its equivalent string representation. 
            </summary>
            <param name="value">An object or null.</param>
            <returns>The string representation of <paramref name="value"/>, or null.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.DateUtils">
            <summary>
            Provides extension and helper methods for working with dates and times.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.DateUtils.UnixEpoch">
            <summary>
            The value of this constant is equivalent to 00:00:00.0000000 UTC, January 1, 1970, in the Gregorian calendar. UnixEpoch defines the point in time when Unix time is equal to 0.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.GetTimeZone(Weavy.Core.Models.User)">
            <summary>
            Gets the time zone for the specified user.
            </summary>
            <returns>The time zone from user settings, or local server time .</returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.SetTimeZone(Weavy.Core.Models.User)">
            <summary>
            Set time zone on current thread based on user settings.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.From(System.DateTime,System.DateTime,System.TimeZoneInfo)">
            <summary>
            Returns a textual representation of a date relative to another date.
            </summary>
            <param name="date">The (UTC) date to return as text.</param>
            <param name="from">The (UTC) date from which to calculate relative time.</param>        
            <param name="tz"></param>
            <returns>Returns the relative time from the specified date, e.g. "3 hours ago".</returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.When(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Returns a string representation of when the specified date occured, e.g. "4:38 PM", "Yesterday", "Wednesday", "June 16", "10/06/16" etc.
            </summary>
            <param name="date">The (UTC) date to return as text.</param>
            <param name="tz"></param>
            <returns>A string describing when the specified date occured.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.FromNow(System.Nullable{System.DateTime},System.TimeZoneInfo)">
            <summary>
            Returns a textual representation of the specified date from now. This is sometimes called "time ago" or "relative time".
            </summary>
            <param name="date">The (UTC) date to return as text.</param>
            <param name="tz"></param>
            <returns>Returns the time from now, e.g. "3 hours ago".</returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.FromNow(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Returns a textual representation of the specified date from now. This is sometimes called "time ago" or "relative time".
            </summary>
            <param name="date">The (UTC) date to return as text.</param>        
            <param name="tz"></param>
            <returns>Returns the time from now, e.g. "3 hours ago".</returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.IsWeekday(System.DateTime)">
            <summary>
            Returns a value indicating whether <paramref name="date"/> is a weekday (Mon-Fri).
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.IsWeekend(System.DateTime)">
            <summary>
            Returns a value indicating whether <paramref name="date"/> is a weekend (Sat-Sun).
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.ToLocal(System.Nullable{System.DateTime},System.TimeZoneInfo)">
            <summary>
            Converts an UTC date to local server/user time.
            </summary>
            <param name="date">The (UTC) date to localize.</param>
            <param name="tz"></param>
            <returns>Returns the local time for a user.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.ToLocal(System.DateTime,System.TimeZoneInfo)">
            <summary>
            Converts an UTC date to local time in the specified timezone.
            </summary>
            <param name="date">The (UTC) date to convert.</param>
            <param name="tz">The time zone to convert <paramref name="date"/> to.</param>
            <returns>The local date and time in the destination time zone.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.ToString(System.Nullable{System.DateTime},System.String)">
            <summary>
            Converts a datetime object to string.
            </summary>
            <param name="date">The date to convert.</param>
            <param name="format">The format to use when converting.</param>
            <returns>The datetime object as a string with the specified format applied.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.ToShortDateString(System.Nullable{System.DateTime})">
            <summary>
            Converts a datetime object to its short date string representation.
            </summary>
            <param name="date">The date to convert.</param>
            <returns>The datetime object as a string with the specified format applied.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.NextFrom(Weavy.Core.Cron.CrontabSchedule,System.Nullable{System.DateTime})">
            <summary>
            Gets the next occurrence of this schedule starting with a base time.
            </summary>
            <param name="schedule"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.ToUnixTime(System.DateTime)">
            <summary>
            Gets the current Unix time for the specified date (UTC), i.e. the number of seconds since 1970-01-01T00:00:00Z.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.DateUtils.IsBetween(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Check if <paramref name="date"/> is between the two dates <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="date">The date to check.</param>
            <param name="a">The first date.</param>
            <param name="b">The second date.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.Emojione">
            <summary>
            Helper class for converting emoji to different formats.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.AsciiToShortname(System.String)">
            <summary>
            Converts ascii emoji to shortname, e.g. :) -> :smile:
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.AsciiToUnicode(System.String)">
            <summary>
            Converts ascii emoji to unicode, e.g. :) -> 😄
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.GetEmojiArray(System.String)">
            <summary>
            Get emoji array for the specified codepoint.
            </summary>
            <param name="codepoint"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.GetImage(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get image markup for specified emoji.
            </summary>
            <param name="input">A single native unicode emoji or emoji shortname, e.g. 😃 or :smiley:.</param>
            <param name="ascii"><c>true</c> to also convert ascii emoji to images, e.g. :D.</param>
            <param name="inline"><c>true</c> to return inline &lt;svg&gt; instead of &lt;img&gt;.</param>
            <param name="sprite"><c>true</c> to enable sprite mode instead of individual image.</param>
            <returns>The codepoint.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.ImageToShortname(System.String)">
            <summary>
            Takes input containing emoji images and converts it to emoji shortnames.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.ShortnameToAscii(System.String)">
            <summary>
            This will replace shortnames with their ascii equivalent, e.g. :wink: -> ;). 
            This is useful for systems that don't support unicode or images.
            </summary>
            <param name="str"></param>
            <returns>A string with ascii replacements.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.ShortnameToImage(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Takes input containing emoji shortnames and converts it to emoji images.
            </summary>
            <param name="str"></param>
            <param name="ascii"><c>true</c> to also convert ascii emoji to images.</param>
            <param name="inline"><c>true</c> to return inline &lt;svg&gt; instead of &lt;img&gt;.</param>
            <param name="sprite"><c>true</c> to enable sprite mode instead of individual images.</param>
            <returns>A string with appropriate html for rendering emoji.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.ShortnameToUnicode(System.String,System.Boolean)">
            <summary>
            Converts shortname emojis to unicode, useful for sending emojis back to mobile devices.
            </summary>
            <param name="str">The input string</param>
            <param name="ascii"><c>true</c> to also convert ascii emoji in the inpur string to unicode.</param>
            <returns>A string with unicode replacements</returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.ToCodePoint(System.String)">
            <summary>
            Convert a unicode character to its code point/code pair
            </summary>
            <param name="unicode"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.ToImage(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Takes an input string containing both native unicode emoji and shortnames, and translates it into emoji images for display.
            </summary>
            <param name="str">The input string.</param>
            <param name="ascii"><c>true</c> to also convert ascii emoji to images.</param>
            <param name="inline"><c>true</c> to return inline &lt;svg&gt; instead of &lt;img&gt;.</param>
            <param name="sprite"><c>true</c> to enable sprite mode instead of individual images.</param>
            <returns>A string with appropriate html for rendering emoji.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.ToShort(System.String)">
            <summary>
            Converts unicode emoji to shortnames.
            </summary>
            <param name="str">The input string</param>
            <returns>A string with shortname replacements.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.ToUnicode(System.String)">
            <summary>
            Converts a unicode code point/code pair to a unicode character
            </summary>
            <param name="codepoint"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.UnicodeToImage(System.String,System.Boolean,System.Boolean)">
            <summary>
            Takes native unicode emoji input, such as that from your mobile device, and outputs image markup.
            </summary>
            <param name="str">The input string</param>
            <param name="inline"><c>true</c> to return inline &lt;svg&gt; instead of &lt;img&gt;.</param>
            <param name="sprite"><c>true</c> to enable sprite mode instead of individual images.</param>
            <returns>A string with appropriate html for rendering emoji.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.Emojione.UnifyUnicode(System.String,System.Boolean)">
            <summary>
            Unifies all emoji to their standard unicode types. 
            </summary>
            <param name="str">The input string.</param>
            <param name="ascii"><c>true</c> to also convert ascii emoji to unicode.</param>
            <returns>A string with standardized unicode.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.EntityUtils">
            <summary>
            Provides helper and extensiosn methods for entities.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)">
            <summary>
            Filters a list of <paramref name="entities"/>, removing <c>null</c>s, trashed entities and <paramref name="entities"/> that the current user does not have permission to see.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities">The list of apps to filter.</param>
            <param name="sudo"><c>true</c> to keep <paramref name="entities"/> that current user does not have permission to see, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to keep trashed <paramref name="entities"/>, <c>false</c> to remove them.</param>
            <returns>A list of entiries of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.Filter``1(``0,System.Boolean,System.Boolean)">
            <summary>
            Filters an <see cref="T:Weavy.Core.Models.IEntity"/>, returning <c>null</c> if the <paramref name="entity"/> is trashed and/or if the current user does not have permission to see it.
            </summary>
            <param name="entity">The <see cref="T:Weavy.Core.Models.IEntity"/> to filter.</param>
            <param name="sudo"><c>true</c> to keep <paramref name="entity"/> that current user does not have permission to see, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to keep trashed <paramref name="entity"/>, otherwise <c>false</c>.</param>
            <returns>An <see cref="T:Weavy.Core.Models.App"/> object or <c>null</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.Assert(Weavy.Core.Models.IEntity,Weavy.Core.Models.Permission,Weavy.Core.Models.User)">
            <summary>
              Throws a <see cref="T:Weavy.Core.Models.ForbiddenException"/> if a user does not have the requested permission to an entity.
            </summary>
            <param name="entity">The entity to check.</param>
            <param name="requested">The requested permission.</param>
            <param name="user">The <see cref="T:Weavy.Core.Models.User"/> to check permission for, <c>null</c> checks permission for the current <see cref="T:Weavy.Core.Models.User"/>.</param>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.Boost(Weavy.Core.Models.IEntity)">
            <summary>
            Gets the boost factor for the fulltext index.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.MetaData(Weavy.Core.Models.App)">
            <summary>
            Gets meta data for the specified app.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.MetaData(Weavy.Core.Models.Content)">
            <summary>
            Gets meta data for the specified content item.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.HasPermission(Weavy.Core.Models.IEntity,Weavy.Core.Models.Permission,Weavy.Core.Models.User)">
            <summary>
              Check if the current user has the requested permission to the specified entity.
            </summary>
            <param name="entity">The entity to check.</param>
            <param name="requested">The requested permission.</param>
            <param name="user">The <see cref="T:Weavy.Core.Models.User"/> to check permission for, <c>null</c> checks permission for the current <see cref="T:Weavy.Core.Models.User"/>.</param>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.HasValue(Weavy.Core.Models.IEntity,System.Boolean)">
            <summary>
              Returns true if the entity has a value otherwise false.
            </summary>
            <param name="entity">The entity to check.</param>
            <param name="filter"></param>
            <returns>True if a value is set otherwise false.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.Pluralize(Weavy.Core.Models.EntityType,System.Boolean)">
            <summary>
            Returns the plural name of en entity type.
            </summary>
            <param name="entitytype"></param>
            <param name="single"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.ResolveSpaceId(Weavy.Core.Models.IEntity)">
            <summary>
            Resolves the id of the space where the entity is located.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.GetAppGuid(System.String)">
            <summary>
            Try to resolve app type from string by using guid, fully qualified name or name.
            </summary>
            <param name="type">Preferably GUID of <see cref="T:Weavy.Core.Models.App"/>, but short name or fully qualified name will also work as long as it is unique within the installation.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.Value(Weavy.Core.Models.IEntity,System.Boolean,System.Boolean)">
            <summary>
            Returns the actual underlying value of an IEntity.
            </summary>
            <param name="entity"></param>
            <param name="sudo"><c>true</c> to get entity as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed <paramref name="entity"/>, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.GetIcon(Weavy.Core.Models.EntityType)">
            <summary>
            Returns the name of a material design icon to use for the entity type.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.Kind(Weavy.Core.Models.IEntity)">
            <summary>
            Returns a label that is suitable for display in lists and search results.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.CssClass(Weavy.Core.Models.IEntity)">
            <summary>
            CSS class for an entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.ToIdentifier(Weavy.Core.Models.IEntity)">
            <summary>
            Returns a string that uniquely identifies an entity, e.g. space with id = 53 -> s53.
            </summary>
            <param name="entity">The entity to get the result for.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.FromIdentifier(System.String)">
            <summary>
            Parse an identifier string like s12, a42 and return the corresponding entity.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.FromChar(System.Char)">
            <summary>
            Gets the entity type from defined but the specified character code.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.EntityUtils.ToChar(Weavy.Core.Models.EntityType)">
            <summary>
            Return a char code used to identify an entity type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.NumberUtils">
            <summary>
            Provides helper and extension methods for formatting numbers.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.NumberUtils.Format(System.Int32)">
            <summary>
            Format a number to max 3 significant numbers and a suffix (K or M)
            </summary>
            <param name="number">The number to format</param>
            <returns>The formated number as a string</returns>
        </member>
        <member name="M:Weavy.Core.Utils.NumberUtils.Format(System.Nullable{System.Int32})">
            <summary>
            Format a number to max 3 significant numbers and a suffix (K or M)
            </summary>
            <param name="number">The number to format</param>
            <returns>The formated number as a string</returns>
        </member>
        <member name="M:Weavy.Core.Utils.NumberUtils.Format(System.Nullable{System.Int64})">
            <summary>
            Format a number to max 3 significant numbers and a suffix (K or M)
            </summary>
            <param name="number">The number to format</param>
            <returns>The formated number as a string</returns>
        </member>
        <member name="M:Weavy.Core.Utils.NumberUtils.Format(System.Int64)">
            <summary>
            Format a number to max 3 significant numbers and a suffix (K or M)
            </summary>
            <param name="number">The number to format</param>
            <returns>The formated number as a string</returns>
        </member>
        <member name="T:Weavy.Core.Utils.OfficeUtils">
            <summary>
            Provides helper methods for working with Microsoft Office files.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.OfficeUtils.ToDocx(Weavy.Core.Models.IHtmlDocument,System.String)">
            <summary>
            Converts an <see cref="T:Weavy.Core.Models.IHtmlDocument"/> to the Open XML document format (.docx).
            </summary>
            <param name="input">The <see cref="T:Weavy.Core.Models.IHtmlDocument"/> to convert.</param>
            <param name="usercss">Custom css.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object pointing to the (temporary) .docx file on disk</returns>
        </member>
        <member name="M:Weavy.Core.Utils.OfficeUtils.GetTemplate(System.String)">
            <summary>
            Get a template for creating an office document with the specified extension.
            </summary>
            <param name="extension">File extension (.docx, .xlsx, .pptx) of document.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.OfficeUtils.CreateDocument(System.String)">
            <summary>
            Create a new Office document in the specified path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Weavy.Core.Utils.OfficeUtils.GetProductName(System.String)">
            <summary>
            Gets the name of the Office product that can open the filetype specified by path (i.e. Word, Excel, PowerPoint).
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The Office product name or null if no product was found.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.OfficeUtils.GetIconName(System.String)">
            <summary>
            Gets the icon of the Office product.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>The icon name.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.FileUtils">
            <summary>
            Provides helper methods for working with files and folders.
            </summary>
        </member>
        <member name="P:Weavy.Core.Utils.FileUtils.CacheDirectory">
            <summary>
            Gets the path to the cache directory, e.g. C:\inetpub\Weavy\App_Data\Cache\
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetImageFromUrl(System.String)">
            <summary>
            Returns the image at the specified url (for use in outgoing emails etc.).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.FileSizeAsString(System.Nullable{System.Int64})">
            <summary>
            Returns the file size as a string, e.g. 2 GB instead of 2147483647.
            </summary>
            <param name="size">The file size in bytes</param>
            <returns>The file size as a string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.FileSizeAsString(System.Int64)">
            <summary>
            Returns the file size as a string, e.g. 2 GB instead of 2147483647.
            </summary>
            <param name="size">The file size in bytes</param>
            <returns>The file size as a string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.TransferSpeedAsString(System.Int64,System.Int64)">
            <summary>
            Returns the transfer speed as a string, e.g. 5 Mbit/s, given the bytes transferred and the total transfer time.
            </summary>
            <param name="bytes">The total bytes transferred</param>
            <param name="milliseconds">The transfer time in milliseconds</param>
            <returns>The file size as a string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.DimensionsAsString(System.Nullable{System.Drawing.Size})">
            <summary>
            Returns the dimensions of an image as a string, e.g. 800x600.
            </summary>
            <param name="dimensions">The dimensions of the image.</param>
            <returns>The dimensions as a string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.ETag(System.IO.FileInfo)">
            <summary>
            Returns the ETag for the specified file.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.EnsureDirectoryExists(System.IO.DirectoryInfo)">
            <summary>
            Makes sure the directory exists.
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.EnsureDirectoryExists(System.IO.FileInfo)">
            <summary>
            Makes sure the parent directory of the file exists.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetImageMetadata(System.IO.FileInfo)">
            <summary>
            Gets metadata for the specified image file.
            </summary>
            <returns>The image metadata, or <c>null</c> if the file is not an image or the metadata could not be read.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetExtension(System.String)">
            <summary>
            Gets the file extension (including the period ".") of the specified path, file name or media type.
            </summary>
            <param name="path">The path string or media type, e.g. "image.gif" or "image/gif".</param>
            <remarks>
            The extension of the specified path (including the period "."), or <c>null</c>, or <c>string.Empty</c>. 
            If path is null, GetExtension returns <c>null</c>. If path does not have extension information, GetExtension returns <c>string.Empty</c>.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetMediaType(System.String)">
            <summary>
            Gets the media type (aka MIME type) for the specified file path.
            </summary>
            <param name="path">The path string from which to get the media type.</param>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <remarks>
            The string returned by GetFileName, minus the last period (.) and all characters following it.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetIcon(Weavy.Core.Models.Blob)">
            <summary>
            Returns the icon to use for the specified blob.
            </summary>
            <param name="blob">The blob.</param>
            <returns>A suitable icon.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetIcon(System.String,System.String)">
            <summary>
            Returns the icon to use for a file with the specified file extension and/or media type.
            </summary>
            <param name="path">File name or path, e.g. "document.docx".</param>
            <param name="mediaType">The media type type, e.g. "application/vnd.openxmlformats-officedocument.wordprocessingml.document".</param>
            <returns>A suitable icon.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetKind(System.String,System.String)">
            <summary>
            /// Returns the file kind, e.g. "image", "document", "video" etc., for a file with the specified file path and/or media type.
            </summary>
            <param name="path">File name or path.</param>
            <param name="mediaType"></param>
            <returns>A string describing the file kind.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetTempDir(System.Boolean)">
            <summary>
            Returns a temporary directory, i.e. App_Data\Temp
            </summary>
            <param name="unique">Set to true if a unique directory should be created below the default temp directory.</param>
            <returns>Returns the full path to the temp directory.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetTempFile(System.String)">
            <summary>
            Returns a new temporary file, e.g. App_Data\Temp\c386dfed-9c79-42a6-bfe1-5d740cc2a934.txt
            </summary>
            <param name="ext">Optional file extension of the temporary file, e.g. ".png".</param>
            <returns>Returns the full path to the temporary file.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.RelativeName(System.IO.FileSystemInfo)">
            <summary>
            Returns the path of the file or directory relative to the root directory of the application. 
            If the file or directory is not in the application path, the full path is returned.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.SafeName(System.String,System.String)">
            <summary>
            Returns a path-safe filename by removing/replacing invalid chars from the specified filename.
            </summary>
            <param name="filename"></param>
            <param name="replacement"></param>
            <returns>A valid filename.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.IsAudio(System.String)">
            <summary>
            Returns whether the specified filename is an audio file.
            </summary>
            <param name="path">The path string to check.</param>
            <returns>Returns true if the file is an audio file.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.IsImage(System.String)">
            <summary>
            Returns whether the specified filename is an image.
            </summary>
            <param name="path">The path string to check.</param>
            <returns>Returns true if the file is an image.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.IsWebImage(System.String)">
            <summary>
            Returns a value indicating whether the file at the specified path is generally recognized as usable on the web.
            </summary>
            <param name="path">The path string to check.</param>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.IsVideo(System.String)">
            <summary>
            Returns whether the specified filename is considered video.
            </summary>
            <param name="path">The path string to check.</param>
            <returns>Returns true if the file is a video file.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.IsMedia(System.String)">
            <summary>
            Returns whether the specified filename is considered media (audio, image or video).
            </summary>
            <param name="path">The path string to check.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.IsMarkup(System.String)">
            <summary>
            Returns whether the specified filename is considered markup (html or xml).
            </summary>
            <param name="path">The path string to check.</param>
            <returns>Returns true if the file is a text file.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.IsPlainText(System.String)">
            <summary>
            Returns whether the specified filename is considered plain text.
            </summary>
            <param name="path">The path string to check.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.IsOfficeDocument(System.String)">
            <summary>
            Returns whether the specified filename is a Office document format.
            </summary>
            <param name="path">The path string to check.</param>
            <returns>Returns true if the file is an Office file.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.SyntaxHighlight(System.String)">
            <summary>
            Returns the language code used for syntax highlighting the specified file.
            </summary>
            <param name="path">The path string to check.</param>
            <returns>The language code used for syntax highlighting.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.IsText(System.String)">
            <summary>
            Returns whether the specified filename is considered text.
            </summary>
            <param name="path">The path string to check.</param>
            <returns>Returns true if the file is a text file.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetCacheLocation(Weavy.Core.Models.Blob,System.String,System.String)">
            <summary>
            Returns the path on disk where data for the specified blob should be cached.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object.</param>
            <param name="ext">File extension (for converted files), e.g. .png.</param>
            <param name="options">Optional resize options (for resized images).</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetDirectoryPartition(System.String)">
            <summary>
            Returns a partial directory path for partitioning files based on ETag.
            </summary>
            <param name="etag">The ETag to use when partitioning, e.g. "cce45e1908cac811e6507f976d3ac9d7f6e0bd06".</param>
            <returns>A partial directory path, e.g. "CC/E4/".</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetPreviewFormat(System.String)">
            <summary>
            Returns the file extension used when previewing a file.
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetRelativePath(System.String,System.String)">
            <summary>
            Get the relative path from one file or folder to another.
            </summary>
            <param name="from">The directory that defines the start of the relative path.</param>
            <param name="to">The path that defines the endpoint of the relative path.</param>
            <returns>The relative path from the start directory to the end path or <paramref name="to"/> if the paths are not related.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.UriFormatException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.AppendDirectorySeparatorChar(System.String)">
            <summary>
            Append a slash to the specified path if the path is a directory and does not already have a slash.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.Ratio(Weavy.Core.Models.Blob)">
            <summary>
            Get the width/height ratio of an image.
            </summary>
            <param name="image">The image to calculate.</param>
            <returns>The ratio in percent.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.Convert(System.IO.FileInfo,System.String)">
            <summary>
            Convert the file to the format specified in <paramref name="extension"/>.
            </summary>
            <param name="file">The blob to convert.</param>
            <param name="extension">File extension of desired output format, e.g. .pdf</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object if the file could be converted to the specified output format; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetThumb(Weavy.Core.Models.Blob,System.Nullable{System.Int32},System.Nullable{System.Int32},Weavy.Core.Imaging.FitMode,Weavy.Core.Imaging.ScaleMode,System.Drawing.ContentAlignment,System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Returns a thumbnail image for the specified <see cref="T:Weavy.Core.Models.Blob"/>. 
            The image returned may be smaller than the size requested, depending on the size and aspect ratio of the original content.
            </summary>
            <param name="blob">The blob for which to get a thumbnail image.</param>
            <param name="width">The maximum width in pixels of the thumbnail. </param>
            <param name="height">The maximum height in pixels of the thumbnail.</param>
            <param name="fit">The constraint mode, determines how to resolve aspect ratio differences between the requested size and the original file dimensions.</param>
            <param name="scale">Controls whether the image is allowed to upscale, downscale, both, or if only the canvas gets to be upscaled.</param>
            <param name="align">How to align the image when padding or cropping.</param>
            <param name="background">The background color to apply (<c>null</c> for transparency), white will be used for jpg images when background is unspecified.</param>
            <param name="quality">The encoding quality to use, only applies to jpg images.</param>
            <param name="opacity"></param>
            <param name="ignoreICC">If true, the ICC profile of the image will be ignored.</param>
            <param name="extension">File extension to use for the thumbnail image, e.g. .png, <c>null</c> to keep same format as original image.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> pointing to a thumbnail image of the specified file, or <c>null</c> if no thumbnail was found.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetThumb(System.IO.FileInfo,System.Nullable{System.Int32},System.Nullable{System.Int32},Weavy.Core.Imaging.FitMode,Weavy.Core.Imaging.ScaleMode,System.Drawing.ContentAlignment,System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Returns a thumbnail image of the specified file.
            The image returned may be smaller than the size requested, depending on the size and aspect ratio of the original content.
            </summary>
            <param name="file">The file for which to get a thumbnail image.</param>
            <param name="width">The maximum width in pixels of the thumbnail. </param>
            <param name="height">The maximum height in pixels of the thumbnail.</param>
            <param name="fit">The constraint mode, determines how to resolve aspect ratio differences between the requested size and the original file dimensions.</param>
            <param name="scale">Controls whether the image is allowed to upscale, downscale, both, or if only the canvas gets to be upscaled.</param>
            <param name="align">How to align the image when padding or cropping.</param>
            <param name="background">The background color to apply (<c>null</c> for transparency), white will be used for jpg images when background is unspecified.</param>
            <param name="quality">The encoding quality to use, only applies to jpg images.</param>
            <param name="opacity"></param>
            <param name="ignoreICC">If true, the ICC profile of the image will be ignored.</param>
            <param name="extension">File extension to use for the thumbnail image, e.g. .png, <c>null</c> to keep same format as original image.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> pointing to a thumbnail image of the specified file, or <c>null</c> if no thumbnail was found.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetThumb(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Int32,System.Int32)">
            <summary>
            Creates a combined thumbnail image from the specified images.
            </summary>
            <param name="images">The images to use for the collage (only the first 4 images will be used).</param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetThumb(Weavy.Core.Models.IHasThumb,System.Nullable{System.Int32},System.Nullable{System.Int32},Weavy.Core.Imaging.FitMode,Weavy.Core.Imaging.ScaleMode,System.Drawing.ContentAlignment,System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Gets a thumbnail image for the specified content object.
            </summary>
            <param name="content"></param>
            <param name="width">The maximum width in pixels of the thumbnail. </param>
            <param name="height">The maximum height in pixels of the thumbnail.</param>
            <param name="fit">The constraint mode, determines how to resolve aspect ratio differences between the requested size and the original file dimensions.</param>
            <param name="scale">Controls whether the image is allowed to upscale, downscale, both, or if only the canvas gets to be upscaled.</param>
            <param name="align">How to align the image when padding or cropping.</param>
            <param name="background">The background color to apply (<c>null</c> for transparency), white will be used for jpg images when background is unspecified.</param>
            <param name="quality">The encoding quality to use, only applies to jpg images.</param>
            <param name="opacity"></param>
            <param name="ignoreICC">If true, the ICC profile of the image will be ignored.</param>
            <param name="extension">File extension used to determine thumbnail format, e.g. .png, <c>null</c> to keep same format as original image.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> pointing to a thumbnail image, or <c>null</c> if no thumbnail was found.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetThumbExtension(System.String,System.Boolean)">
            <summary>
            Helper method for figuring out best thumbnail format of a file.
            </summary>
            <param name="name"></param>
            <param name="rasterize"><c>true</c> to rasterize svgs, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.ResizeSvg(System.IO.FileInfo,System.IO.FileInfo,System.Nullable{System.Int32},System.Nullable{System.Int32},Weavy.Core.Imaging.FitMode,System.Drawing.ContentAlignment)">
            <summary>
            Returns a resized version of the specified svg image.
            </summary>
            <param name="input">The svg image to resize</param>
            <param name="output">The file where the resized svg image should be written.</param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="fit"></param>
            <param name="align"></param>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetAppIcon(System.String@)">
            <summary>
            Gets the app icon.
            </summary>
            <param name="etag"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.FileUtils.GetAvatar(Weavy.Core.Models.EntityType)">
            <summary>
             Gets the avatar image for the specified entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.HttpUtils">
            <summary>
            A helper class for downloading files and text over http which supports gzip and checks encoding header (and meta tags) in order to decode it correctly.
            Adapted from http://stackoverflow.com/a/2700707.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.HttpUtils.Download(System.String)">
            <summary>
            Downloads the resource with the specified url to a (temporary) local file.
            </summary>
            <param name="url">The url from which to download data.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.HttpUtils.Get(System.String,System.String,System.String,System.String)">
            <summary>
            Downloads text from the specified url.
            </summary>
            <param name="url"></param>
            <param name="acceptLanguage"></param>
            <param name="referer"></param>
            <param name="userAgent"></param>
            <returns>The text at <paramref name="url"/> or <c>null</c> if there was an error downloading.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HttpUtils.ProcessResponse(System.Net.HttpWebResponse)">
            <summary>
            
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.RazorUtils">
            <summary>
            Provides helper methods for executing razor templates.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.RazorUtils.#cctor">
            <summary>
            Static constructor that configures the razor engine.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.RazorUtils.Run(System.String,System.Object,System.Object)">
            <summary>
            Runs a Razor template using the specified model.
            </summary>
            <param name="templateName">Filename of template to run.</param>
            <param name="model">The model object.</param>
            <param name="viewbag">An object with additional data for the view.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.RazorUtils.HtmlTemplate`1">
            <summary>
            Template with Html.Raw() and localization support.
            </summary>
            <typeparam name="TModel"></typeparam>
        </member>
        <member name="M:Weavy.Core.Utils.RazorUtils.HtmlTemplate`1.#ctor">
            <summary>
            Initializes a new instance of the HtmlTemplate class.
            </summary>
        </member>
        <member name="P:Weavy.Core.Utils.RazorUtils.HtmlTemplate`1.Html">
            <summary>
            Gets or set a HtmlHelper object for supporting Html.Raw() in our email templates.
            </summary>
        </member>
        <member name="P:Weavy.Core.Utils.RazorUtils.HtmlTemplate`1.T">
            <summary>
            Gets the localizer for the template.
            </summary>
        </member>
        <member name="T:Weavy.Core.Utils.RazorUtils.HtmlHelper">
            <summary>
            Simple helper for supporting Html.Raw() in templates.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.RazorUtils.HtmlHelper.Raw(System.String)">
            <summary>
            Returns markup that is not HTML encoded.
            </summary>
            <param name="value">The HTML markup.</param>
            <returns>The HTML markup without encoding.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.RazorUtils.HtmlHelper.Raw(System.Web.IHtmlString)">
            <summary>
            Returns markup that is not HTML encoded.
            </summary>
            <param name="value">The HTML markup.</param>
            <returns>The HTML markup without encoding.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.HashUtils">
            <summary>
            Provides helper methods for calculating and verifying hash values.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.GenerateSalt(System.Int32)">
            <summary>
            Generates a cryptographically strong sequence of random byte values.
            </summary>
            <param name="byteLength">The number of cryptographically random bytes to generate.</param>
            <returns>The generated salt value as a base-64-encoded string.</returns>
            <remarks>Due to base-64 encoding, the returned string will contain more characters than the number of bytes requested.</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.GenerateNumericCode(System.Int32)">
            <summary>
             Generates a cryptographically strong sequence of random digits.
            </summary>
            <param name="digits">The number of digits to return (max 18).</param>
            <returns>A sequence of random digits.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.GenerateSaltInternal(System.Int32)">
            <summary>
            Generates a cryptographically strong sequence of random byte values.
            </summary>
            <param name="byteLength">The number of cryptographically random bytes to generate.</param>
            <returns>The generated salt value as a byte array.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.GenerateToken(System.DateTime)">
            <summary>
            Generates a base64url encoded validation token that expires at the specified time.
            </summary>
            <param name="expires">The date and time (UTC) when the token should no longer be valid.</param>
            <returns>A token.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.GetTokenExpiryDate(System.String)">
            <summary>
            Gets the expiration time (UTC) for the specified token.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.BinaryToHex(System.Byte[])">
            <summary>
            Converts a binary byte array to a hex string.
            </summary>
            <param name="data">The bytes to convert.</param>
            <returns>A hex string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.ByteArraysEqual(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays for equality. The method is specifically written so that the loop is not optimized. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>true if the byte arrays are equal, otherwise false.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.EncodeIterations(System.Int32)">
            <summary>
            Encodes an integer as a hex number.
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.DecodeIterations(System.String)">
            <summary>
            Decodes a hex number to an int.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.Hash(System.String,System.String)">
            <summary>
            Computes a hash value for the specified string with the given algorithm.
            </summary>
            <param name="input">The input to compute the hash code for.</param>
            <param name="algorithm">The hash algorithm to use, valid values are: sha256, sha1, md5.</param>
            <returns>The computed hash</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.Hash(System.Byte[],System.String)">
            <summary>
            Computes a hash value for the specified byte array with the given algorithm.
            </summary>
            <param name="input">The input to compute the hash code for.</param>
            <param name="algorithm">The hash algorithm to use, valid values are: sha256, sha1, md5.</param>
            <returns>The computed hash</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.MD5(System.String)">
            <summary>
            Calculates an MD5 hash.
            </summary>
            <param name="input">The input to compute the hash code for.</param>
            <returns>The computed hash</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.MD5(System.Byte[])">
            <summary>
            Calculates an MD5 hash.
            </summary>
            <param name="input">The input to compute the hash code for.</param>
            <returns>The computed hash</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.SHA1(System.String)">
            <summary>
            Calculates a SHA1 hash.
            </summary>
            <param name="input">The input to compute the hash code for.</param>
            <returns>The computed hash</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.SHA1(System.Byte[])">
            <summary>
            Calculates a SHA1 hash.
            </summary>
            <param name="input">The input to compute the hash code for.</param>
            <returns>The computed hash</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.SHA256(System.String)">
            <summary>
            Calculates a SHA256 hash.
            </summary>
            <param name="input">The input to compute the hash code for.</param>
            <returns>The computed hash</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.SHA256(System.Byte[])">
            <summary>
            Calculates a SHA256 hash.
            </summary>
            <param name="input">The input to compute the hash code for.</param>
            <returns>The computed hash</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.HashPassword(System.String,System.Nullable{System.Int32})">
            <summary>
            Generates a PBKDF2 hash for the given plain text password and returns a base64 encoded result.
            </summary>
            <param name="password">Plain text password to be hashed.</param>
            <param name="iterations">The number of iterations for the operation, <c>null</c> uses the default value <see cref="F:Weavy.Core.Utils.HashUtils.DefaultIterations"/>.</param>
            <returns>Hash value formatted as a base64 encoded string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.VerifyPassword(System.String,System.String)">
            <summary>
            Compares a hash of the specified plain text password to a given hash value. Plain text is hashed with the same salt value as the original hash.
            </summary>
            <param name="password">Plain text password to be verified against the specified hash.</param>
            <param name="hash">Base64 encoded password hash value produced by the HashPassword function.</param>
            <returns>If computed hash mathes the specified hash the function the return value is true; otherwise, the function returns false.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.IsPasswordHash(System.String)">
            <summary>
            Check if the supplied string looks like a hashed password.
            </summary>
            <param name="input">The input string to check.</param>
            <returns><c>true</c> if the input string looks like a hashed password, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HashUtils.IsTokenValid(System.String)">
            <summary>
            Verifies that the supplied token has not expired.
            </summary>
            <param name="token">A base64url encoded validation token.</param>
            <returns><c>true</c> if the validation token is still valid, or <c>false</c> if it has expired.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.Hooker">
            <summary>
            Utility class for calling hooks when various events occur.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.Hooker.Call``1(``0)">
            <summary>
            Call all hooks that are enabled and registered to handle the specified event.
            </summary>
            <typeparam name="TEvent">The type of event</typeparam>
            <param name="e">The event.</param>
        </member>
        <member name="M:Weavy.Core.Utils.Hooker.GetHooks``1">
            <summary>
            Get all hooks that are enabled and registered to handle the specified event.
            </summary>
            <typeparam name="TEvent">The type of event for which to get hooks.</typeparam>
            <returns>A list of hooks that can handle the specified event.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.HtmlExtensions">
            <summary>
            Provides helper and extension methods for working with HTML.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.PageSeparator">
            <summary>
            A string used to split a string in more and less portions.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.UsernamePattern">
            <summary>
            A regular expression pattern for validating usernames. Valid characters are [a-zA-Z0-9_]. 
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.RolePattern">
            <summary>
            A regular expression pattern for validating roles. All charachters are valid except , + " \ &lt; &gt; and ;
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.BindingPattern">
            <summary>
            A regular expression pattern for validating a binding, i.e. an IP adress or a DNS host name.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.EmailPattern">
            <summary>
            A regular expression pattern for validating an email address and splitting it in the local and domain part.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.HostPattern">
            <summary>
            A regular expression pattern for validating a DNS host name.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.IpAddressPattern">
            <summary>
            A regular expression pattern for validating an IP adress.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.SlugPattern">
            <summary>
            A regular expression pattern for validating slugs. Valid characters are [a-zA-Z0-9-_.!~'();@=$,]. 
            A slug must also start and end with a letter or digit.
            </summary>
            <remarks>
            Technically + * : &amp; are also permitted, but urls with these characters will probably be denied by the asp.net request filtering module.
            </remarks>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.UrlPattern">
            <summary>
            A regular expression pattern for validating urls.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.UriPattern">
            <summary>
            A regular expression pattern for parsing the components (scheme, host, path, query and fragment) of an url.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.LinkifyPattern">
            <summary>
            A regular expression pattern for finding urls in text.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.RootRelativeUrlPattern">
            <summary>
            A regular expression pattern for finding root-relative urls in html.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.HtmlExtensions.QuotePattern">
            <summary>
            A regular expression pattern for matching html quotes.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.CleanHtml(System.String)">
            <summary>
            Performs various cleanup functions on a html string.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.Linkify(System.String,System.String)">
            <summary>
            Wraps an &lt;a href=""&gt;&lt;/a&gt; tag with the specified rel attribute around all urls in the text.
            </summary>
            <param name="text">Text containing urls to linkify.</param>
            <param name="rel">The rel attribute to set on the anchors, e.g. "nofollow".</param>
            <returns>A string with all urls wrapped in anchors.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.LinkifyEvaluator(System.Text.RegularExpressions.Match,System.String)">
            <summary>
            Callback method for the Linkify method.
            </summary>
            <param name="m"></param>
            <param name="rel">Optional string to use as rel attribute</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.Emphasize(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Emphasizes (wraps in &lt;em&gt;&lt;/em&gt;) all matching search terms in the input text.
            </summary>
            <param name="input">The text to examine.</param>
            <param name="terms">List of words to mark in the text.</param>
            <returns>A string with all matching search termns highlighted.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.AttributeSafe(System.String)">
            <summary>
            Converts quotation marks (&quot;), ampersands (&amp;) and left angle brackets (&lt;) to equivalent character entities.
            The result should be used only for attributes that are in double quotation marks.
            </summary>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.HtmlSafe(System.String,System.Boolean)">
            <summary>
            Converts ampersands (&amp;), left angle brackets (&lt;), right angle brackets (&gt;) and optionally line breaks (\n) to equivalent character entities.
            </summary>
            <param name="text">The text to convert.</param>
            <param name="br">When <c>true</c> converts line breaks to &lt;br /&gt;</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.GetDataUris(System.String)">
            <summary>
            Returns a collection of data-uris found in the specified html string, see https://tools.ietf.org/html/rfc2397.
            </summary>
            <param name="html">The html string to parse.</param>
            <returns>A collection of data uris.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.GetLinks(System.String)">
            <summary>
            Returns a string collection of links (&lt;a href=""&gt;&lt;/a&gt;) within the specified text.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A string collection with the urls in the specified text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.GetMatchingText(System.String,System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>Gets a relevant section of text related to the search terms.</summary>
            <param name="input">Text to examine.</param>        
            <param name="length">Number of characters to return.</param>
            <param name="terms">Search terms to look for.</param>
            <returns>Returns the relevant text with the found query words marked as bold.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.ShortenUrl(System.String,System.Int32)">
            <summary>
            Shortens a url for display.
            </summary>
            <param name="url">The URL to shorten.</param>
            <param name="max">Maximum size for the url. Anything longer gets shortened.</param>
            <returns>The shortened url.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.StripHtml(System.String,System.Boolean)">
            <summary>
            Returns a string with all HTML tags and comments removed.  
            This is useful for displaying HTML in plain text and stripping formatting like bold and italics.
            </summary>
            <param name="html">The string to strip of HTML.</param>
            <param name="br"><c>true</c> to keep line breaks, otherwise <c>false</c>.</param>
            <returns>The stripped string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.NextCharBeginsHtmlTag(System.String,System.Int32)">
            <summary>
             Checks if the next char in the html string begins a tag.
            </summary>
            <param name="html">The html string.</param>
            <param name="i">The char index.</param>
            <returns>A boolean.</returns>
            <remarks>Helper method for StripHtml</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.IsAttributeValueStartCharacter(System.Char)">
            <summary>
            Checks if the specified char is an attribute start char.
            </summary>
            <param name="c">The char to check.</param>
            <returns>A boolean.</returns>
            <remarks>Helper method for StripHtml</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.IsAttributeValueEndCharacter(System.Char,System.Char)">
            <summary>
            Checks if the specified char is an attribute end char.
            </summary>
            <param name="c">The char to check.</param>
            <param name="attributeStartChar">The char that started the attribute.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.IsHtmlTagBeginCharacter(System.Char)">
            <summary>
            Checks if the specified char is a html tag begin char.
            </summary>
            <param name="c">The char to check.</param>
            <returns>A boolean.</returns>
            <remarks>Helper method for StripHtml</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.IsEnglishLetter(System.Char)">
            <summary>
            Checks if the specified char is an english letter [a-zA-Z].
            </summary>
            <param name="nextChar">The char to check.</param>
            <returns>A boolean.</returns>
            <remarks>Helper method for StripHtml</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.ToAbsoluteUrls(System.String,System.String)">
            <summary>
            Converts all relative urls within the provided html string to absolute urls.
            </summary>
            <param name="html">Html containing urls to convert.</param>
            <param name="baseurl">The base url to insert before all relative urls, e.g. http://www.tempuri.org/. When <c>null</c> <see cref="P:Weavy.Core.Services.ConfigurationService.ApplicationUrl"/> is used.</param>
            <example>Converts href="/path/to/foo.jpg" to href="http://www.tempuri.org/path/to/foo.jpg"</example>
            <returns>A string with all relative urls converted to absolute urls.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.FixBlobUrls(System.String,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Attachment})">
            <summary>
            Replace urls pointing to blobs with urls pointing to corresponding attachments (if possible).
            </summary>
            <param name="html">Html containing urls to convert.</param>
            <param name="attachments">Attachments to use as lookup when replacing urls.</param>
            <example>Converts href="/blobs/1/foo.jpg" to href="/attachments/2/foo.jpg".</example>
            <returns>A string with all blob urls converted to attachment urls.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.RemoveLinks(System.String)">
            <summary>
            Remove all anchors from the specified html string but preserve other content.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.TruncateQuotes(System.String,System.Int32)">
            <summary>
            Will truncate the content of any q-tag.
            </summary>
            <param name="input">The string to truncate.</param>
            <param name="length">The length to truncate to.</param>
            <returns>A truncated result string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.TruncateQuotesAndConvertEmojiToImage(System.String,System.Int32)">
            <summary>
            Will truncate the content of any q-tag and also convert emoji in the quoted text to images.
            </summary>
            <param name="input">The string to truncate.</param>
            <param name="length">The length to truncate to.</param>
            <returns>A truncated result string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.FixUrlWithoutProtocol(System.String,System.String)">
            <summary>
            Fixes urls without protocol, e.g. www.weavy.com => http://www.weavy.com
            </summary>
            <param name="url"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.GetHtmlForEmail(Weavy.Core.Models.Notification)">
            <summary>
            Helper method that makes the notification suitable for sending in emails
            </summary>
            <param name="notification"></param>
        </member>
        <member name="M:Weavy.Core.Utils.HtmlExtensions.GetHtmlForEmail(Weavy.Core.Models.Message)">
            <summary>
            Helper method that makes the message suitable for sending in emails.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Weavy.Core.Utils.Locker">
            <summary>
            A simple utility class that helps us take a lock on strings like file paths etc.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.Locker.GetObject(System.String)">
            <summary>
            Gets an object to lock on for the specified string.
            </summary>
            <param name="name">The string you want to lock on.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.TeamsApiUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.TeamsApiUtils.Authorize(System.String)">
            <summary>
            Authorize and get an access token
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.TeamsApiUtils.RefreshToken(System.String)">
            <summary>
            Refresh the token
            </summary>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.TeamsApiUtils.CreateMeeting(System.String)">
            <summary>
            Create a new meeting
            </summary>        
            <param name="topic"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.TeamsApiUtils.GetUser(System.String)">
            <summary>
            Get Zoom user data
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.TeamsApiUtils.Get``1(System.String,System.String,System.Boolean)">
            <summary>
            Get from api
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri"></param>
            <param name="bearer"></param>
            <param name="refresh"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.TeamsApiUtils.Post``1(System.String,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Boolean)">
            <summary>
            Post to api
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">The uri to use</param>
            <param name="bearer">The bearer to pass in to the auth header</param>
            <param name="jsonPayload">A json payload</param>
            <param name="formPayload">A form payload</param>
            <param name="authHeaderType">The type of authe header to use</param>
            <param name="refresh">If the token should be refreshed upon unsuccessful response</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.TeamsApiUtils.SetUser(Weavy.Core.Models.Token)">
            <summary>
            Set user meta data
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.UserUtils">
            <summary>
            Provides extension and helper methods for working with <see cref="T:Weavy.Core.Models.User"/>s.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.UserUtils.GetSettings(Weavy.Core.Models.User)">
            <summary>
            Get settings from the user profile
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UserUtils.SetSettings(Weavy.Core.Models.User,Weavy.Core.Models.UserSettings)">
            <summary>
            Store user settings in the user profile.
            </summary>
            <param name="user"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Weavy.Core.Utils.UserUtils.MergeSettings(Weavy.Core.Models.User,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Merges settings into user profile.
            </summary>
            <param name="user"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UserUtils.IsAuthenticated(Weavy.Core.Models.User)">
            <summary>
            Helper method for deciding whether a user is authenticated or not.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UserUtils.IsSuperUser(Weavy.Core.Models.User)">
            <summary>
            Gets a value indicating whether a user is a super user and has unrestricted access to everything.
            </summary>
            <param name="user">The user to check.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.PluginUtils">
            <summary>
            Provides helper and extension methods for working with plugins.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.IsCore(Weavy.Core.Models.IPlugin)">
            <summary>
             Gets a value indicating whether this is a core extension (that cannot be disabled).
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.IsLoaded(Weavy.Core.Models.IPlugin)">
            <summary>
            Returns a value indicating if the specified plugin has been loaded into the AppDomain.
            </summary>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.IsRunning(Weavy.Core.Models.IDaemon)">
            <summary>
            Returns a value indicating whether the daemon is running.
            </summary>
            <param name="daemon"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.IsRunnable(Weavy.Core.Models.IDaemon)">
            <summary>
            Returns a value indicating whether a daemon is in a state where it is safe to run.
            </summary>
            <param name="daemon"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.IsRunnable(Weavy.Core.Models.IFunction)">
            <summary>
            Returns a value indicating whether a function is in a state where it is safe to run.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.Status(Weavy.Core.Models.IDaemon)">
            <summary>
            Returns a status string.
            </summary>
            <param name="daemon"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.Status(Weavy.Core.Models.IFunction)">
            <summary>
            Returns a status string.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.HasTimedOut(Weavy.Core.Models.IDaemon)">
            <summary>
            Returns a value indicating whether the daemon has timed out.
            </summary>
            <param name="daemon"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.NextRun(Weavy.Core.Models.IDaemon)">
            <summary>
            Returns next time the daemon is scheduled to run.
            </summary>
            <param name="daemon"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.GetGroups(Weavy.Core.Models.IPlugin)">
            <summary>
             Gets the names for the groups used to group scaffolded plugin properties in the UI.
            </summary>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.PluginUtils.HasGroup(Weavy.Core.Models.IPlugin,System.String)">
            <summary>
             Returns a value indicating if the plugin has any scaffolded property with the specified group name.
            </summary>
            <param name="plugin"></param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.ReflectionUtils">
            <summary>
            Provides extensions and helper methods for working with reflection.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.GetCallingType(System.Int32)">
            <summary>
             Gets the calling type.
             </summary>
             <param name="skipFrames"></param>
            <returns>The calling type.</returns>
            <remarks>This is a slow-running method. Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.ControlParameters(System.Reflection.PropertyInfo)">
            <summary>
            Gets the control parameters specified by the UIHintAttribute.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.DefaultValue(System.Reflection.PropertyInfo)">
            <summary>
            Gets the default value of the property.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.DisplayName(System.Type)">
            <summary>
            Gets a friendly name for the type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.JsonName(System.Reflection.PropertyInfo)">
            <summary>
            Gets the name of the property when serialized to Json.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Accept(System.Reflection.PropertyInfo)">
            <summary>
            Gets the unique file type specifiers that the file input should accept.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.GetEmbeddedFile(System.String,System.Reflection.Assembly)">
            <summary>
            Returns the content of the embedded file as a string.
            </summary>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.GetPropertyInfo(System.Object,System.String)">
            <summary>
            Get the named property from the specified object.
            </summary>
            <param name="obj">The object from which to get property info.</param>
            <param name="name">Name of the property to get.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.GetPropertyInfos(System.Object)">
            <summary>
            Get all properties with public getters and setters where the property type is supported as defined by <c>PropertyDictionary.IsTypeSupported()</c>).
            </summary>
            <param name="obj">The object from which to get properties.</param>
            <returns>An array of <see cref="T:System.Reflection.PropertyInfo"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.ApiBind(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value indicating whether the property should be bound in Web API or not. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Group(Weavy.Core.Models.Property)">
            <summary>
             Gets the name used to group properties in the UI.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Group(System.Reflection.PropertyInfo)">
            <summary>
            Gets the name used to group properties in the UI.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Index(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value indicating whether the field should be included in the fulltext index.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.IsHidden(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value indicating whether the property is hidden or not.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.IsEditable(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value indicating whether the property is editable or not.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.IsRequired(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value indicating whether the property is required or not. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.MinLength(System.Reflection.PropertyInfo)">
            <summary>
            Gets the minimum length of a string property. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.MaxLength(System.Reflection.PropertyInfo)">
            <summary>
            Gets the maximum length of a string property. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.MinValue(System.Reflection.PropertyInfo)">
            <summary>
            Gets the minimum value of the property. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.MaxValue(System.Reflection.PropertyInfo)">
            <summary>
            Gets the maximum value of the property. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Order(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value that decides the order in which the property will appear in lists.
            </summary>
            <remarks>
            Columns are sorted in increasing order based on the order value.
            Negative values are valid and can be used to position a column before all non-negative columns. 
            If an order is not specified, presentation layers should consider using the value 10000. 
            This value lets explicitly-ordered fields be displayed before and after the fields that do not have a specified order.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.PlaceholderImage(System.Reflection.PropertyInfo)">
            <summary>
            Gets the placeholder image for file uploads.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.MaxSize(System.Reflection.PropertyInfo)">
            <summary>
            Gets the maximum file size of the property.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Pattern(System.Reflection.PropertyInfo)">
            <summary>
            Gets the regular expression pattern that the property must match.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.PropsValueFactory(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Scaffold(System.Reflection.PropertyInfo)">
            <summary>
            Gets a value indicating whether the property should be scaffolded or not.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Set the value of the specified property on the specified object.
            </summary>
            <param name="obj">The object on which to set a property value.</param>
            <param name="name">Name of the property to set.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Set the value of the specified property on the specified object.
            </summary>
            <param name="obj">The object on which to set a property value.</param>
            <param name="prop">The property to set.</param>
            <param name="value">The value to set.</param>
            <remarks>If the property type does not match the value, this method will do it's best to convert the value so that it can be set.</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Template(Weavy.Core.Models.Property)">
            <summary>
            Gets the name of the template used to display or edit the property.
            </summary>
            <remarks>
            Returns the name of the template used to display or edit the property; or null if no template exists for the property.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Template(System.Reflection.PropertyInfo)">
            <summary>
            Gets the name of the template used to display or edit the property.
            </summary>
            <remarks>
            Returns the name of the template used to display or edit the property; or <c>null</c> if no template exists for the property.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Utils.ReflectionUtils.Template(System.Type)">
            <summary>
            Returns the name of the template used to display or edit properties with the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.SerializationUtils">
            <summary>
            Provides extension and helper methods for serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.SerializationUtils.DefaultJsonSerializerSettings">
            <summary>
            Gets the default json serializer settings used by Weavy. Output is in snake_case and pretty printed (indented).
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.SerializationUtils.JavascriptSerializerSettings">
            <summary>
            Gets a json serializer that uses camelCase suitable for Javascript.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.SerializationUtils.DefaultJsonSerializerSettingsWithoutPrettyPrint">
            <summary>
            Gets a json serializer that uses snake_case but does not pretty print the output.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.SerializationUtils.ExpandoJsonSerializerSettings">
            <summary>
            Gets the json serializer settings used when serializing expandos.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.SerializationUtils.Deserialize(System.Byte[])">
            <summary>
            Deserializes the specified byte array into an object graph.
            </summary>       
            <param name="bytes">The serialized object.</param>
            <returns>Returns an instance of the specified type.</returns>
            <remarks>Uses the BinaryFormatter.</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.SerializationUtils.Deserialize``1(System.Byte[])">
            <summary>
            Deserializes the specified byte array into an object graph.
            </summary>       
            <typeparam name="T">The type of data to deserialize.</typeparam>
            <param name="bytes">The serialized object.</param>
            <returns>Returns an instance of the specified type.</returns>
            <remarks>Uses the BinaryFormatter.</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.SerializationUtils.Serialize(System.Object)">
            <summary>
            Serializes an object, or graph of connected objects, to a byte array.
            </summary>
            <param name="graph">The object that contains the data to serialize.</param>
            <returns>An byte array representation of the graph.</returns>
            <remarks>Uses the BinaryFormatter.</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.SerializationUtils.SerializeToJson(System.Object,System.Nullable{Newtonsoft.Json.Formatting},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes an object, or graph of connected objects, to a json string.
            </summary>
            <param name="graph">The object that contains the data to write to the json string.</param>
            <param name="formatting">The formatting options to use when serializing to json.</param>
            <param name="settings">The json serializer settings to use, <c>null</c> for default settings.</param>
            <returns>A json representation of the graph.</returns>
            <remarks>Uses JSON.NET.</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.SerializationUtils.SerializeToJs(System.Object,System.Nullable{Newtonsoft.Json.Formatting},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes an object, or graph of connected objects, to a javascript object string.
            The main difference between this method and <see cref="M:Weavy.Core.Utils.SerializationUtils.SerializeToJson(System.Object,System.Nullable{Newtonsoft.Json.Formatting},Newtonsoft.Json.JsonSerializerSettings)"/> is that object names are not quoted.
            </summary>
            <param name="graph">The object that contains the data to write to the json string.</param>
            <param name="formatting">The formatting options to use when serializing to json.</param>
            <param name="settings"></param>
            <returns>A string representation of the graph.</returns>
            <remarks>Uses JSON.NET.</remarks>
        </member>
        <member name="M:Weavy.Core.Utils.SerializationUtils.DeserializeFromJson``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the specified json string into an object graph.
            </summary>       
            <typeparam name="T">The type of data to deserialize.</typeparam>
            <param name="json">The json serialized object.</param>
            <param name="settings">The json serializer settings to use, <c>null</c> for default settings.</param>
            <returns>Returns an instance of the specified type.</returns>
            <remarks>Uses JSON.NET.</remarks>
        </member>
        <member name="T:Weavy.Core.Utils.StringUtils">
            <summary>
            Provides extension and helper methods for working with strings.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.StringUtils.QuotePattern">
            <summary>
            A regular expression pattern for matching quotes.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.AsNullableBool(System.String)">
            <summary>
            Helper method for converting a string to a nullable bool.
            </summary>
            <param name="input">The input string.</param>
            <returns>The value as a nullable bool.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.AsNullableDateTime(System.String)">
            <summary>
            Helper method for converting a string to a nullable date.
            </summary>
            <param name="input">The input string.</param>
            <returns>The value as a nullable date.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.AsNullableGuid(System.String)">
            <summary>
            Helper method for converting a string to a nullable Guid.
            </summary>
            <param name="input">The input string.</param>
            <returns>The value as a nullable Guid.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.AsNullableInt(System.String)">
            <summary>
            Helper method for converting a string to a nullable int.
            </summary>
            <param name="input">The input string.</param>
            <returns>The value as a nullable int.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.AsNullableLong(System.String)">
            <summary>
            Helper method for converting a string to a nullable long.
            </summary>
            <param name="input">The input string.</param>
            <returns>The value as a nullable long.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.AsEnum``1(System.String)">
            <summary>
            Helper method for converting a string to an enum of type <typeparamref name="TEnum"/>.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert input.</typeparam>
            <param name="input">The input string to convert.</param>
            <returns>An object of type <typeparamref name="TEnum"/> or <c>null</c> if the conversion fails.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ToQueryString(System.String)">
            <summary>
            Parses a query string into a <see cref="T:System.Collections.Specialized.NameValueCollection"/> using UTF8 encoding.
            </summary>
            <param name="query">The query string to parse.</param>
            <returns>A <see cref="T:System.Collections.Specialized.NameValueCollection"/> of query parameters and values.</returns>
            <remarks>
              The ParseQueryString method uses UTF8 format to parse the query string In the returned NameValueCollection, 
              URL-encoded characters are decoded and multiple occurrences of the same query string parameter are listed 
              as a single entry with a comma separating each value.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.AddLeading(System.String,System.String)">
            <summary>
            Appends a string before the text if it does not already exist.
            </summary>
            <param name="original">Required. The string expression to append to.</param>
            <param name="append">The string to append.</param>
            <returns>A string containing the original and appended string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.AddTrailing(System.String,System.String)">
            <summary>
            Appends a string after the text if it does not already exist.
            </summary>
            <param name="original">Required. The string expression to append to.</param>
            <param name="append">The string to append.</param>
            <returns>A string containing the original and appended string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.AddTrailingSlash(System.String)">
            <summary>
            Adds a slash after the text if it does not already exist.
            </summary>
            <param name="original">Required. String expression from where a slash is added.</param>
            <returns>A string containing a trailing slash.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Base64Encode(System.String,System.Boolean)">
            <summary>
            Encodes a string to base-64.
            </summary>
            <param name="input">The input string to base64 encode.</param>
            <param name="url"><c>true</c> to use base64url encoding, <c>false</c> to use standard base64 encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Base64Decode(System.String,System.Boolean)">
            <summary>
            Decodes a base-64 string.
            </summary>
            <param name="input">The input string to base64 decode.</param>
            <param name="url"><c>true</c> to use base64url encoding, <c>false</c> to use standard base64 encoding.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Ellipsis(System.String,System.Int32)">
            <summary>
               Trims a string after a specific length and appends the 
               horizontal ellipsis character (U+2026) to the end of the string.
            </summary>
            <param name="input">Text to trim.</param>
            <param name="length">Number of characters to keep of the text.</param>
            <returns>Returns the trimmed string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Truncate(System.String,System.Int32)">
            <summary>
            Trims a string after a specific length.
            </summary>
            <param name="input">Text to trim.</param>
            <param name="length">Number of characters to keep of the text.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Replicate(System.String,System.Int32)">
            <summary>
            Repeats the specified string a specified number of times.
            </summary>
            <param name="input">The string to replicate</param>
            <param name="count">The number of times to repeat the <paramref name="input"/> string.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Reverse(System.String)">
            <summary>
            Reverses a string.
            </summary>
            <param name="input">Text to reverse.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Quote(System.String,System.Boolean)">
            <summary>
            Surrounds the string with quotation marks.
            </summary>
            <param name="input"></param>
            <param name="html">Set to <c>true</c> to return the input wrapped in a &lt;q&gt;...&lt;/q&gt; element, otherwise regular quotation marks “...” are used to wrap the input.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ExtractQuote(System.String,System.Boolean)">
            <summary>
            Returns content of first quote in input string.
            </summary>
            <param name="input">The string from which to extract quote.</param>
            <param name="html">Set to <c>true</c> if the input text is html and the quote is wrapped in a &lt;q&gt;...&lt;/q&gt; element, or <c>false</c> if regular quotation marks “...” are used.</param>
            <returns>The quoted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Usernameify(System.String)">
            <summary>
            Strips invalid username characters from a string.
            </summary>
            <param name="input">The string to strip.</param>
            <returns>A string with valid username chars.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.SingularizeOrPluralize``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Boolean)">
            <summary>
            Returns a string with the number of items in the collection and the singular of plural postfix.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="plural"></param>
            <param name="singular"></param>
            <param name="excludeCount"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.SingularizeOrPluralize(System.Nullable{System.Int64},System.String,System.String,System.Boolean)">
            <summary>
            Returns a string with the number of items and the singular or plural postfix.
            </summary>
            <param name="count"></param>
            <param name="singular"></param>
            <param name="plural"></param>
            <param name="excludeCount"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.PastTense(System.String)">
            <summary>
            Returns the past tense of the specified verb.
            </summary>
            <param name="verb">A present tense verb, e.g. "create"</param>.
            <returns>The past tense of the verb, e.g. "created".</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Slugify(System.String,System.Boolean)">
            <summary>
            Returns a URL friendly version of the input string.
            </summary>
            <param name="input">The string to create url slug for</param>
            <param name="file">Set to <c>true</c> when the input string contains a filename and you want the slug to end with the extension of the filename, e.g. "uploaded-file.txt" or "uploaded-file.pdf".</param>
            <returns>An url friendly version of the input string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Transliterate(System.String)">
            <summary>
            Transliterate a Unicode string into ASCII.
            </summary>
            <param name="input">The string to transliterate.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.RandomAscii(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Generates a random ascii string.
            </summary>
            <param name="length">The total length of the generated string.</param>
            <param name="digits">The minimum number of digits in the generated string</param>
            <param name="lowers">The minimum number of lower case letters in the generated string.</param>
            <param name="uppers">The minimum number of upper case letters in the generated string</param>
            <param name="specials">The exact number of special characters in the generated string.</param>
            <param name="ambiguous"><c>true</c> to allow ambiguous chars, e.g. l and I, 0 and O etc, otherwise <c>false</c>.</param>
            <returns>A random string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.RemoveDoubleCharacter(System.String,System.Char)">
            <summary>
            Removes any double instances of the specified character. 
            So "--" becomes "-" if the character is '-'.
            </summary>
            <param name="text">The text with characters to remove.</param>
            <param name="character">The character to remove.</param>
            <returns>A string with duplicate characters removed.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.RemoveLeading(System.String,System.String,System.Nullable{System.StringComparison})">
            <summary>
            Removes leading text from a string.
            </summary>
            <param name="original">The string to remove from.</param>
            <param name="leading">The string to remove.</param>
            <param name="comparisonType">One of the enumeration values that determines how strings are compared.</param>
            <returns>A string with the leading text removed.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.RemoveTrailing(System.String,System.String,System.Nullable{System.StringComparison})">
            <summary>
            Removes trailing text from a string.
            </summary>
            <param name="original">The string to remove from.</param>
            <param name="trailing">The string to remove.</param>
            <param name="comparisonType">One of the enumeration values that determines how strings are compared.</param>
            <returns>A string with the trailing text removed.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.RemoveTrailingSlash(System.String)">
            <summary>
            Removes trailing slash from a string.
            </summary>
            <param name="original">The string to remove from.</param>
            <returns>A string the trailing slash removed.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.TrimInside(System.String,System.Boolean)">
            <summary>
            Removes all duplicate white-space (replacing it with single space) from the string. Also removes all leading and trailing whitespace. 
            </summary>
            <param name="text">The text with white-space to remove.</param>
            <param name="br"><c>true</c> to keep line breaks, otherwise <c>false</c>.</param>
            <returns>A string with duplicate white-space replaced with a single space or <c>null</c> if the text contained only whitespace.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.SplitUppercase(System.String)">
            <summary>
            Parses a camel cased or pascal cased string and returns an array 
            of the words within the string.
            </summary>
            <example>
            The string "PascalCasing" will return an array with two 
            elements, "Pascal" and "Casing".
            </example>
            <param name="source">The string to split.</param>
            <returns>An array of strings.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ToCamelCase(System.String)">
            <summary>
             Returns the camelCased version of a string, see http://en.wikipedia.org/wiki/Camel_case.
            </summary>
            <example>
            The string "camel case" will return the string "camelCase".
            </example>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ToPascalCase(System.String)">
            <summary>
             Returns the PascalCased (upper camel cased) version of a string.
            </summary>
            <example>
            The string "pascal case" will return the string "PascalCase".
            </example>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ToSentenceCase(System.String)">
            <summary>
            Returns the sentence cased version of a string, i.e. a string where the first letter of the first word is capitalized.
            </summary>
            <example>
            The string "sentence cased string" will return the string "Sentence cased string".
            </example>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ToSnakeCase(System.String)">
            <summary>
            Returns the snake_cased version of a string. See http://en.wikipedia.org/wiki/Snake_case.
            </summary>
            <example>
            The string "A SnakeCased String" will return the string "a_snake_cased_string".
            </example>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ToSpinalCase(System.String)">
            <summary>
            Returns the spinal-cased version of a string. Spinal case is similar to snake_case, but underscores are replaced with dashes.
            </summary>
            <example>
            The string "A SpinalCased string" will return the string "a-spinal-cased-string".
            </example>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ToKebabCase(System.String)">
            <summary>
            Returns the kebab-cased version of a string. Converts text to lowercase then replaces spaces with dashes.
            </summary>
            <example>
            The string "A KebabCased string" will return the string "a-kebabcased-string".
            </example>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ToSpaceCase(System.String)">
            <summary>
            Returns the space-cased version of a string. Space case is similar to snake_case, but underscores are replaced with spaces.
            </summary>
            <example>
            The string "A SpaceCased string" will return the string "a space cased string".
            </example>
            <param name="text">The text to convert.</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.ToTitleCase(System.String,System.Boolean)">
            <summary>
            Converts text to title case.
            </summary>
            <example>
            The string "title case" will return the string "Title Case".
            </example>
            <param name="text">The text to convert.</param>
            <param name="onlyFirstLetter">Only change first letter of words</param>
            <returns>The converted text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Left(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the left side of a string.
            </summary>
            <param name="str">Required. String expression from which the leftmost characters are returned.</param>
            <param name="length">Required. Integer greater than 0. Numeric expression 
            indicating how many characters to return. If 0, a zero-length string ("") 
            is returned. If greater than or equal to the number of characters in Str, 
            the entire string is returned. If str is null, this returns null.</param>
            <returns>The specified number of characters from the left side of a string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length is less than 0</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if str is null.</exception>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Right(System.String,System.Int32)">
            <summary>
            Returns a string containing a specified number of characters from the right side of a string.
            </summary>
            <param name="original">Required. String expression from which the rightmost characters are returned.</param>
            <param name="length">Required. Integer greater than 0. Numeric expression 
            indicating how many characters to return. If 0, a zero-length string ("") 
            is returned. If greater than or equal to the number of characters in Str, 
            the entire string is returned. If str is null, this returns null.</param>
            <returns>The specified number of characters from the right side of a string.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length is less than 0</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if str is null.</exception>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.RightAfter(System.String,System.String,System.Nullable{System.StringComparison})">
            <summary>
            Returns a string containing every character within a string after the 
            first occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the rightmost characters are returned.</param>
            <param name="search">The string where the end of it marks the characters to return.  
            If the string is not found, the whole string is returned.</param>
            <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
            <returns>A string containing every character within the original string after the first occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.RightAfterLast(System.String,System.String,System.Nullable{System.StringComparison})">
            <summary>
            Returns a string containing every character within a string after the 
            last occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the rightmost characters are returned.</param>
            <param name="search">The string where the end of it marks the characters to return. 
            If the string is not found, the whole string is returned.</param>
            <param name="comparisonType">Specifies the culture, case, and sort rules to be used.</param>
            <returns>A string containing every character within the original string after the last occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.RightAfterLast(System.String,System.String,System.Int32,System.Nullable{System.StringComparison})">
            <summary>
            Returns a string containing every character within a string after the
            last occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the rightmost characters are returned.</param>
            <param name="search">The string where the end of it marks the
            characters to return.  If the string is not found, the whole string is
            returned.</param>
            <param name="startIndex">The start index.</param>
            <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
            <returns>A string containing every character within the original string after the last occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.LeftBefore(System.String,System.String,System.Nullable{System.StringComparison})">
            <summary>
            Returns a string containing every character within a string before the 
            first occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the leftmost characters are returned.</param>
            <param name="search">The string where the beginning of it marks the characters to return. If the string is not found, the whole string is returned.</param>
            <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
            <returns>A string containing every character within the original string before the first occurrence of the search string.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if str or searchstring is null.</exception>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.LeftBeforeLast(System.String,System.String,System.Nullable{System.StringComparison})">
            <summary>
            Returns a string containing every character within a string before (left) the
            last occurrence of another string.
            </summary>
            <param name="original">Required. String expression from which the leftmost characters are returned.</param>
            <param name="search">The string where the beginning of it marks the
            characters to return.  If the string is not found, the whole string is
            returned.</param>
            <param name="comparisonType">Determines whether or not to use case sensitive search.</param>
            <returns>A string containing every character within the original string before the last occurrence of the search string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.SplitTags(System.String)">
            <summary>
            Split a comma separated string into an alphabetically sorted list of tags.
            </summary>
            <param name="tags">The string to split.</param>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.SplitAndTrim(System.String)">
            <summary>
            Splits a comma separated string and trims leading and trailing whitespace characters.
            </summary>
            <param name="input">The string to split.</param>
            <returns>A list of strings.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.GetIndefinateArticle(System.String)">
            <summary>
            Naive attempt to get the indefinite article of a noun.
            </summary>
            <param name="noun"></param>
            <returns>The string "a" or "an".</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Returns true if the the specified string contains the contained string.
            </summary>
            <param name="container">The container string.</param>
            <param name="contained">The contained string.</param>
            <param name="comparison">Case sensitivity.</param>
            <returns>Returns <code>true</code> if the container string contains the contained string.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.IsNullOrEmpty(System.String)">
            <summary>
            Indicates if the specified string is <c>null</c> or an empty string.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates if the specified string is <c>null</c>, empty or consists only of white-space characters.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.NamedFormat(System.String,System.Object)">
            <summary>
            Formats a string with named parameters instead of indexed.
            </summary>
            <param name="format">The format string.</param>
            <param name="source">The object to format.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.FormatWith(System.String,System.Object[])">
            <summary>
            Extension method that wraps string.Format().
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.StringUtils.FormatNumericCode(System.String)">
            <summary>
            Format a numeric code, e.g. 884902 -> 884-902
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.TweetUtils">
            <summary>
            Provides extension and helper methods for working with tweets.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.TweetText(System.String)">
            <summary>
            Cleanup the provided plain text by trimming leading and ending whitespace, converting unicode emoji to shortnames etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.TweetHtml(System.String,System.Boolean)">
            <summary>
            Convert the plain text tweet to HTML by autolinking @mentions, #hashtags, $cashtags and urls. 
            Also converts emoji shortname to img.
            </summary>
            <param name="text"></param>
            <param name="blank"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.ExtractCashtags(System.String)">
            <summary>
            Extract $cashtags from the provided text.
            </summary>
            <param name="text">text from which to extract cashtags</param>
            <returns>List of cashtags referenced (without the leading $ sign)</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.ExtractHashtags(System.String)">
            <summary>
            Extract #hashtags from the provided text.
            </summary>
            <param name="text">text from which to extract hashtags</param>
            <returns>List of hashtags referenced (without the leading # sign)</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.ExtractMentions(System.String)">
            <summary>
            Extract @mentions from the provided text.
            </summary>
            <param name="text">text from which to extract mentions</param>
            <returns>List of user- or groupnames referenced (without the leading @ sign)</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.ExtractTo(System.String)">
            <summary>
            Extract a @mentioned username from the beginning of the provided text (preceded by 0 or more spaces).
            </summary>
            <param name="text">text from which to extract a mention.</param>
            <returns>First username referenced, if any (without the leading @ sign). Returns null if the text does not start with a @mention.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.ExtractUrls(System.String)">
            <summary>
            Extract urls from the provided text.
            </summary>
            <param name="text">text from which to extract urls</param>
            <returns>List of urls in the provided text.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.ExtractTokens(System.String,System.Boolean)">
            <summary>
            Extract urls, #hashtags, @mentions and $cashtags from the provided text.
            </summary>
            <param name="text">text from which to extract tokens</param>
            <param name="quoted"><c>true</c> to extract tokens from “quoted” text, otherwise <c>false</c></param>
            <returns>A list of tokens</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.AutoLink(System.String,System.Boolean,System.Boolean)">
            <summary>
             Auto-link @mentions, #hashtags, $cashtags and urls.
            </summary>
            <param name="text">text of the Tweet to auto-link</param>
            <param name="br">When <c>true</c> converts line breaks to &lt;br /&gt;</param>
            <param name="blank">When <c>true</c>, decorates all links with target="_blank"</param>
            <returns>text with auto-link HTML added</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.AutoLinkCashtags(System.String)">
            <summary>
            Auto-link $cashtags in the provided text.
            </summary>
            <param name="text">text to auto-link</param>
            <returns>text with auto-link HTML added</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.AutoLinkHashtags(System.String)">
            <summary>
            Auto-link #hashtags in the provided text.
            </summary>
            <param name="text">text to auto-link</param>
            <returns>text with auto-link HTML added</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.AutoLinkMentions(System.String)">
            <summary>
            Auto-link @mentions in the provided text.
            </summary>
            <param name="text">text to auto-link</param>
            <returns>text with auto-link HTML added</returns>
        </member>
        <member name="M:Weavy.Core.Utils.TweetUtils.AutoLinkUrls(System.String)">
            <summary>
            Auto-link urls in the provided text.
            </summary>
            <param name="text">text to auto-link</param>
            <returns>text with auto-link HTML added</returns>
        </member>
        <member name="T:Weavy.Core.Utils.LinkAttributeModifier">
            <summary>
            Modifies links for our purposes.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.LinkAttributeModifier.Modify(Weavy.Core.TwitterText.Token,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="token"></param>
            <param name="attributes"></param>
        </member>
        <member name="T:Weavy.Core.Utils.Unidecoder">
            <summary>
            Internal class that helps with transliterating unicode to ascii.
            </summary>
        </member>
        <member name="T:Weavy.Core.Utils.UrlUtils">
            <summary>
            Provides extension and helper methods for working with urls.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.UrlUtils.AvatarSize">
            <summary>
             Default avatar size.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ApplicationUrl(System.Boolean)">
            <summary>
            Returns the base url to the installation.
            </summary>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.AvatarUrl(Weavy.Core.Models.IHasAvatar,System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an url to the avatar image for the specified object. 
            </summary>
            <param name="obj">The object for which to return a thumbnail url.</param>
            <param name="size">The size constraint.</param>
            <param name="retina">If <c>true</c>, the thumbnail image is created with 2x resolution.</param>
            <param name="absolute"><c>true</c> to generate an absolute url, otherwise <c>false</c></param>
            <param name="cachebust"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.Breadcrumbs(Weavy.Core.Models.IEntity,System.Boolean,System.Boolean)">
            <summary>
            Returns the breadcrumb segments for en entity.
            </summary>
            <param name="entity">The entity for which to get breadcrumbs.</param>
            <param name="space"><c>true</c> to include space as first breadcrumb.</param>
            <param name="self"><c>true</c> to include <paramref name="entity"/> as last breadcrumb.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.AddCachebustingParameter(System.String,System.String)">
            <summary>
            Appends a cachebusting query string parameter to the specified <paramref name="url"/>.
            </summary>
            <param name="url">The url where we sould append a cacehbusting parameter.</param>
            <param name="etag">Etag used to generate cachebusting parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.CommentsUrl(Weavy.Core.Models.ICommentable,System.Boolean)">
            <summary>
            Returns a url to the comments section for the specified entity.
            </summary>
            <param name="commentable"></param>
            <param name="absolute"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.GetEntityFromUrl(System.String)">
            <summary>
            Returns the entity that lives at the specified url.
            </summary>
            <param name="url">Url to check</param>
            <returns>An <see cref="T:Weavy.Core.Models.IEntity"/> or <c>null</c> if no entity can be found at the specified url.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.DownloadUrl(Weavy.Core.Models.Entity{Weavy.Core.Models.File},System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the url to the content (binary data) of a Entity&lt;File&gt;.
            </summary>
            <param name="file">The entity to get url for.</param>
            <param name="extension">File extension of desired output format, <c>null</c> to keep original format.</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <param name="download"><c>false</c> to return an url for displaying the content inline or <c>true</c> to force client to download the file.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.DownloadUrl(Weavy.Core.Models.ExternalLink,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a content url for the external link (only for links that reference files).
            </summary>
            <param name="link"></param>
            <param name="password"><c>true</c> to include the (hashed) password in the url, otherwise <c>false</c></param>
            <param name="absolute"></param>
            <param name="download"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.DownloadUrl(Weavy.Core.Models.Attachment,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the url to the binary data of an attachment.
            </summary>
            <param name="attachment">The attachment to get url for.</param>
            <param name="extension">File extension of desired output format, <c>null</c> to keep original format.</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <param name="download"><c>false</c> to return an url for displaying the content inline or <c>true</c> to force client to download the file.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.DownloadUrl(Weavy.Core.Models.Blob,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the url to the binary data of a blob.
            </summary>
            <param name="blob">The blob to get url for.</param>
            <param name="extension">File extension of desired output format, <c>null</c> to keep original format.</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <param name="download"><c>false</c> to return an url for displaying the content inline or <c>true</c> to force client to download the file.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.DownloadUrl(Weavy.Core.Models.IFile,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns the url to the binary data of a file.
            </summary>
            <param name="file">The entity to get url for.</param>
            <param name="extension">File extension of desired output format, <c>null</c> to keep original format.</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <param name="download"><c>false</c> to return an url for displaying the content inline or <c>true</c> to force client to download the file.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.PreviewUrl(Weavy.Core.Models.Attachment,System.Boolean)">
            <summary>
            Returns the url used to preview the specified attachment.
            </summary>
            <param name="attachment">The entity to get url for.</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.PreviewUrl(Weavy.Core.Models.IFile,System.Boolean)">
            <summary>
            Returns the url used to preview the specified file.
            </summary>
            <param name="file">The entity to get url for.</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ResolveUrl(System.String,System.Boolean)">
            <summary>
            Creates an absolute URL using the specified path.
            </summary>
            <param name="path">The path to resolve.</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <returns>The resolved URL.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.Url(Weavy.Core.Models.ExternalLink,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an url for the external link.
            </summary>
            <param name="link"></param>
            <param name="password"></param>
            <param name="absolute"></param>
            <param name="download"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.OfficeUrl(Weavy.Core.Models.Attachment,System.Boolean)">
            <summary>
            Returns an url that can be used to open an Office document in Microsoft Word, Excel or Powerpoint using the Office URI Schemes.
            </summary>
            <param name="attachment">The attachment to open</param>
            <param name="hmac"><c>true</c> to include a hash-based message authentication code (HMAC) in the path (for SSO when opening a document in Microsoft Office).</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.OfficeUrl(Weavy.Core.Models.IFile,System.Boolean)">
            <summary>
            Returns an url that can be used to open an Office document in Microsoft Word, Excel or Powerpoint using the Office URI Schemes.
            </summary>
            <param name="file">The file to open</param>
            <param name="hmac"><c>true</c> to include a hash-based message authentication code (HMAC) in the path (for SSO when opening a document in Microsoft Office).</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.DavUrl(Weavy.Core.Models.IEntity,System.Boolean,System.Boolean)">
            <summary>
            Returns an url that can be used by WebDAV clients.
            </summary>
            <param name="entity">The entity</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <param name="hmac"><c>true</c> to include a hash-based message authentication code (HMAC) in the path (for SSO when opening a document in Microsoft Office).</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.IconUrl(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Returns the url to the app icon.
            </summary>
            <param name="size"></param>
            <param name="absolute"></param>
            <param name="cachebust"></param>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ManifestUrl(System.Boolean,System.Boolean)">
            <summary>
            Returns the url to the app manifest.
            </summary>
            <param name="absolute"><c>true</c> to generate an absolute url, otherwise <c>false</c></param>
            <param name="cachebust"><c>true</c> to add a cache busting query string parameter, otherwise <c>false</c></param>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ThumbPlaceholderUrl(Weavy.Core.Models.Blob,System.Boolean,System.Boolean)">
            <summary>
            Returns a placeholder url to a thumbnail image of the specified blob. 
            The url contains the string "{options}" which can be replaced with the desired resize options, e.g. "128", "128x0", "0x128", "128x128" etc.
            </summary>
            <param name="blob">The blob for which to return a thumbnail url.</param>
            <param name="absolute"><c>true</c> to generate an absolute url, otherwise <c>false</c></param>
            <param name="cachebust"><c>true</c> to add a cache busting query string parameter, otherwise <c>false</c></param>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ThumbPlaceholderUrl(Weavy.Core.Models.Embed,System.Boolean,System.Boolean)">
            <summary>
            Returns a placeholder url to a thumbnail image of the specified <see cref="T:Weavy.Core.Models.Embed"/>. 
            The url contains the string "{options}" which can be replaced with the desired resize options, e.g. "128", "128x0", "0x128", "128x128" etc.
            </summary>
            <param name="embed">The <see cref="T:Weavy.Core.Models.Embed"/> for which to return a thumbnail url.</param>
            <param name="absolute"><c>true</c> to generate an absolute url, otherwise <c>false</c></param>
            <param name="cachebust"><c>true</c> to add a cache busting query string parameter, otherwise <c>false</c></param>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ThumbPlaceholderUrl(Weavy.Core.Models.IEntity,System.Boolean,System.Boolean)">
            <summary>
            Returns a placeholder url to a thumbnail image of the specified entity. 
            The url contains the string "{options}" which can be replaced with the desired resize options, e.g. "128", "128x0", "0x128", "128x128" etc.
            </summary>
            <param name="entity">The entity for which to return a thumbnail url.</param>
            <param name="absolute"><c>true</c> to generate an absolute url, otherwise <c>false</c></param>
            <param name="cachebust"><c>true</c> to add a cache busting query string parameter, otherwise <c>false</c></param>   
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ThumbUrl(Weavy.Core.Models.Blob,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,Weavy.Core.Imaging.FitMode,Weavy.Core.Imaging.ScaleMode,System.Drawing.ContentAlignment,System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an url to a thumbnail image for the specified blob. 
            </summary>
            <param name="blob">The blob for which to return a thumbnail url.</param>
            <param name="width">The width constraint.</param>
            <param name="height">The height constraint.</param>
            <param name="retina">If <c>true</c>, the thumbnail image is created with 2x resolution.</param>
            <param name="fit">The constraint mode, determines how to resolve aspect ratio differences between the requested size and the original image's size.</param>
            <param name="scale">Controls whether the image is allowed to upscale, downscale, both, or if only the canvas gets to be upscaled.</param>
            <param name="align">How to align the image when padding or cropping.</param>
            <param name="background">The background color to apply (<c>null</c> for transparency), white will be used for jpg images when background is unspecified.</param>
            <param name="quality">The encoding quality to use (only applies to jpg images).</param>
            <param name="opacity"></param>
            <param name="ignoreICC">If <c>true</c>, the ICC profile of the image will be ignored.</param>
            <param name="absolute"><c>true</c> to generate an absolute url, otherwise <c>false</c></param>
            <param name="rasterize"></param>
            <param name="cachebust"><c>true</c> to add a cache busting query string parameter, otherwise <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ThumbUrl(Weavy.Core.Models.Embed,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,Weavy.Core.Imaging.FitMode,Weavy.Core.Imaging.ScaleMode,System.Drawing.ContentAlignment,System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an url to a thumbnail image for the specified embed. 
            </summary>
            <param name="embed">The embed for which to return a thumbnail url.</param>
            <param name="width">The width constraint.</param>
            <param name="height">The height constraint.</param>
            <param name="retina">If <c>true</c>, the thumbnail image is created with 2x resolution.</param>
            <param name="fit">The constraint mode, determines how to resolve aspect ratio differences between the requested size and the original image's size.</param>
            <param name="scale">Controls whether the image is allowed to upscale, downscale, both, or if only the canvas gets to be upscaled.</param>
            <param name="align">How to align the image when padding or cropping.</param>
            <param name="background">The background color to apply (<c>null</c> for transparency), white will be used for jpg images when background is unspecified.</param>
            <param name="quality">The encoding quality to use (only applies to jpg images).</param>
            <param name="opacity"></param>
            <param name="ignoreICC">If <c>true</c>, the ICC profile of the image will be ignored.</param>
            <param name="absolute"><c>true</c> to generate an absolute url, otherwise <c>false</c></param>
            <param name="rasterize"></param>
            <param name="cachebust"><c>true</c> to add a cache busting query string parameter, otherwise <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ThumbUrl(Weavy.Core.Models.IEntity,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,Weavy.Core.Imaging.FitMode,Weavy.Core.Imaging.ScaleMode,System.Drawing.ContentAlignment,System.Nullable{System.Drawing.Color},System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns an url to a thumbnail image for the specified entity. 
            </summary>
            <param name="entity">The entity for which to return a thumbnail url.</param>
            <param name="width">The width constraint.</param>
            <param name="height">The height constraint.</param>
            <param name="retina">If <c>true</c>, the thumbnail image is created with 2x resolution.</param>
            <param name="fit">The constraint mode, determines how to resolve aspect ratio differences between the requested size and the original image's size.</param>
            <param name="scale">Controls whether the image is allowed to upscale, downscale, both, or if only the canvas gets to be upscaled.</param>
            <param name="align">How to align the image when padding or cropping.</param>
            <param name="background">The background color to apply (<c>null</c> for transparency), white will be used for jpg images when background is unspecified.</param>
            <param name="quality">The encoding quality to use (only applies to jpg images).</param>
            <param name="opacity"></param>
            <param name="ignoreICC">If <c>true</c>, the ICC profile of the image will be ignored.</param>
            <param name="absolute"><c>true</c> to generate an absolute url, otherwise <c>false</c></param>
            <param name="rasterize"></param>
            <param name="cachebust"><c>true</c> to add a cache busting query string parameter, otherwise <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.MessengerUrl(Weavy.Core.Models.Message,System.Boolean)">
            <summary>
            Returns the url to the messenger 
            </summary>
            <param name="message">The message to get the url for</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.Url``1(Weavy.Core.Models.Space,System.Boolean)">
            <summary>
            Returns the url to the first app of the specified type in a space.
            </summary>
            <typeparam name="TApp"></typeparam>
            <param name="space"></param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.Url(Weavy.Core.Models.IEntity,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Returns the url to an entity.
            </summary>
            <param name="entity">The entity to get url for.</param>
            <param name="absolute"><c>false</c> to return a relative url or <c>true</c> to return an absolute url.</param>
            <param name="embedded"><c>true</c> to return an "embedded" url</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.EmailUrl(Weavy.Core.Models.Notification)">
            <summary>
            Gets the url to use in an email for this notification.
            </summary>
            <param name="notification">The <see cref="T:Weavy.Core.Models.Notification"/> to get the url for.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.IsExternalUrl(System.String)">
            <summary>
            Check if an url is external
            </summary>
            <param name="url">The url to check</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.DecodeUrlPart(System.String)">
            <summary>
            Decodes url part.
            </summary>
            <param name="part">Url part to decode.</param>
            <returns>Decoded url part.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.EncodeUrlPart(System.String,System.Boolean)">
            <summary>
            Encodes url part.
            </summary>
            <param name="part">Url part to encode.</param>
            <param name="uppercase">true to use uppercase escaping characters.</param>
            <returns>Encoded url part.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ToPunycode(System.String)">
            <summary>
            Converts an url from unicode to its [Punycode](https://en.wikipedia.org/wiki/Punycode) representation (the domain name will be Punycode encoded and the path will be URL encoded).
            </summary>
            <param name="url">The absolute url to convert to ascii.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ToPunycode(System.Uri)">
            <summary>
            Converts an uri from unicode to its [Punycode](https://en.wikipedia.org/wiki/Punycode) representation (the domain name will be Punycode encoded and the path will be URL encoded).
            </summary>
            <param name="uri">The uri to convert to ascii.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ToUnicode(System.String)">
            <summary>
            Converts an url from [Punycode](https://en.wikipedia.org/wiki/Punycode) to its unicode representation (the domain name will be Punycode decoded and the path will be URL decoded).
            </summary>
            <param name="url">The absolute url to convert to unicode.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.ToUnicode(System.Uri)">
            <summary>
            Converts an uri from [Punycode](https://en.wikipedia.org/wiki/Punycode) to its unicode representation (the domain name will be Punycode decoded and the path will be URL decoded).
            </summary>
            <param name="uri">The uri to convert to unicode.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.IsValidUrl(System.String,System.UriKind)">
            <summary>
            Returns a value indicating if the url is valid, given the supplied kind.
            </summary>
            <param name="url">The url to test.</param>
            <param name="kind">The <see cref="T:System.UriKind"/> to test validity against.</param>
            <returns>True if the url is valid, otherwise false.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.IsLocalUrl(System.String)">
            <summary>
            Returns a value that indicates whether the URL is local relative to the application.
            </summary>
            <param name="url">The URL to test.</param>
            <returns><c>true</c> if the specified URL references the specified host; otherwise, <c>false.</c></returns>
        </member>
        <member name="M:Weavy.Core.Utils.UrlUtils.GetAuthority(System.String)">
            <summary>
            Returns the scheme and authority segments of the specified url, i.e. scheme + host + port.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.ValidationUtils">
            <summary>
            Provides extension and helper methods for working with validation.
            </summary>
        </member>
        <member name="F:Weavy.Core.Utils.ValidationUtils.GuidPattern">
            <summary>
            A regular expression pattern for validating guids.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.IsValid(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>
            Determines whether the specified object is valid by evaluating 
            each ValidationAttribute instance that is attached to the object type.
            </summary>
            <param name="instance">The object to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.IsValid(System.Object)">
            <summary>
            Determines whether the specified object is valid by evaluating 
            each ValidationAttribute instance that is attached to the object type.
            </summary>
            <param name="instance">The object to validate.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.Validate(System.ComponentModel.DataAnnotations.IValidatableObject,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Determines whether the specified object is valid by evaluating 
            each ValidationAttribute instance that is attached to the object type.
            </summary>
            <param name="instance">The object to validate.</param>
            <param name="result">A collection to hold each failed validation.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.Validate(System.Object,System.Collections.Generic.IList{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Determines whether the specified object is valid by evaluating 
            each ValidationAttribute instance that is attached to the object type.
            </summary>
            <param name="instance">The object to validate.</param>
            <param name="result">A collection with validation results.</param>
            <returns><c>true</c> if the object validates; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.Validate(System.ComponentModel.DataAnnotations.IValidatableObject)">
            <summary>
            Determines whether the specified object is valid by evaluating 
            each ValidationAttribute instance that is attached to the object type.
            </summary>
            <param name="instance">The object to validate.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The object is not valid.</exception>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.Validate(System.Object)">
            <summary>
            Determines whether the specified object is valid by evaluating 
            each ValidationAttribute instance that is attached to the object type.
            </summary>
            <param name="instance">The object to validate.</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The object is not valid.</exception>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.ValidatePassword(System.String)">
            <summary>
            Ensures that the password is of the required length and meets the configured requirements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.ValidatePassword(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Ensures that the password is of the required length and meets the specified requirements.
            </summary>
            <param name="password">The password to validate.</param>
            <param name="requiredLength">Minimum required length</param>
            <param name="requireDigit">Require a digit ('0' - '9')</param>
            <param name="requireLower">Require a lower case letter ('a' - 'z')</param>
            <param name="requireUpper">Require an upper case letter ('A' - 'Z')</param>
            <param name="requireSpecial">Require a non letter or digit character</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.IsDigit(System.Char)">
            <summary>
            Returns true if the character is a digit between '0' and '9'
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.IsLower(System.Char)">
            <summary>
            Returns true if the character is between 'a' and 'z'
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.IsUpper(System.Char)">
            <summary>
            Returns true if the character is between 'A' and 'Z'
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.IsLetterOrDigit(System.Char)">
            <summary>
            Returns true if the character is upper, lower, or a digit
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.IsFileSizeAllowed(System.Int64)">
            <summary>
            Returns a value indicating if the file size is less than orr equal to <see cref="P:Weavy.Core.Services.ConfigurationService.BlobSize"/>.
            </summary>
            <param name="size">The size of the file (in bytes) to check.</param>
            <returns><c>true</c> if the file is to large, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ValidationUtils.IsFileTypeAccepted(System.String,System.String)">
            <summary>
            Returns a value indicating if the file type is accepted.
            </summary>
            <param name="name">The name of the file to check, e.g. "report.pdf"</param>
            <param name="accept">A comma-separated list of unique file type specifiers to validate against.</param>
            <returns><c>true</c> if the file is accepted, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Weavy.Core.Utils.ZoomApiUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ZoomApiUtils.Authorize(System.String)">
            <summary>
            Authorize and get an access token
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ZoomApiUtils.RefreshToken(System.String)">
            <summary>
            Refresh the token
            </summary>
            <param name="refreshToken"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ZoomApiUtils.CreateMeeting(System.String)">
            <summary>
            Create a new meeting
            </summary>        
            <param name="topic"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ZoomApiUtils.GetUser(System.String)">
            <summary>
            Get Zoom user data
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ZoomApiUtils.Post``1(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Post to api
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri">The uri to use</param>
            <param name="bearer">The bearer to pass in to the auth header</param>
            <param name="payload">A payload</param>
            <param name="authHeaderType">The type of authe header to use</param>
            <param name="refresh">If the token should be refreshed upon unsuccessful response</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ZoomApiUtils.Get``1(System.String,System.String,System.Boolean)">
            <summary>
            Get from api
            </summary>
            <typeparam name="T"></typeparam>
            <param name="uri"></param>
            <param name="bearer"></param>
            <param name="refresh"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Utils.ZoomApiUtils.Base64Encode(System.String)">
            <summary>
            Encodes a string to base64
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Utils.ContentUtils">
            <summary>
            Provides extension and helper methods for <see cref="T:Weavy.Core.Models.Content"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Utils.ContentUtils.AsHierarchy(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Content},System.Nullable{System.Int32})">
            <summary>
            Extension method that takes a flat list of Content items and converts it into a Hierarchy with the Parent and Children properties set.
            </summary>
            <param name="source">Source enumerable</param>
            <param name="rootId"></param>
            <returns>A new List of Content</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ContentUtils.BuildBranches(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Content},System.Nullable{System.Int32})">
            <summary>
            Converts a flat hierarchy to a parent-child relationship.
            </summary>
            <param name="hierarchy">The flat list to convert.</param>
            <param name="rootId">The root id of the branch.</param>
            <returns>A list of <see cref="T:Weavy.Core.Models.Content"/> items organized in a parent-child relationship.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ContentUtils.BuildBranch(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Content})">
            <summary>
            Converts a flat hierarchy to a parent-child relationship.
            </summary>
            <param name="hierarchy">The flat list to convert.</param>
            <returns>A <see cref="T:Weavy.Core.Models.Content"/> item organized in a parent-child relationship.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ContentUtils.Flatten(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Content})">
            <summary>
            Convert a hierarchy of <see cref="T:Weavy.Core.Models.Content"/> items into a flat list.
            </summary>
            <param name="tree">The hierarchy to flatten</param>
            <returns>A flat list of <see cref="T:Weavy.Core.Models.Content"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Utils.ContentUtils.Sort(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Content},System.Nullable{Weavy.Core.Models.SortBy},System.Boolean)">
            <summary>
            Sort the specified content according to the supplied sort order.
            </summary>
            <param name="source">The content to sort.</param>
            <param name="sortby">The sort order.</param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.PermissionFilter">
            <summary>
            A filter that makes sure we only search things we are allowed to see.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.PermissionFilter.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.ArchivedFilter">
            <summary>
            A filter that makes sure we don't return archived spaces.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.ArchivedFilter.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.MentionFilter">
            <summary>
            A filter that makes sure we search only users and spaces with teamname.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.MentionFilter.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.SearchFeature">
            <summary>
            Abstract base class for features.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.SearchFeature.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.SearchFeature.UpdateResult(Weavy.Core.Lucene.IndexQuery,Lucene.Net.Search.IndexSearcher,Lucene.Net.Search.ScoreDoc,Weavy.Core.Models.IndexDocument)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="searcher"></param>
            <param name="scoreDoc"></param>
            <param name="indexDoc"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.CreatorFilter">
            <summary>
            A filter that only returns items created by the specified user.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.Features.CreatorFilter.Occur">
            <summary>
            Gets or sets a value indicating whether and how the fields should match.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.CreatorFilter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.CreatorFilter.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.ParentFilter">
            <summary>
            A filter that modifies the query to only search the specified parent node.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.ParentFilter.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.TagFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.Features.TagFilter.Boost">
            <summary>
            Gets or sets the boost to apply when searching.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.Features.TagFilter.Occur">
            <summary>
            Gets or sets a value indicating whether and how the fields should match.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.TagFilter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.TagFilter.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.EntityTypeFilter">
            <summary>
            A filter that modifies the query to only search the specified entity types.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.EntityTypeFilter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.EntityTypeFilter.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            Adds a filter for the specified entity types.
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.TrashedFilter">
            <summary>
            A filter that makes sure we search items according to the SearchTrashed property.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.TrashedFilter.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.FieldsFeature">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.Features.FieldsFeature.Boost">
            <summary>
            Gets or sets the boost to apply when searching.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.Features.FieldsFeature.Occur">
            <summary>
            Gets or sets a value indicating whether and how the fields should match.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.Features.FieldsFeature.Fields">
            <summary>
            Gets or sets the fields to search.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.FieldsFeature.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.FieldsFeature.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.SpaceFilter">
            <summary>
            A filter that modifies the query to only search the specified space.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.SpaceFilter.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.HighlightResultFeature">
            <summary>
            Applies hit highlighting to title and description fields.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.HighlightResultFeature.UpdateResult(Weavy.Core.Lucene.IndexQuery,Lucene.Net.Search.IndexSearcher,Lucene.Net.Search.ScoreDoc,Weavy.Core.Models.IndexDocument)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="searcher"></param>
            <param name="scoreDoc"></param>
            <param name="indexDoc"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Features.ISearchFeature">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.ISearchFeature.ModifyQuery(Weavy.Core.Lucene.IndexQuery)">
            <summary>
            
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:Weavy.Core.Lucene.Features.ISearchFeature.UpdateResult(Weavy.Core.Lucene.IndexQuery,Lucene.Net.Search.IndexSearcher,Lucene.Net.Search.ScoreDoc,Weavy.Core.Models.IndexDocument)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="searcher"></param>
            <param name="scoreDoc"></param>
            <param name="indexDoc"></param>
        </member>
        <member name="T:Weavy.Core.Lucene.Analyzers.LowerCaseWhitespaceAnalyzer">
            <summary>
            An analyzer that behaves like Lucene's standard WhitespaceAnalyzer (divides text at whitespace), but this class also normalizes token text to lower case.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Analyzers.LowerCaseWhitespaceAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            Creates a TokenStream which tokenizes all the text in the provided reader.
            </summary>
            <param name="fieldName"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Lucene.Analyzers.EmailAnalyzer">
            <summary>
            Lucene email address analyzer.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Analyzers.EmailAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            Creates a TokenStream which tokenizes all the text in the provided reader.
            </summary>
            <param name="fieldName"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Lucene.Analyzers.StemmingStandardAnalyzer">
            <summary>
            Replacement for Lucene's StandardAnalyzer that adds stemming.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Analyzers.StemmingStandardAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            Creates a TokenStream which tokenizes all the text in the provided reader.
            </summary>
            <param name="fieldName"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Lucene.Analyzers.LowerCaseKeywordAnalyzer">
            <summary>
            An analyzer that behaves like Lucene's standard KeywordAnalyzer (tokenizes the entire stream as a single token), but this class also normalizes token text to lower case.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Analyzers.LowerCaseKeywordAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            Creates a TokenStream which tokenizes all the text in the provided reader.
            </summary>
            <param name="fieldName"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Lucene.Tokenizers.EmailTokenizer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Tokenizers.EmailTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Weavy.Core.Lucene.Tokenizers.EmailTokenizer.IsTokenChar(System.Char)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Lucene.Searcher">
            <summary>
            The default searcher impl.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.Searcher.Features">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.Searcher.#ctor(Lucene.Net.Store.Directory)">
            <summary>
            
            </summary>
            <param name="directory"></param>
        </member>
        <member name="M:Weavy.Core.Lucene.Searcher.Search(Weavy.Core.Models.Query)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Lucene.IndexSchema">
            <summary>
            Schema used for fulltext index.
            </summary>
        </member>
        <member name="F:Weavy.Core.Lucene.IndexSchema.DefaultAnalyzer">
            <summary>
            Gets our default analyzer.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.IndexSchema.GetAnalyzer">
            <summary>
            Gets the analyzer to use for our index. The analyzer is based on our default analyzer and a map of analyzers to use for specific fields.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Weavy.Core.Lucene.IndexSchema.Schema">
            <summary>
            A dictionary with field definitions for the index
            </summary>
        </member>
        <member name="T:Weavy.Core.Lucene.SchemaField">
            <summary>
            Definition for fields in our search schema.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SchemaField.Analyzer">
            <summary>
            Gets or sets the Analyzer to use for this field.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SchemaField.Boost">
            <summary>
            Gets or sets the index time boost to apply to this field.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SchemaField.Index">
            <summary>
            Specifies whether and how the field should be indexed.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SchemaField.Store">
            <summary>
            Specifies whether and how the field should be stored.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SchemaField.TermVector">
            <summary>
            Specifies whether and how the field should have term vectors.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.SchemaField.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Lucene.SearchField">
            <summary>
            Definition for fields used by our searchers.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SearchField.Name">
            <summary>
            Gets or sets the name of the index field to search.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SearchField.Boost">
            <summary>
            Gets or sets the search time boost to apply.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SearchField.Exact">
            <summary>
            Gets or sets a value indicating if the field should be treated as a phrase or parsed with the field analyzer.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SearchField.Occur">
            <summary>
            Gets or sets a value indicating whether and how the field value should match.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SearchField.LeadingWildcard">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.SearchField.TrailingWildcard">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.SearchField.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Weavy.Core.Lucene.IndexQuery">
            <summary>
            Contains all the information required to perfom search in the underlying Lucene engine.
            It is passed to all features allowing them to modify it.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.IndexQuery.#ctor(Weavy.Core.Models.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Lucene.IndexQuery"/> class with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query"></param>
        </member>
        <member name="P:Weavy.Core.Lucene.IndexQuery.WrappedQuery">
            <summary>
            Gets the <see cref="T:Weavy.Core.Models.Query"/> used to search the index.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.IndexQuery.LuceneQuery">
            <summary>
            Gets or sets the <see cref="T:Lucene.Net.Search.Query"/> used to search the index.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.IndexQuery.LuceneFilter">
            <summary>
            Gets or sets the <see cref="T:Lucene.Net.Search.Filter"/> used to search the index.
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.IndexQuery.AddFilter(Lucene.Net.Search.Filter)">
            <summary>
            Helper method that adds a filter caluse to the query.
            </summary>
            <param name="filter"></param>
        </member>
        <member name="M:Weavy.Core.Lucene.IndexQuery.AddQuery(Lucene.Net.Search.Query,Lucene.Net.Search.Occur)">
            <summary>
            Helper method that adds a query clause to the query.
            </summary>
            <param name="query"></param>
            <param name="occur"></param>
        </member>
        <member name="M:Weavy.Core.Lucene.IndexQuery.ToString">
            <summary>
            Gets the string used when searching the index.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Lucene.ISearcher">
            <summary>
            Interface for searcher with optional features.
            </summary>
        </member>
        <member name="P:Weavy.Core.Lucene.ISearcher.Features">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Lucene.ISearcher.Search(Weavy.Core.Models.Query)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Providers.AzureBlobProvider">
            <summary>
              Azure Blob Storage implementation of the <see cref="T:Weavy.Core.Providers.IBlobProvider"/> interface.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Providers.AzureBlobProvider"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Providers.AzureBlobProvider"/>.
            </summary>
            <param name="connectionString"></param>
            <param name="container"></param>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.Delete(Weavy.Core.Models.Blob)">
            <summary>
            Permanently removes blob data from the repository.
            </summary>
            <param name="blob">The blob to delete.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Writes the binary data of the blob from the provider to the specified output stream.
            </summary>
            <param name="blob">The file.</param>
            <param name="output">The output stream where the data should be written.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Downloads a range of bytes from the blob to a destination.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
            <param name="offset">The starting offset.</param>
            <param name="length">The number of bytes to download.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Writes the binary data of the blob from the provider to the specified output stream.
            </summary>
            <param name="blob">The file.</param>
            <param name="output">The output stream where the data should be written.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Downloads a range of bytes from the blob to a destination.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
            <param name="offset">The starting offset.</param>
            <param name="length">The number of bytes to download.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.Exists(Weavy.Core.Models.Blob)">
            <summary>
            Checks if the specified blob exists.
            </summary>
            <param name="blob">The blob.</param>
            <returns><c>true</c> if the blob exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.Upload(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Reads the binary data from the specified input stream and stores it as a blob.
            </summary>
            <param name="blob">Blob to insert.</param>
            <param name="input">The input stream from which the data should be read.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.UploadAsync(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Reads the binary data from the specified input stream and stores it as a blob.
            </summary>
            <param name="blob">Blob to insert.</param>
            <param name="input">The input stream from which the data should be read.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AzureBlobProvider.GetBlobName(Weavy.Core.Models.Blob)">
            <summary>
            Helper method for getting a name to use for the <see cref="T:Weavy.Core.Models.Blob"/> when uploaded to Azure Blob Storage.
            </summary>
            <param name="blob"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Providers.AzureNotificationProvider">
            <summary>
            An Azure notification hub implementation of <see cref="T:Weavy.Core.Providers.INotificationProvider"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.AzureNotificationProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Providers.AzureNotificationProvider"/> class. 
            Requires the following configuration settings:
            &lt;ul&gt;
            &lt;li&gt;weavy.azure-notification-provider.messenger-connection-string&lt;/li&gt; 
            &lt;li&gt;weavy.azure-notification-provider.messenger-hub-path&lt;/li&gt; 
            &lt;li&gt;weavy.azure-notification-provider.spaces-connection-string&lt;/li&gt; 
            &lt;li&gt;weavy.azure-notification-provider.spaces-hub-path&lt;/li&gt;
            &lt;/ul&gt; 
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.AzureNotificationProvider.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Providers.AzureNotificationProvider"/> class.
            </summary>
            <param name="messengerConnectionString"></param>
            <param name="messengerHubPath"></param>
            <param name="spacesConnectionString"></param>
            <param name="spacesHubPath"></param>
        </member>
        <member name="M:Weavy.Core.Providers.AzureNotificationProvider.Push(Weavy.Core.Models.PushNotification)">
            <summary>
            
            </summary>
            <param name="notification"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Providers.INotificationProvider">
            <summary>
            Interface for push notification providers.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.INotificationProvider.Push(Weavy.Core.Models.PushNotification)">
            <summary>
            Push a notification
            </summary>
            <param name="notification"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Providers.AspNetCacheProvider">
            <summary>
              An in-process implementation of the <see cref="T:Weavy.Core.Providers.ICacheProvider" /> interface that internally uses the System.Web.Caching.Cache.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.Count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Providers.AspNetCacheProvider.Hits">
            <summary>
            Gets the total number of cache hits.
            </summary>
        </member>
        <member name="P:Weavy.Core.Providers.AspNetCacheProvider.Misses">
            <summary>
            Gets the total number of cache misses.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.Clear">
            <summary>
            Removes all items from the Cache.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.Clear(Weavy.Core.Models.CacheRegion)">
            <summary>
            Removes all items from the <see cref="T:Weavy.Core.Models.CacheRegion"/>.
            </summary>
            <param name="region">The <see cref="T:Weavy.Core.Models.CacheRegion"/> to clear.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.Exists(Weavy.Core.Models.CacheRegion,System.String)">
            <summary>
            Checks if the specified item exists in the cache.
            </summary>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns><c>true</c> if the item exists in the cache, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.Get``1(Weavy.Core.Models.CacheRegion,System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T">The type of data to get from the cache.</typeparam>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or null if the key is not found.</returns>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.Put``1(Weavy.Core.Models.CacheRegion,System.String,``0)">
            <summary>
            Inserts an item into the Cache object with a cache key to reference its location.
            </summary>
            <typeparam name="T">The type of data to put in the cache.</typeparam>
            <param name="region">The cache region in which to put the cache item.</param> 
            <param name="key">The cache key used to reference the item.</param>
            <param name="item">The object to be inserted into the cache.</param>
            <remarks>This method will overwrite an existing cache item whose key matches the key parameter.</remarks>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.Remove(Weavy.Core.Models.CacheRegion,System.String[])">
            <summary>
            Removes the specified items from the cache.
            </summary>
            <param name="region">The cache region from which to remove cache items.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.RemoveStartingWith(Weavy.Core.Models.CacheRegion,System.String[])">
            <summary>
            Removes all items starting with the specified keys.
            </summary>
            <param name="region">The cache region from which to remove cache items.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.RemoveEndingWith(Weavy.Core.Models.CacheRegion,System.String[])">
            <summary>
            Removes all items ending with the specified keys.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.GetRegionKey(Weavy.Core.Models.CacheRegion)">
            <summary>
            Gets the cache key for the specified CacheRegion.
            </summary>
            <param name="region">A CacheRegion for which to get cache key.</param>
            <returns>A string used to identify the CacheRegion.</returns>
        </member>
        <member name="M:Weavy.Core.Providers.AspNetCacheProvider.GetCacheKey(Weavy.Core.Models.CacheRegion,System.String)">
            <summary>
            Gets the composite cache key for the specified CacheRegion and item key.
            </summary>
            <param name="region">A CacheRegion for which to get cache key.</param>
            <param name="key">Cache key for a specific item in the cache region.</param>
            <returns>A string used to identify the item in the CacheRegion.</returns>
        </member>
        <member name="T:Weavy.Core.Providers.DiskBlobProvider">
            <summary>
              Implementation of the <see cref="T:Weavy.Core.Providers.IBlobProvider"/> interface that stores blobs on local disk.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Providers.DiskBlobProvider.Path">
            <summary>
            Gets the path to the files directory.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Providers.DiskBlobProvider"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.Providers.DiskBlobProvider"/> class with the specified path.
            </summary>
            <param name="path">Path on disk where files should be stores, e.g. App_Data\Files.</param>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.Delete(Weavy.Core.Models.Blob)">
            <summary>
            Permanently removes blob content from disk.
            </summary>
            <param name="blob">The blob to delete.</param>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Downloads the binary data of the specified blob to the specified output stream.
            </summary>
            <param name="blob">The blob.</param>
            <param name="destination">The output stream where the data should be written.</param>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Downloads a range of bytes from the blob to a destination.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
            <param name="offset">The starting offset.</param>
            <param name="length">The number of bytes to download, <c>null</c> means the range extends all the way to the end.</param>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Downloads the binary data of the specified blob to the specified output stream.
            </summary>
            <param name="blob">The blob.</param>
            <param name="destination">The output stream where the data should be written.</param>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Writes the binary data of the blob from the provider to the specified output stream.
            </summary>
            <param name="blob">The file.</param>
            <param name="destination">The output stream where the data should be written.</param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.Exists(Weavy.Core.Models.Blob)">
            <summary>
            Checks if the specified <see cref="T:Weavy.Core.Models.Blob"/> exists.
            </summary>
            <param name="blob">The blob to check.</param>
            <returns><c>true</c> if the blob exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.Upload(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Uploads the binary data for the specified blob.
            </summary>
            <param name="blob">Blob to insert.</param>
            <param name="input">The input stream from which the data should be read.</param>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.UploadAsync(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Uploads the binary data for the specified blob.
            </summary>
            <param name="blob">Blob to insert.</param>
            <param name="input">The input stream from which the data should be read.</param>
        </member>
        <member name="M:Weavy.Core.Providers.DiskBlobProvider.GetFile(Weavy.Core.Models.Blob)">
            <summary>
            Returns the location of the specified <see cref="T:Weavy.Core.Models.Blob"/> object.
            If the blob does not exists, <see cref="P:System.IO.FileInfo.Exists"/> will return false.
            </summary>
            <param name="blob">The blob.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object.</returns>
        </member>
        <member name="T:Weavy.Core.Providers.IBlobProvider">
            <summary>
            Interface for blob storage providers.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.IBlobProvider.Delete(Weavy.Core.Models.Blob)">
            <summary>
            Permanently deletes blob content from storage.
            </summary>
            <param name="blob">The blob to delete.</param>
        </member>
        <member name="M:Weavy.Core.Providers.IBlobProvider.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Downloads the blob to a destination.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
        </member>
        <member name="M:Weavy.Core.Providers.IBlobProvider.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Downloads a range of bytes from the blob to a destination.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
            <param name="offset">The zero-based byte offset at which to start downloading.</param>
            <param name="length">The number of bytes to download.</param>
        </member>
        <member name="M:Weavy.Core.Providers.IBlobProvider.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Downloads the blob to a destination.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
        </member>
        <member name="M:Weavy.Core.Providers.IBlobProvider.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Downloads a range of bytes from the blob to a destination.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
            <param name="offset">The zero-based byte offset at which to start downloading.</param>
            <param name="length">The number of bytes to download.</param>
        </member>
        <member name="M:Weavy.Core.Providers.IBlobProvider.Exists(Weavy.Core.Models.Blob)">
            <summary>
            Checks if the provider has any content for the specified blob.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <returns><c>true</c> if the blob exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Weavy.Core.Providers.IBlobProvider.Upload(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Uploads the specified blob content. 
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="content">A <see cref="T:System.IO.Stream"/> containing the content to upload.</param>
            <remarks>
              The <see cref="T:Weavy.Core.Models.Blob"/> will be updated to reflect any changes made by the provider, i.e. Size.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Providers.IBlobProvider.UploadAsync(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Uploads the specified blob content. 
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="content">A <see cref="T:System.IO.Stream"/> containing the content to upload.</param>
            <remarks>
              The <see cref="T:Weavy.Core.Models.Blob"/> will be updated to reflect any changes made by the provider, i.e. Size.
            </remarks>
        </member>
        <member name="T:Weavy.Core.Providers.ICacheProvider">
            <summary>
              Interface for cache providers.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.ICacheProvider.Count">
            <summary>
            Gets the number of entities in the cache.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.ICacheProvider.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.ICacheProvider.Clear(Weavy.Core.Models.CacheRegion)">
            <summary>
            Removes all items from the cache region.
            </summary>
            <param name="region">The cache region to clear.</param>
        </member>
        <member name="M:Weavy.Core.Providers.ICacheProvider.Exists(Weavy.Core.Models.CacheRegion,System.String)">
            <summary>
            Checks if the specified item exists in the cache.
            </summary>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns><c>true</c> if the item exists in the cache, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Providers.ICacheProvider.Get``1(Weavy.Core.Models.CacheRegion,System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T">The type of data to get from the cache.</typeparam>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or null if the key is not found.</returns>
        </member>
        <member name="P:Weavy.Core.Providers.ICacheProvider.Hits">
            <summary>
            Gets the total number of cache hits.
            </summary>
        </member>
        <member name="P:Weavy.Core.Providers.ICacheProvider.Misses">
            <summary>
            Gets the total number of cache misses.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.ICacheProvider.Put``1(Weavy.Core.Models.CacheRegion,System.String,``0)">
            <summary>
            Inserts an item into the Cache object with a cache key to reference its location.
            </summary>
            <typeparam name="T">The type of data to put in the cache.</typeparam>
            <param name="region">The cache region in which to put the cache item.</param> 
            <param name="key">The cache key used to reference the item.</param>
            <param name="item">The object to be inserted into the cache.</param>
            <remarks>This method will overwrite an existing cache item whose key matches the key parameter.</remarks>
        </member>
        <member name="M:Weavy.Core.Providers.ICacheProvider.Remove(Weavy.Core.Models.CacheRegion,System.String[])">
            <summary>
            Removes the specified items from the cache.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Weavy.Core.Providers.ICacheProvider.RemoveStartingWith(Weavy.Core.Models.CacheRegion,System.String[])">
            <summary>
            Removes all items starting with the specified keys.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Weavy.Core.Providers.ICacheProvider.RemoveEndingWith(Weavy.Core.Models.CacheRegion,System.String[])">
            <summary>
            Removes all items ending with the specified keys.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="T:Weavy.Core.Providers.IProvider">
            <summary>
             Interface for providers.
            </summary>
        </member>
        <member name="T:Weavy.Core.Providers.NullCacheProvider">
            <summary>
              An implementation of the <see cref="T:Weavy.Core.Providers.ICacheProvider" /> interface that disables caching.
            </summary>        
        </member>
        <member name="M:Weavy.Core.Providers.NullCacheProvider.Count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Weavy.Core.Providers.NullCacheProvider.Hits">
            <summary>
            Gets the total number of cache hits.
            </summary>
        </member>
        <member name="P:Weavy.Core.Providers.NullCacheProvider.Misses">
            <summary>
            Gets the total number of cache misses.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.NullCacheProvider.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Weavy.Core.Providers.NullCacheProvider.Clear(Weavy.Core.Models.CacheRegion)">
            <summary>
            Removes all items from the cache region.
            </summary>
            <param name="region">The cache region to clear.</param>
        </member>
        <member name="M:Weavy.Core.Providers.NullCacheProvider.Exists(Weavy.Core.Models.CacheRegion,System.String)">
            <summary>
            Checks if the specified item exists in the cache.
            </summary>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns><c>true</c> if the item exists in the cache, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Providers.NullCacheProvider.Get``1(Weavy.Core.Models.CacheRegion,System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <typeparam name="T">The type of data to get from the cache.</typeparam>
            <param name="region">The cache region from which to get the cache item.</param>
            <param name="key">The identifier for the cache item to retrieve.</param>
            <returns>The retrieved cache item, or null if the key is not found.</returns>
        </member>
        <member name="M:Weavy.Core.Providers.NullCacheProvider.Put``1(Weavy.Core.Models.CacheRegion,System.String,``0)">
            <summary>
            Inserts an item into the Cache object with a cache key to reference its location.
            </summary>
            <typeparam name="T">The type of data to put in the cache.</typeparam>
            <param name="region">The cache region in which to put the cache item.</param> 
            <param name="key">The cache key used to reference the item.</param>
            <param name="item">The object to be inserted into the cache.</param>
            <remarks>This method will overwrite an existing cache item whose key matches the key parameter.</remarks>
        </member>
        <member name="M:Weavy.Core.Providers.NullCacheProvider.Remove(Weavy.Core.Models.CacheRegion,System.String[])">
            <summary>
            Removes the specified items from the cache.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Weavy.Core.Providers.NullCacheProvider.RemoveStartingWith(Weavy.Core.Models.CacheRegion,System.String[])">
            <summary>
            Removes all items starting with the specified keys.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="M:Weavy.Core.Providers.NullCacheProvider.RemoveEndingWith(Weavy.Core.Models.CacheRegion,System.String[])">
            <summary>
            Removes all items ending with the specified keys.
            </summary>
            <param name="region">The cache region from which to remove the cache item.</param> 
            <param name="keys">The identifiers for the cache items to remove.</param>
        </member>
        <member name="T:Weavy.Core.Providers.SqlServerBlobProvider">
            <summary>
              Sql Server implementation of the <see cref="T:Weavy.Core.Providers.IBlobProvider"/> interface.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Providers.SqlServerBlobProvider.Delete(Weavy.Core.Models.Blob)">
            <summary>
            Permanently removes blob data from the repository.
            </summary>
            <param name="blob">The blob to delete.</param>
        </member>
        <member name="M:Weavy.Core.Providers.SqlServerBlobProvider.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Writes the binary data of the file to the specified output stream.
            </summary>
            <param name="blob">The file.</param>
            <param name="destination">The output stream where the data should be written.</param>
        </member>
        <member name="M:Weavy.Core.Providers.SqlServerBlobProvider.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Downloads a range of bytes from the blob to a destination.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
            <param name="offset">The starting offset.</param>
            <param name="length">The number of bytes to download.</param>
        </member>
        <member name="M:Weavy.Core.Providers.SqlServerBlobProvider.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Writes the binary data of the file to the specified output stream.
            </summary>
            <param name="blob">The file.</param>
            <param name="destination">The output stream where the data should be written.</param>
        </member>
        <member name="M:Weavy.Core.Providers.SqlServerBlobProvider.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Writes the binary data of the blob from the provider to the specified output stream.
            </summary>
            <param name="blob">The file.</param>
            <param name="destination">The output stream where the data should be written.</param>
            <param name="offset">The starting offset.</param>
            <param name="length">The number of bytes to download.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Providers.SqlServerBlobProvider.Exists(Weavy.Core.Models.Blob)">
            <summary>
            Checks if the specified blob has any data.
            </summary>
            <param name="blob">The blob.</param>
            <returns><c>true</c> if the blob exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Weavy.Core.Providers.SqlServerBlobProvider.Upload(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Reads the binary data from the specified input stream and stores it as a blob.
            After insert <c>blob.Size</c> contains the size of the uploaded file.
            </summary>
            <param name="blob">Blob to insert.</param>
            <param name="input">The input stream from which the data should be read.</param>
        </member>
        <member name="M:Weavy.Core.Providers.SqlServerBlobProvider.UploadAsync(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Reads the binary data from the specified input stream and stores it as a blob.
            After insert <c>blob.Size</c> contains the size of the uploaded file.
            </summary>
            <param name="blob">Blob to insert.</param>
            <param name="input">The input stream from which the data should be read.</param>
        </member>
        <member name="T:Weavy.Core.Repos.MeetingRepo">
            <summary>
              Repo for <see cref="T:Weavy.Core.Models.Meeting"/> objects.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.MeetingRepo.Get(System.Int32)">
            <summary>
              Gets an <see cref="T:Weavy.Core.Models.Meeting"/> object from the repository.
            </summary>
            <param name="id">Id of meeting.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Meeting"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.MeetingRepo.Get(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get the specified meetings.
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:Weavy.Core.Repos.MeetingRepo.Get(Weavy.Core.Models.IHasMeetings)">
            <summary>
              Gets <see cref="T:Weavy.Core.Models.Meeting"/>s attached to the specified entity.
            </summary>
            <param name="entity"></param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Meeting"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.MeetingRepo.Get(System.String,System.String)">
            <summary>
            Get meeting by provider and provider meeting id
            </summary>
            <param name="provider"></param>
            <param name="uuid"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.MeetingRepo.GetOngoing(System.String)">
            <summary>
            Get ongoing meeting by provider
            </summary>
            <param name="provider"></param>        
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.MeetingRepo.Update(Weavy.Core.Models.Meeting)">
            <summary>
            Updates a <see cref="T:Weavy.Core.Models.Meeting"/>
            </summary>
            <param name="meeting">The <see cref="T:Weavy.Core.Models.Meeting"/> to update</param>
        </member>
        <member name="M:Weavy.Core.Repos.MeetingRepo.Insert(Weavy.Core.Models.Meeting)">
            <summary>
              Inserts an <see cref="T:Weavy.Core.Models.Meeting"/> object into the repository.
            </summary>
            <param name="meeting"><see cref="T:Weavy.Core.Models.Meeting"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="T:Weavy.Core.Repos.TokenRepo">
            <summary>
              Repo for <see cref="T:Weavy.Core.Models.Token"/> objects.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.TokenRepo.TokenColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.TokenRepo.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Token"/> object from the repository.
            </summary>
            <param name="id">Id (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Token"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.TokenRepo.Get(Weavy.Core.Models.User)">
            <summary>
            Gets a list of tokens for the specified user.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.TokenRepo.Get(Weavy.Core.Models.User,System.String)">
            <summary>
            Gets a list of tokens for the specified user and provider.
            </summary>
            <param name="user"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.TokenRepo.Insert(Weavy.Core.Models.Token)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Token"/> object into the repository.
            </summary>
            <param name="token"><see cref="T:Weavy.Core.Models.Token"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.TokenRepo.Update(Weavy.Core.Models.Token)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Token"/> in the datasource.
            </summary>
            <param name="token"><see cref="T:Weavy.Core.Models.Token"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.TokenRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Token"/> object from the repository.
            </summary>
            <param name="id">Id (primary key).</param>
            <remarks>
              This will delete the object and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
        </member>
        <member name="T:Weavy.Core.Repos.DirectoryRepo">
            <summary>
              Repo for directories.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.DirectoryRepo.DirectoryColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.DirectoryRepo.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Directory"/> object from the repository.
            </summary>
            <param name="id">Id (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Directory"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.DirectoryRepo.Get(System.String)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Directory"/> object from the repository.
            </summary>
            <param name="name">Unique directory name.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Directory"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.DirectoryRepo.Insert(Weavy.Core.Models.Directory)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Directory"/> object into the repository.
            </summary>
            <param name="directory"><see cref="T:Weavy.Core.Models.Directory"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.DirectoryRepo.Delete(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Weavy.Core.Models.Directory"/> object from the repository.
            </summary>
            <param name="id">Id (primary key).</param>
        </member>
        <member name="M:Weavy.Core.Repos.DirectoryRepo.Search(Weavy.Core.Models.DirectoryQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.RoleQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.DirectoryQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Role"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.DirectoryRepo.Update(Weavy.Core.Models.Directory)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Directory"/> in the datasource.
            </summary>
            <param name="directory"><see cref="T:Weavy.Core.Models.Directory"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.DirectoryRepo.MemberCount(System.Int32)">
            <summary>
              Returns the member count of the specified <see cref="T:Weavy.Core.Models.Directory"/>.
            </summary>
            <param name="id">Id of <see cref="T:Weavy.Core.Models.Directory"/> for which to count members.</param>
        </member>
        <member name="T:Weavy.Core.Repos.AttachmentRepo">
            <summary>
              Repo for attachments.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.AttachmentRepo.AttachmentColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.Get(System.Int32)">
            <summary>
              Gets the specified <see cref="T:Weavy.Core.Models.Attachment"/> from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Attachment"/>.</param>
            <returns>Returns a <see cref="T:Weavy.Core.Models.Attachment"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.Get(System.Int32[])">
            <summary>
              Get the specified <see cref="T:Weavy.Core.Models.Attachment"/>s from the repository.
            </summary>
            <param name="ids">Ids of the <see cref="T:Weavy.Core.Models.Attachment"/>.</param>
            <returns>Returns a <see cref="T:Weavy.Core.Models.Attachment"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.Get(Weavy.Core.Models.IEntity)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.File"/>s attached to the specified entity.
            </summary>
            <param name="entity"></param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.File"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.Insert(Weavy.Core.Models.Attachment)">
            <summary>
              Inserts an <see cref="T:Weavy.Core.Models.Attachment"/> object into the repository.
            </summary>
            <param name="attachment"><see cref="T:Weavy.Core.Models.File"/> object to insert.</param>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.Update(Weavy.Core.Models.Attachment)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Attachment"/>.
            </summary>
            <param name="attachment"><see cref="T:Weavy.Core.Models.Attachment"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.Delete(System.Int32)">
            <summary>
              Permanently delete an <see cref="T:Weavy.Core.Models.Attachment"/> from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Attachment"/> to remove.</param>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.Trash(System.Int32)">
            <summary>
              Send an <see cref="T:Weavy.Core.Models.Attachment"/> to the trash.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.File"/> to trash.</param>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.Restore(System.Int32)">
            <summary>
              Restore an <see cref="T:Weavy.Core.Models.Attachment"/> from the trash.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Attachment"/> to restore.</param>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.Search(Weavy.Core.Models.AttachmentQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.AppQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.AppQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.App"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AttachmentRepo.GetForConversation(System.Int32,Weavy.Core.Models.QueryOptions)">
            <summary>
              Get attachments in the conversation.
            </summary>
            <param name="id"></param>
            <param name="opts"><see cref="T:Weavy.Core.Models.QueryOptions"/> for paging etc..</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Attachment"/> objects.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.BlobRepo">
            <summary>
              Repo for blobs.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.BlobRepo.BlobColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.HasThumb(Weavy.Core.Models.Blob)">
            <summary>
            Checks if the specified blob has any thumbnail data.
            </summary>
            <param name="blob">The blob.</param>
            <returns><c>true</c> if the blob exists; otherwise <c>false</c></returns>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.DownloadThumb(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Writes the thumbnail data of the file to the specified output stream.
            </summary>
            <param name="blob">The file.</param>
            <param name="output">The output stream where the data should be written.</param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.UploadThumb(System.Int32,System.IO.Stream)">
            <summary>
            Uploads thumb data to the repo.
            </summary>
            <param name="blobId">Id of the <see cref="T:Weavy.Core.Models.Blob"/> for which to upload thumb data.</param>
            <param name="input">The input stream from which to read thumb data.</param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.SetThumb(System.Int32)">
            <summary>
            Mark thumb as created.
            </summary>
            <param name="blobId">Id of the <see cref="T:Weavy.Core.Models.Blob"/> for which to set empty thumb.</param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.GetOrphanedBlobs">
            <summary>
            Returns blobs that are not connected to anything.
            </summary>
            <returns>The number of deleted blobs</returns>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.Get(System.Int32)">
            <summary>
            Get the specified blob.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.Get(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get the specified blobs.
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.Get(System.String)">
            <summary>
            Get the specified blob.
            </summary>
            <param name="etag"></param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.GetSize">
            <summary>
            Gets the size, in bytes, of all blobs in the repository.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.Insert(Weavy.Core.Models.Blob)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Blob"/> object into the repository.
            </summary>
            <param name="blob"><see cref="T:Weavy.Core.Models.Blob"/> object to insert.</param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.GetText(System.Int32)">
            <summary>
             Gets the extracted text for indexing.
            </summary>
            <param name="blobId">Id of <see cref="T:Weavy.Core.Models.Blob"/> for which to get extracted text.</param>
            <returns>A <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.SetText(System.Int32,System.String)">
            <summary>
             Sets the extracted text for indexing.
            </summary>
            <param name="blobId">Id of <see cref="T:Weavy.Core.Models.Blob"/> for which to set extracted text.</param>
            <param name="text">The extracted text to index.</param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.Update(Weavy.Core.Models.Blob)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Blob"/> in the datasource.
            </summary>
            <param name="blob"><see cref="T:Weavy.Core.Models.Blob"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.Delete(Weavy.Core.Models.Blob)">
            <summary>
            Permanently removes blob metadata from the repository.
            </summary>
            <param name="blob">The blob to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.BlobRepo.Search(Weavy.Core.Models.BlobQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.BlobQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.BlobQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Blob"/> items.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.AppRepo">
            <summary>
              Repo for <see cref="T:Weavy.Core.Models.App"/> objects.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.AppRepo.AppColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.CreateInstance(Weavy.Core.Models.AppRow)">
            <summary>
            Builds the correct App implementation from the specified database row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.CreateInstances(System.Collections.Generic.IEnumerable{Weavy.Core.Models.AppRow})">
            <summary>
            Builds the correct App implementation from the specified database rows.
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.Get(System.Int32)">
            <summary>
              Gets the specified <see cref="T:Weavy.Core.Models.App"/> from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.App"/>.</param>
            <returns>Returns an <see cref="T:Weavy.Core.Models.App"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.GetByKey(System.Int32,System.String)">
            <summary>
              Gets the specified <see cref="T:Weavy.Core.Models.App"/> from the repository.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/>.</param>
            <param name="key">Unique key of the <see cref="T:Weavy.Core.Models.App"/>.</param>
            <returns>Returns an <see cref="T:Weavy.Core.Models.App"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.GetByName(System.Int32,System.String)">
            <summary>
              Gets the specified <see cref="T:Weavy.Core.Models.App"/> from the repository.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/>.</param>
            <param name="name">Name of the <see cref="T:Weavy.Core.Models.App"/>.</param>
            <returns>Returns an <see cref="T:Weavy.Core.Models.App"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.GetByType(System.Int32,System.Guid)">
            <summary>
              Gets <see cref="T:Weavy.Core.Models.App"/>s with specified type from a space.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/>.</param>
            <param name="guid">Guid of app type to return.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.App"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.GetBySpace(System.Int32)">
            <summary>
              Gets apps for the specified <see cref="T:Weavy.Core.Models.Space"/> from the repository.
            </summary>
            <param name="id">Space id.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.App"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.GetSiblingByKey(Weavy.Core.Models.App)">
            <summary>
            Gets an <see cref="T:Weavy.Core.Models.App"/> by key from the repository (used to check for duplicates before insert/update).
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.GetSiblingByName(Weavy.Core.Models.App)">
            <summary>
            Gets an <see cref="T:Weavy.Core.Models.App"/> by name from the repository (used to check for duplicates before insert/update).
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.Insert(Weavy.Core.Models.App,System.Int32)">
            <summary>
              Inserts an <see cref="T:Weavy.Core.Models.App"/> item the repository.
            </summary>
            <param name="app">The <see cref="T:Weavy.Core.Models.App"/> item to insert.</param>
            <param name="spaceId"></param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.App"/></returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.Move(Weavy.Core.Models.App)">
            <summary>
              Moves an <see cref="T:Weavy.Core.Models.App"/> to the scecified space.
            </summary>
            <param name="app">App to move.</param>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes an <see cref="T:Weavy.Core.Models.App"/> from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.App"/> to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.Trash(System.Int32)">
            <summary>
              Trash an <see cref="T:Weavy.Core.Models.App"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.App"/> to trash.</param>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.Restore(System.Int32)">
            <summary>
              Restores a <see cref="T:Weavy.Core.Models.App"/> from the trash.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.App"/> to trash.</param>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.Search(Weavy.Core.Models.AppQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.AppQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.AppQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.App"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.AppRepo.Update(Weavy.Core.Models.App)">
            <summary>
              Updates an <see cref="T:Weavy.Core.Models.App"/> in the repo.
            </summary>
            <param name="app">The <see cref="T:Weavy.Core.Models.App"/> to update.</param>
            <returns>The updated <see cref="T:Weavy.Core.Models.App"/>.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.ContentRepo">
            <summary>
              Repo for <see cref="T:Weavy.Core.Models.Content"/> objects.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.ContentRepo.BlobColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Backup(System.Int32)">
            <summary>
              Copies the current <see cref="T:Weavy.Core.Models.Content"/> item to the the version history.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item that should be added to the version history.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.CreateInstance``1(Weavy.Core.Models.ContentRow)">
            <summary>
            Builds the correct Content implementation from the specified database row.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Get(System.Int32)">
            <summary>
              Gets the specified <see cref="T:Weavy.Core.Models.Content"/> from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/>.</param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.Content"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Get(System.Int32,System.Int64)">
            <summary>
            Gets a specified <see cref="T:Weavy.Core.Models.Content"/> version from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item.</param>
            <param name="timestamp">Timestamp of the version to return.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Content"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.GetDraft(System.Int32)">
            <summary>
            Gets a draft from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item.</param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.Content"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.GetSiblingByName(Weavy.Core.Models.Content)">
            <summary>
            Gets an <see cref="T:Weavy.Core.Models.Content"/> item by name from the repository (used to check for duplicates before insert/update).
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.GetAncestors(System.Int32)">
            <summary>
            Get ancestors of the specified <see cref="T:Weavy.Core.Models.Content"/>, starting with the closest parent and ending with the root item.
            </summary>
            <param name="id">Id (unique identifier).</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Content"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.GetDescendants(System.Int32,System.Nullable{System.Int32})">
            <summary>
              Returns the descendants of a content item. The apps are sorted like a tree. 
            </summary>
            <param name="id">Id of the content item for which to get descendants.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 1 returns only the immediate children. 
              If depth is <c>null</c>, the entire hierarchy is returned.
            </param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Content"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.GetHierarchy(System.Int32,System.Nullable{System.Int32})">
            <summary>
              Returns the content hierarchy in the specified <see cref="T:Weavy.Core.Models.App"/> sorted like a tree.
            </summary>
            <param name="appId">Id of the <see cref="T:Weavy.Core.Models.App"/> for which to get content.</param>
            <param name="depth">
              The maximum depth of content to return, i.e. setting depth to 1 returns only root content.
              If depth is <c>null</c>, the entire hierarchy is returned.
            </param>
            <returns>Returns a list of content items.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.GetVersions(System.Int32)">
            <summary>
            Gets the version history for an <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <param name="id">Id (unique identifier).</param>
            <returns>Returns a list of objects implementing the <see cref="T:Weavy.Core.Models.Content"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Insert(Weavy.Core.Models.Content,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Content"/> item the repository.
            </summary>
            <param name="content">The <see cref="T:Weavy.Core.Models.Content"/> item to insert.</param>
            <param name="parentId"></param>
            <param name="appId"></param>
            <returns>The id of the inserted content item.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Lock(System.Int32,System.Int32)">
            <summary>
              Lock a content item for edit.
            </summary>
            <param name="id">Id of content to lock.</param>
            <param name="userid">Id of user that locks the item.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Unlock(System.Int32)">
            <summary>
              Unlock an item.
            </summary>
            <param name="id">Id of content to inlock.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Move(Weavy.Core.Models.Content)">
            <summary>
              Moves an <see cref="T:Weavy.Core.Models.Content"/> item and its descendants to the scecified destination.
            </summary>
            <param name="content">Content to move.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Content"/> item from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Delete(System.Int32,System.Int64)">
            <summary>
              Permanently deletes the specified <see cref="T:Weavy.Core.Models.Content"/> version.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item to delete.</param>
            <param name="timestamp">Timestamp of the version to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Discard(System.Int32)">
            <summary>
            Permanently deletes a draft.
            </summary>
            <param name="id">If of the <see cref="T:Weavy.Core.Models.Content"/> item for which to delete draft.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Trash(System.Int32)">
            <summary>
              Trash a <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item to trash.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Restore(System.Int32)">
            <summary>
              Restores a <see cref="T:Weavy.Core.Models.Content"/> item from the trash.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item to trash.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Search``1(Weavy.Core.Models.ContentQuery{``0})">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.ContentQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.ContentQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Content"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ContentRepo.Update(Weavy.Core.Models.Content,Weavy.Core.Models.Content,Weavy.Core.Models.Content)">
            <summary>
              Updates a <see cref="T:Weavy.Core.Models.Content"/> item in the repository.
            </summary>
            <param name="content">The <see cref="T:Weavy.Core.Models.Content"/> item to update.</param>
            <param name="draft">The existing draft (if any)</param>
            /// <param name="locked">The existing locked item (if any)</param>
        </member>
        <member name="T:Weavy.Core.Repos.StatisticsRepo">
            <summary>
              Repo for usage statistics.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.StatisticsRepo.Insert(Weavy.Core.Models.StatisticsEntry)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.StatisticsEntry"/> object into the repository.
            </summary>
            <param name="e"><see cref="T:Weavy.Core.Models.StatisticsEntry"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="T:Weavy.Core.Repos.ExternalLinkRepo">
            <summary>
              Repo for <see cref="T:Weavy.Core.Models.ExternalLink"/> objects.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.ExternalLinkRepo.Get(System.Guid)">
            <summary>
              Gets an <see cref="T:Weavy.Core.Models.ExternalLink"/> object from the repository.
            </summary>
            <param name="id">Id of link.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.ExternalLink"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ExternalLinkRepo.Get(Weavy.Core.Models.IEntity)">
            <summary>
              Gets all <see cref="T:Weavy.Core.Models.ExternalLink"/>s for the specified <see cref="T:Weavy.Core.Models.IEntity"/> from the repository.
            </summary>
            <param name="entity">Entity for whicg to get links.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.ExternalLink"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ExternalLinkRepo.Insert(Weavy.Core.Models.ExternalLink)">
            <summary>
              Inserts an <see cref="T:Weavy.Core.Models.ExternalLink"/> object into the repository.
            </summary>
            <param name="link"><see cref="T:Weavy.Core.Models.ExternalLink"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.ExternalLinkRepo.Delete(System.Guid)">
            <summary>
              Deleted an <see cref="T:Weavy.Core.Models.ExternalLink"/> from the repository.
            </summary>
            <param name="id">Id of link.</param>
            <returns>Returns a value indicating whether the link was deleted or not.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ExternalLinkRepo.DeleteExpired">
            <summary>
              Deletes all expired <see cref="T:Weavy.Core.Models.ExternalLink"/>s from the repository.
            </summary>
            <returns>Returns the number links that were deleted.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ExternalLinkRepo.IncrementViews(System.Guid)">
            <summary>
              Increment the number of views for the <see cref="T:Weavy.Core.Models.ExternalLink"/>.
            </summary>
            <param name="id"></param>
            <returns>Returns the number updated <see cref="T:Weavy.Core.Models.ExternalLink"/>.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.CommentRepo">
            <summary>
              Repo for <see cref="T:Weavy.Core.Models.Comment"/> objects.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.CommentRepo.CommentColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.CommentRepo.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Comment"/> object from the repository.
            </summary>
            <param name="id">Id (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Comment"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.CommentRepo.Get(Weavy.Core.Models.IEntity)">
            <summary>
            Gets a list of comments for the specified entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.CommentRepo.GetCount">
            <summary>
              Gets the total number of <see cref="T:Weavy.Core.Models.Comment" /> items in the system.
            </summary>
            <returns>The total number of <see cref="T:Weavy.Core.Models.Comment" /> items in the system.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.CommentRepo.Insert(Weavy.Core.Models.Comment)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Comment"/> object into the repository.
            </summary>
            <param name="comment"><see cref="T:Weavy.Core.Models.Comment"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.CommentRepo.Update(Weavy.Core.Models.Comment)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Comment"/> in the datasource.
            </summary>
            <param name="comment"><see cref="T:Weavy.Core.Models.Comment"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.CommentRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Comment"/> object from the repository.
            </summary>
            <param name="id">Id (primary key).</param>
            <remarks>
              This will delete the object and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.CommentRepo.Trash(System.Int32)">
            <summary>
              Trashes a comment, i.e. sets the IsTrashed flag.
            </summary>
            <param name="id">Id of the comment.</param>
        </member>
        <member name="M:Weavy.Core.Repos.CommentRepo.Restore(System.Int32)">
            <summary>
              Restores a trashed <see cref="T:Weavy.Core.Models.Comment"/>, i.e. clears the IsTrashed flag.
            </summary>
            <param name="id">Id of the comment.</param>
        </member>
        <member name="M:Weavy.Core.Repos.CommentRepo.Search(Weavy.Core.Models.CommentQuery)">
            <summary>
            Performs a search according to the specified <see cref="T:Weavy.Core.Models.CommentQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.CommentQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Comment"/> items.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.EmbedRepo">
            <summary>
              Repo for <see cref="T:Weavy.Core.Models.Embed"/> objects.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.EmbedRepo.Get(System.Int32)">
            <summary>
              Gets an <see cref="T:Weavy.Core.Models.Embed"/> object from the repository.
            </summary>
            <param name="id">Id of embed.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Embed"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.EmbedRepo.Get(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get the specified blobs.
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:Weavy.Core.Repos.EmbedRepo.Get(Weavy.Core.Models.IHasEmbeds)">
            <summary>
              Gets <see cref="T:Weavy.Core.Models.Embed"/>s attached to the specified entity.
            </summary>
            <param name="entity"></param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Embed"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.EmbedRepo.Insert(Weavy.Core.Models.Embed)">
            <summary>
              Inserts an <see cref="T:Weavy.Core.Models.Embed"/> object into the repository.
            </summary>
            <param name="embed"><see cref="T:Weavy.Core.Models.Embed"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.EmbedRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Embed"/> object from the repository.
            </summary>
            <param name="id">Id of the embed to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.EmbedRepo.Update(Weavy.Core.Models.Embed)">
            <summary>
              Inserts an <see cref="T:Weavy.Core.Models.Embed"/> object into the repository.
            </summary>
            <param name="embed"><see cref="T:Weavy.Core.Models.Embed"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.EmbedRepo.GetForConversation(System.Int32,Weavy.Core.Models.QueryOptions)">
            <summary>
              Return embeds for the specified conversation.
            </summary>
            <param name="id"></param>
            <param name="opts"><see cref="T:Weavy.Core.Models.QueryOptions"/> for paging etc..</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Embed"/> objects.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.EntityRepo">
            <summary>
              Repo for entities.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.GetDeleted">
            <summary>
              Gets recently deleted entities from the repository.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.DeleteDeleted(Weavy.Core.Models.IEntity)">
            <summary>
              Delete deleted entity from the repository.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Follow(Weavy.Core.Models.IEntity,System.Int32)">
            <summary>
            Follows an entity.
            </summary>
            <param name="entity">The entity that is followed.</param>
            <param name="userId">Id of the user that follows the entity</param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Unfollow(Weavy.Core.Models.IEntity,System.Int32)">
            <summary>
            Unfollows an entity.
            </summary>
            <param name="entity">The entity that is unfollowed.</param>
            <param name="userId">Id of the user that unfollows the entity</param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Like(Weavy.Core.Models.IEntity,System.Int32)">
            <summary>
            Likes an entity.
            </summary>
            <param name="entity">The entity that is liked.</param>
            <param name="userId">Id of the user that likes the entity</param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Unlike(Weavy.Core.Models.IEntity,System.Int32)">
            <summary>
            Unlikes an entity.
            </summary>
            <param name="entity">The entity that is inliked.</param>
            <param name="userId">Id of the user that unlikes the entity</param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Star(Weavy.Core.Models.IEntity,System.Int32)">
            <summary>
            Star an entity.
            </summary>
            <param name="entity">The entity that is starred.</param>
            <param name="userId">Id of the user that stars the entity.</param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Unstar(Weavy.Core.Models.IEntity,System.Int32)">
            <summary>
            Unstar an entity.
            </summary>
            <param name="entity">The entity that is unstarred.</param>
            <param name="userId">Id of the user that unstars the entity</param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Visit(Weavy.Core.Models.IVisitable,System.Int32)">
            <summary>
            Visit an entity.
            </summary>
            <param name="visitable">The entity that is visited.</param>
            <param name="userId">Id of the user that visited the entity.</param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Unvisit(Weavy.Core.Models.IVisitable,System.Int32)">
            <summary>
            Remove a visit.
            </summary>
            <param name="visitable">The entity that is unvisited.</param>
            <param name="userId">Id of the user that unvisited the entity.</param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.GetVisits(Weavy.Core.Models.EntityType,System.Int32,System.Int32)">
            <summary>
            Get the most recent visits for the specified entity type and user.
            </summary>
            <param name="type">The type of entity for which to return visits.</param>
            <param name="userId">Id of the user that unvisited the entity.</param>
            <param name="count">The maximum number of entities to return.</param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.GetLikeCount">
            <summary>
            Gets the total number of likes in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.GetStarCount">
            <summary>
            Gets the total number of stars in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.GetTagCount(System.Boolean)">
            <summary>
            Gets the total number of tags in the system.
            </summary>
            <param name="distinct"><c>true</c> to get unique tags, otherwise <c>false</c></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Search(Weavy.Core.Models.EntityQuery)">
            <summary>
            Performs a search according to the specified <see cref="T:Weavy.Core.Models.EntityQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.EntityQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of events.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.Search(Weavy.Core.Models.TrashQuery)">
            <summary>
            Returns a list of trashed entities from the recycle bin matching the supplied query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.GetMentions(Weavy.Core.Models.IEntity)">
            <summary>
            Gets the list of mentions for the given entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.GetTags(Weavy.Core.Models.IEntity)">
            <summary>
            Gets the list of tags for the given entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.SetTags(Weavy.Core.Models.IEntity,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set tags for the specified entity.
            </summary>
            <param name="entity"></param>
            <param name="tags"></param>
        </member>
        <member name="M:Weavy.Core.Repos.EntityRepo.SetMentions(Weavy.Core.Models.IEntity,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
              Store the mentions for an entity.
            </summary>
            <param name="entity">The entity for which to store mentions.</param>
            <param name="userids">The list of userids to store, <c>null</c> or empty list to clear mentions from the entity.</param>
            <param name="spaceids">The list of spaceids to store, <c>null</c> or empty list to clear mentions from the entity.</param>
        </member>
        <member name="T:Weavy.Core.Repos.LogEntryRepo">
            <summary>
              Repo for log entries.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.LogEntryRepo.Get(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
              Gets a list of <see cref="T:Weavy.Core.Models.LogEntry"/> objects from the repository.
            </summary>
            <param name="ids">Ids of the entries to get.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.LogEntry"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.LogEntryRepo.Insert(Weavy.Core.Models.LogEntry)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.LogEntry"/> object into the repository.
            </summary>
            <param name="e"><see cref="T:Weavy.Core.Models.LogEntry"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.LogEntryRepo.Delete(System.Int32)">
            <summary>
            Removes all <see cref="T:Weavy.Core.Models.LogEntry"/>s user with the specified actor id.
            </summary>
            <param name="actorId">The user id of the actor to remove <see cref="T:Weavy.Core.Models.LogEntry"/>s for.</param>
        </member>
        <member name="M:Weavy.Core.Repos.LogEntryRepo.Search(Weavy.Core.Models.LogEntryQuery)">
            <summary>
            Performs a search according to the specified <see cref="T:Weavy.Core.Models.LogEntryQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.LogEntryQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of events.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.RoleRepo">
            <summary>
              Repo for roles.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.RoleRepo.RoleColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.RoleRepo.AddUserToRole(System.Int32,System.Int32)">
            <summary>
              Adds a <see cref="T:Weavy.Core.Models.User"/> to the specified <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <param name="roleId">Id of the <see cref="T:Weavy.Core.Models.Role"/>.</param>
        </member>
        <member name="M:Weavy.Core.Repos.RoleRepo.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Role"/> object from the repository.
            </summary>
            <param name="id">Id (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Role"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.RoleRepo.Get(System.String)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Role"/> object from the repository.
            </summary>
            <param name="name">Name of role.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Role"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.RoleRepo.Insert(Weavy.Core.Models.Role)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Role"/> object into the repository.
            </summary>
            <param name="role"><see cref="T:Weavy.Core.Models.Role"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.RoleRepo.Delete(System.Int32)">
            <summary>
              Permanently removes a <see cref="T:Weavy.Core.Models.Role"/> object from the repository.
            </summary>
            <param name="id">Id (primary key).</param>
        </member>
        <member name="M:Weavy.Core.Repos.RoleRepo.RemoveUserFromRole(System.Int32,System.Int32)">
            <summary>
              Removes a <see cref="T:Weavy.Core.Models.User"/> from the specified <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <param name="roleId">Id of the <see cref="T:Weavy.Core.Models.Role"/>.</param>
        </member>
        <member name="M:Weavy.Core.Repos.RoleRepo.Search(Weavy.Core.Models.RoleQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.RoleQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.RoleQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Role"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.RoleRepo.Update(Weavy.Core.Models.Role)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Role"/> in the datasource.
            </summary>
            <param name="role"><see cref="T:Weavy.Core.Models.Role"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="T:Weavy.Core.Repos.SqlHelper">
            <summary>
            Various helper methods for database access.
            </summary>
        </member>
        <member name="F:Weavy.Core.Repos.SqlHelper.BUFFER_SIZE">
            <summary>
            The buffer size used when uploading/downloading binary data from the database.
            </summary>
            <remarks>
            For best performance buffer size should be a multiple of 8040. See https://docs.microsoft.com/en-us/sql/t-sql/queries/update-transact-sql?view=sql-server-ver15#updating-lobs.
            </remarks>
        </member>
        <member name="F:Weavy.Core.Repos.SqlHelper.COMMAND_TIMEOUT">
            <summary>
            The command timeout (in seconds) to use when deleting things (especially blobs) from the database. Needed becacuse SQL Azure can sometimes be really slow...
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:Weavy.Core.Repos.SqlHelper.ConnectionString">
            <summary>
            Gets the connection string to the database.
            </summary>
        </member>
        <member name="P:Weavy.Core.Repos.SqlHelper.Status">
            <summary>
            Gets the database status.
            </summary>
        </member>
        <member name="P:Weavy.Core.Repos.SqlHelper.Error">
            <summary>
            Gets the database error message, <c>null</c> if no errors were detected during initialization.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.Initialize">
            <summary>
            Initializes the database.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.CanOpen">
            <summary>
            Check if we can open the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GetConnection">
            <summary>
            Gets an open connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GetConnectionAsync">
            <summary>
            Gets an open connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GenerateComb">
            <summary>
            Generate a new <see cref="T:System.Guid"/> using a strategy suggested by Jimmy Nilsson on http://www.informit.com/articles/article.asp?p=25862. 
            The <c>comb</c> algorithm is designed to make the use of GUIDs as Primary Keys, Foreign Keys, and Indexes nearly as efficient as ints.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.HasRequiredServerProperties">
            <summary>
            Check that SQL Server >= 2008
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.HasRequiredPermissions">
            <summary>
            Check that database user has the required permissions to run the schema.sql script.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.IsEmpty">
            <summary>
            Check if the database is empty.
            </summary>
            <returns><c>true</c> if the database is empty; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GetVersion">
            <summary>
              Gets the version number of the database.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GetSize">
            <summary>
            Gets the size, in bytes, of the database.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GetTimestamp(System.Nullable{Weavy.Core.Models.EntityType})">
            <summary>
              Gets the value of the current timestamp from the database.
            </summary>
            <param name="type">When specified, gets latest timestamp for the specified <see cref="T:Weavy.Core.Models.EntityType"/>, otherwise gets the timestamp for the entire database.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.RunScript(System.String)">
            <summary>
            Runs the specified SQL against the database.
            </summary>
            <param name="sql">The SQL to run.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.RunScriptFile(System.String)">
            <summary>
            Runs the specified SQL-script against the database.
            </summary>
            <param name="path">The path to the SQL-script to run.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GetUpgradeScripts(System.String)">
            <summary>
            Gets a list of all upgrade scripts embedded in the assembly.
            </summary>
            <param name="version">The version from which to upgrade, <c>null</c> returns all upgrade scripts.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GetEmbeddedScript(System.String)">
            <summary>
            Gets an embedded sql script from the current assembly.
            </summary>
            <param name="name">Name of embedded resource.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GetExpectedVersion">
            <summary>
            Returns the expected database version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.Upgrade(System.IO.TextWriter)">
            <summary>
            Update the repository to the latest version.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.TableName(Weavy.Core.Models.IEntity)">
            <summary>
            Gets the table name where the reference should be stored.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.TableName(Weavy.Core.Models.EntityType)">
            <summary>
            Gets the table name where the reference should be stored.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.QuerySingleOrDefault``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.String)">
            <summary>
            Perform a multi-mapping query with 2 input types. This returns a single type, combined from the raw types via map.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="splitOn"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.QuerySingleOrDefault``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.String)">
            <summary>
            Perform a multi-mapping query with 3 input types. This returns a single type, combined from the raw types via map.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="splitOn"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.QuerySingleOrDefault``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.String)">
            <summary>
            Perform a multi-mapping query with 3 input types. This returns a single type, combined from the raw types via map.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="splitOn"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.QuerySingleOrDefault``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.String)">
            <summary>
            Perform a multi-mapping query with 5 input types. This returns a single type, combined from the raw types via map.
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="splitOn"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.IsNullable(System.Type)">
            <summary>
            Returns true if the type is nullable.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.ForWith(System.String)">
            <summary>
            Rewrites a list of columns so that the can be used in the WITH clause of a common table expression (CTE).
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.ForSelect(System.String)">
            <summary>
            Rewrites a list of columns so that the can be used in the SELECT clause of a common table expression (CTE).
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SqlHelper.GetOrderByForContent(Weavy.Core.Models.SortBy)">
            <summary> 
            Gets sql for ordering by the specified sort property.
            </summary>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Repos.IntsHandler">
            <summary>
            Type handler for mapping list of ints to/from comma separated string.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.IntsHandler.SetValue(System.Data.IDbDataParameter,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
             Set the parameter value to a comma separated string before a command executes.
            </summary>
            <param name="parameter"></param>
            <param name="value"></param>
        </member>
        <member name="M:Weavy.Core.Repos.IntsHandler.Parse(System.Object)">
            <summary>
            Parse comma-separated string back to ints.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Repos.StringsHandler">
            <summary>
            Type handler for mapping list of strings to/from comma separated string.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.StringsHandler.SetValue(System.Data.IDbDataParameter,System.Collections.Generic.IList{System.String})">
            <summary>
             Set the parameter value to a comma separated string before a command executes.
            </summary>
            <param name="parameter"></param>
            <param name="value"></param>
        </member>
        <member name="M:Weavy.Core.Repos.StringsHandler.Parse(System.Object)">
            <summary>
            Parse comma-separated string back to list of strings.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Repos.TokensHandler">
            <summary>
            Type handler for mapping twitter text token to/from json.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.TokensHandler.SetValue(System.Data.IDbDataParameter,System.Collections.Generic.IEnumerable{Weavy.Core.TwitterText.Token})">
            <summary>
             Set the parameter value to a json string before a command executes.
            </summary>
            <param name="parameter"></param>
            <param name="value"></param>
        </member>
        <member name="M:Weavy.Core.Repos.TokensHandler.Parse(System.Object)">
            <summary>
            Parse json back to list of tokens.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Repos.LoginRepo">
            <summary>
              Repo for logins.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.LoginRepo.LoginColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.LoginRepo.Get(System.Int32)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.Login"/> with the specified id.
            </summary>
            <param name="id"></param>
            <returns>Return a <see cref="T:Weavy.Core.Models.Login"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.LoginRepo.Get(System.String,System.String)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.Login"/> with the specified iss and sub.
            </summary>
            <param name="iss"></param>
            <param name="sub"></param>
            <returns>Return a <see cref="T:Weavy.Core.Models.Login"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.LoginRepo.GetWindowsLogin(System.String)">
            <summary>
              Gets Windows <see cref="T:Weavy.Core.Models.Login"/> with specified sid.
            </summary>
            <param name="sid"></param>
            <returns>Return a <see cref="T:Weavy.Core.Models.Login"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.LoginRepo.GetByUser(System.Int32)">
            <summary>
              Get logins for the specified user.
            </summary>
            <param name="userId">User id.</param>
            <returns>Return a list of <see cref="T:Weavy.Core.Models.Login"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.LoginRepo.GetByTypeAndIssuer(System.String,System.String)">
            <summary>
              Get logins with the specified type and issuer.
            </summary>
            <param name="type"></param>
            <param name="iss"></param>    
            <returns>Return a list of <see cref="T:Weavy.Core.Models.Login"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.LoginRepo.Insert(Weavy.Core.Models.Login)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Login"/> object into the repository.
            </summary>
            <param name="login"><see cref="T:Weavy.Core.Models.Login"/> object to insert.</param>
        </member>
        <member name="M:Weavy.Core.Repos.LoginRepo.Update(Weavy.Core.Models.Login)">
            <summary>
              Updates a <see cref="T:Weavy.Core.Models.Login"/> object in the repository.
            </summary>
            <param name="login"><see cref="T:Weavy.Core.Models.Login"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.LoginRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Login"/> object from the repository.
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Weavy.Core.Repos.MessageRepo">
            <summary>
              Repo for messages.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.MessageRepo.MessageColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.MessageRepo.Get(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
              Gets a list of <see cref="T:Weavy.Core.Models.Message"/> objects from the repository.
            </summary>
            <param name="ids">Ids of the messages.</param>
            <returns>Returns an list of the <see cref="T:Weavy.Core.Models.Message"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.MessageRepo.Insert(Weavy.Core.Models.Message)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Message"/> object into the repository.
            </summary>
            <param name="message"><see cref="T:Weavy.Core.Models.Message"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.MessageRepo.Delete(System.Int32)">
            <summary>
            Permanently deletes the <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Message"/> object to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.MessageRepo.Update(Weavy.Core.Models.Message)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Message"/> in the datasource.
            </summary>
            <param name="message"><see cref="T:Weavy.Core.Models.Message"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.MessageRepo.Search(Weavy.Core.Models.MessageQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.MessageQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.MessageQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Message"/> objects.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.PostRepo">
            <summary>
              Repo for posts.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.PostRepo.PostColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Post"/> object from the repository.
            </summary>
            <param name="id">Id of the post.</param>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.Trash(System.Int32)">
            <summary>
              Trashes a <see cref="T:Weavy.Core.Models.Post"/>, i.e. sets the IsTrashed flag.
            </summary>
            <param name="id">Id of the post.</param>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.Restore(System.Int32)">
            <summary>
              Restores a trashed <see cref="T:Weavy.Core.Models.Post"/>, i.e. clears the IsTrashed flag.
            </summary>
            <param name="id">Id of the post.</param>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Post"/> object from the repository.
            </summary>
            <param name="id">Id of the post.</param>
            <returns>Returns a <see cref="T:Weavy.Core.Models.Post"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.GetOption(System.Int32)">
            <summary>
              Gets the specified <see cref="T:Weavy.Core.Models.PollOption"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.PollOption"/>.</param>
            <returns>Returns a <see cref="T:Weavy.Core.Models.PollOption"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.GetOptions(System.Int32)">
            <summary>
              Gets a list of <see cref="T:Weavy.Core.Models.PollOption"/> for the specified <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Post"/>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.PollOption"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.Insert(Weavy.Core.Models.Post)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Post"/> object into the repository.
            </summary>
            <param name="post"><see cref="T:Weavy.Core.Models.Post"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.Update(Weavy.Core.Models.Post)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Post"/> in the datasource.
            </summary>
            <param name="post"><see cref="T:Weavy.Core.Models.Post"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.Pin(System.Int32,System.Int32)">
            <summary>
              Pin the specified post.
            </summary>
            <param name="id">Id of <see cref="T:Weavy.Core.Models.Post"/> to pin.</param>
            <param name="userId"></param>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.Unpin(System.Int32)">
            <summary>
              Unpin the specified post.
            </summary>
            <param name="id">Id of <see cref="T:Weavy.Core.Models.Post"/> to pin.</param>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.Search(Weavy.Core.Models.PostQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.PostQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.PostQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Post"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.SetOptions(System.Int32,System.Collections.Generic.IEnumerable{Weavy.Core.Models.PollOption})">
            <summary>
            Set poll options for the specified poll/post. Note that this will replace existing options.
            </summary>
            <param name="id"></param>
            <param name="options"></param>
            <returns></returns>        
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.UpdateOptions(System.Int32,System.Collections.Generic.IEnumerable{Weavy.Core.Models.PollOption})">
            <summary>
            Update the poll options for the specified poll/post. 
            </summary>
            <param name="id"></param>
            <param name="options"></param>
            <returns></returns>        
        </member>
        <member name="M:Weavy.Core.Repos.PostRepo.SelectOption(System.Int32,System.Int32)">
            <summary>
            Select the specified poll option.
            </summary>
            <param name="id"></param>
            <param name="userid"></param>
            <returns></returns>        
        </member>
        <member name="T:Weavy.Core.Repos.NotificationRepo">
            <summary>
              Repo for notifications.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.NotificationRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Notification"/> object from the repository.
            </summary>
            <param name="id">Id of the notification.</param>
        </member>
        <member name="M:Weavy.Core.Repos.NotificationRepo.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Notification"/> object from the repository.
            </summary>
            <param name="id">Id of notification.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Notification"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.NotificationRepo.Insert(Weavy.Core.Models.Notification)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Notification"/> object into the repository.
            </summary>
            <param name="notification"><see cref="T:Weavy.Core.Models.Notification"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.NotificationRepo.Update(Weavy.Core.Models.Notification)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Notification"/>.
            </summary>
            <param name="notification"><see cref="T:Weavy.Core.Models.Notification"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.NotificationRepo.Cleanup(System.Int32)">
            <summary>
              Permanently deletes old <see cref="T:Weavy.Core.Models.Notification"/> objects from the repository.
            </summary>
            <param name="days">Delete notifications that were read this many days ago.</param>
        </member>
        <member name="M:Weavy.Core.Repos.NotificationRepo.ReadAll(System.Int32,System.Nullable{System.Int32})">
            <summary>
              Mark all unread notifications for a user as read. 
              Optionally the id of the last viewed notification could be passed in, so that un-viewed notifications aren not marked as read.
            </summary>
            <param name="userId">Id of user.</param>
            <param name="id">Id of the last viewed notification</param>
        </member>
        <member name="M:Weavy.Core.Repos.NotificationRepo.Search(Weavy.Core.Models.NotificationQuery)">
            <summary>
            Performs a search according to the specified <see cref="T:Weavy.Core.Models.NotificationQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.NotificationQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of notifications.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.PluginRepo">
            <summary>
              Repo for plugins.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.PluginRepo.PluginColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.PluginRepo.CreateInstance(Weavy.Core.Models.Plugin)">
            <summary>
            Creates the actual plugin instance.
            </summary>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.PluginRepo.GetAll">
            <summary>
              Gets the list of plugins and their settings from the repository.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.PluginRepo.GetAll(Weavy.Core.Models.PluginType)">
            <summary>
              Gets the list of plugins from the repository.
            </summary>
            <param name="type"></param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.IPlugin"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.PluginRepo.Get(System.Guid)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.IPlugin"/> from the repository.
            </summary>
            <param name="id">Id (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.IPlugin"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.PluginRepo.Insert(Weavy.Core.Models.IPlugin)">
            <summary>
              Inserts an <see cref="T:Weavy.Core.Models.IPlugin"/> object into the repository.
            </summary>
            <param name="plugin">Plugin to insert.</param>
        </member>
        <member name="M:Weavy.Core.Repos.PluginRepo.Delete(System.Guid)">
            <summary>
              Permanently deletes plugin settings from the repository.
            </summary>
            <param name="id">Id of the plugin.</param>
        </member>
        <member name="M:Weavy.Core.Repos.PluginRepo.Update(Weavy.Core.Models.IPlugin)">
            <summary>
              Updates an existing plugin in the repository.
            </summary>
            <param name="plugin">Plugin to update.</param>
        </member>
        <member name="T:Weavy.Core.Repos.SettingRepo">
            <summary>
              Repo for settings.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.SettingRepo.Get(System.String)">
            <summary>
            Gets a setting value from the repository.
            </summary>
            <param name="key">Setting key.</param>
            <returns>Returns a string containing the value of the setting.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SettingRepo.Insert(System.String,System.String)">
            <summary>
            Inserts a setting into the repository.
            </summary>
            <param name="key">Setting key.</param>
            <param name="value">The value of the setting.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SettingRepo.Delete(System.String)">
            <summary>
              Permanently delete a setting from the repository.
            </summary>
            <param name="key">Setting key</param>
        </member>
        <member name="M:Weavy.Core.Repos.SettingRepo.Update(System.String,System.String)">
            <summary>
              Updates an existing setting in the datasource.
            </summary>
            <param name="key">Setting name (unique identifier).</param>
            <param name="value">The value of the setting.</param>
        </member>
        <member name="T:Weavy.Core.Repos.ConversationRepo">
            <summary>
              Repot for <see cref="T:Weavy.Core.Models.Conversation"/> objects.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes the <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/> object to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.Get(System.Int32,System.Nullable{System.Int32})">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Conversation"/> object from the repository.
            </summary>
            <param name="id">Id of conversation.</param>
            <param name="userId">Get as user with this id.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Conversation"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.GetOneOnOne(System.Int32,System.Int32)">
            <summary>
              Gets an existing one-on-one <see cref="T:Weavy.Core.Models.Conversation"/> between 2 people from the repository.
            </summary>
            <param name="first">Id of the first user</param>
            <param name="second">Id of the second user</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Conversation"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.GetMember(System.Int32,System.Int32)">
            <summary>
              Returns a space <see cref="T:Weavy.Core.Models.Member"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Space"/> for which to get member.</param>
            <param name="userid">Id of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Returns a <see cref="T:Weavy.Core.Models.ConversationMember"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.GetMembers(System.Int32,Weavy.Core.Models.ConversationMemberQuery)">
            <summary>
              Returns the members of the <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/> for which to get members.</param>
            <param name="query">The <see cref="T:Weavy.Core.Models.Query"/> object that contains search criterias.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.ConversationMember"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.CreateMember(Weavy.Core.Models.ConversationMember,Weavy.Core.Models.ProfileBase,Weavy.Core.Models.Blob)">
            <summary>
            Returns a fully populated user with the correct profile implementation and avatar.
            </summary>
            <param name="member"></param>
            <param name="profile"></param>
            <param name="avatar"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.Insert(Weavy.Core.Models.Conversation)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Conversation"/> object into the repository.
            </summary>
            <param name="conversation"><see cref="T:Weavy.Core.Models.Conversation"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.RemoveMember(System.Int32,System.Int32)">
            <summary>
              Removes a <see cref="T:Weavy.Core.Models.User"/> from the specified <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="conversationId">Id of the <see cref="T:Weavy.Core.Models.Conversation"/>.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/>.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.SetArchived(System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
              Sets a value indicating if the <see cref="T:Weavy.Core.Models.Conversation"/> is archived.
            </summary>
            <param name="conversationId">The id of the conversation.</param>
            <param name="userId">The id of user.</param>
            <param name="archivedAt">The value to set. Set to <c>null</c> to un-archive.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.SetDelivered(System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
              Sets a value indicating when the last message in the conversation was delivered to the specified user.
            </summary>
            <param name="conversationId">The id of the conversation.</param>
            <param name="userId">The id of user.</param>
            <param name="deliveredAt">The value to set. Set to <c>null</c> to clear the delivery status.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.SetRead(System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
              Sets a value indicating when the <see cref="T:Weavy.Core.Models.Conversation"/> was read.
            </summary>
            <param name="conversationId">The id of the conversation.</param>
            <param name="userId">The id of user.</param>
            <param name="readAt">The value to set. Set to <c>null</c> to mark the entire conversation as unread.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.SetPinned(System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
              Sets a value indicating if the <see cref="T:Weavy.Core.Models.Conversation"/> is pinned or not.
            </summary>
            <param name="conversationId">The id of the conversation.</param>
            <param name="userId">The id of user.</param>
            <param name="pinnedAt">The date when the conversation was pinned, or <c>null</c> to unpin the conversation.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.ReadAll(System.Int32)">
            <summary>
              Mark all a users' conversations as read.
            </summary>
            <param name="userId">The id of user.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.Search(Weavy.Core.Models.ConversationQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.ConversationQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.ConversationQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Conversation"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.SetNotified(System.Int32,System.Int32,System.Nullable{System.DateTime})">
            <summary>
              Marks a <see cref="T:Weavy.Core.Models.Conversation"/> as notified.
            </summary>
            <param name="id">Id of conversation.</param>
            <param name="userId"></param>
            <param name="notifiedAt"></param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Conversation"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.Update(Weavy.Core.Models.Conversation)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Conversation"/> in the datasource.
            </summary>
            <param name="conversation"><see cref="T:Weavy.Core.Models.Conversation"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConversationRepo.UpsertMember(System.Int32,System.Int32,Weavy.Core.Models.Access)">
            <summary>
              Insert or update the specified <see cref="T:Weavy.Core.Models.User"/> as a member in the specified <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="conversationId">Id of the <see cref="T:Weavy.Core.Models.Conversation"/>.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <param name="access">The permissions to set for the user.</param>
        </member>
        <member name="T:Weavy.Core.Repos.SpaceRepo">
            <summary>
              Repo for spaces.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.CreateMember(Weavy.Core.Models.Member,Weavy.Core.Models.ProfileBase,Weavy.Core.Models.Blob)">
            <summary>
            Returns a fully populated member with the correct profile implementation and avatar.
            </summary>
            <param name="member"></param>
            <param name="profile"></param>
            <param name="avatar"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.Delete(System.Int32)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="id">Id of the space to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.Archive(System.Int32)">
            <summary>
              Archived a space, i.e. sets the IsArchived flag.
            </summary>
            <param name="id">Id of the space.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.Unarchive(System.Int32)">
            <summary>
              Unarchive a space, i.e. clears the IsArchived flag.
            </summary>
            <param name="id">Id of the space.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.Trash(System.Int32)">
            <summary>
              Trashes a space, i.e. sets the IsTrashed flag.
            </summary>
            <param name="id">Id of the space.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Space"/> object from the repository.
            </summary>
            <param name="id">Id of space.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Space"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.GetByName(System.String,System.String)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Space"/> object from the repository.
            </summary>
            <param name="name">Name of space.</param>
            <param name="key">Unique key of space.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Space"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.GetByKey(System.String)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Space"/> object from the repository.
            </summary>
            <param name="key">Unique key of space.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Space"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.GetByTeamname(System.String)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Space"/> object from the repository.
            </summary>
            <param name="teamname">Teamname used for @mentions.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Space"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.GetVisited(System.Int32,System.Int32)">
            <summary>
              Get recently visited spaces.
            </summary>
            <param name="count">Max number of spaces to return .</param>
            <param name="userId"></param>
            <returns>Returns a list <see cref="T:Weavy.Core.Models.Space"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.Insert(Weavy.Core.Models.Space)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Space"/> object into the repository.
            </summary>
            <param name="space"><see cref="T:Weavy.Core.Models.Space"/> object to insert.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.RemoveMember(System.Int32,System.Int32)">
            <summary>
              Removes a <see cref="T:Weavy.Core.Models.User"/> from the specified <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/>.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/>.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.Restore(System.Int32)">
            <summary>
              Restores a trashed <see cref="T:Weavy.Core.Models.Space"/> and its descendants, i.e. clears the IsTrashed flag.
            </summary>
            <param name="id">Id (primary key).</param>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.GetMember(System.Int32,System.Int32)">
            <summary>
              Returns a space <see cref="T:Weavy.Core.Models.Member"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Space"/> for which to get member.</param>
            <param name="userid">Id of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Returns a <see cref="T:Weavy.Core.Models.Member"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.GetMembers(System.Int32,Weavy.Core.Models.MemberQuery)">
            <summary>
              Returns the <see cref="T:Weavy.Core.Models.User"/> that are members of the <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Space"/> for which to get members.</param>
            <param name="query">The <see cref="T:Weavy.Core.Models.MemberQuery"/> object that contains search criterias.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Member"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.Search(Weavy.Core.Models.SpaceQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.SpaceQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.SpaceQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Space"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.Update(Weavy.Core.Models.Space)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Space"/> in the datasource.
            </summary>
            <param name="space"><see cref="T:Weavy.Core.Models.Space"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.SpaceRepo.UpsertMember(System.Int32,System.Int32,Weavy.Core.Models.Access)">
            <summary>
              Insert or update the specified <see cref="T:Weavy.Core.Models.User"/> as a member in the specified <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/>.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <param name="access">The access rights to set for the user.</param>
        </member>
        <member name="T:Weavy.Core.Repos.ConnectionRepo">
            <summary>
              Repo for <see cref="T:Weavy.Core.Models.Connection"/> objects.
            </summary>    
        </member>
        <member name="M:Weavy.Core.Repos.ConnectionRepo.Get(System.Guid)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Connection"/> from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Connection"/> to get.</param>
            <returns>Returns a <see cref="T:Weavy.Core.Models.Connection"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConnectionRepo.GetAll">
            <summary>
            Get a list of all tracked connections.
            </summary>
            <returns>A list of <see cref="T:Weavy.Core.Models.Connection"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConnectionRepo.GetByUser(System.Int32)">
            <summary>
              Gets all <see cref="T:Weavy.Core.Models.Connection"/> objects for the specified <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.User"/> for which to get connections.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Connection"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.ConnectionRepo.Insert(Weavy.Core.Models.Connection)">
            <summary>
            Insert a <see cref="T:Weavy.Core.Models.Connection"/>.
            </summary>
            <param name="connection">The connection to insert.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConnectionRepo.Update(Weavy.Core.Models.Connection)">
            <summary>
            Update a <see cref="T:Weavy.Core.Models.Connection"/>.
            </summary>
            <param name="connection">The connection to update.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConnectionRepo.Delete(System.Guid)">
            <summary>
            Delete a connection from the database.
            </summary>
            <param name="id">Id of the connection to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.ConnectionRepo.DeleteZombies(System.Int32)">
            <summary>
              Delete zombie connections that haven't been updated in <paramref name="threshold"/> seconds.
            </summary>
            <param name="threshold">The number of seconds that have to pass to consider a connection dead.</param>
            <returns>The number of deleted connections.</returns>
        </member>
        <member name="T:Weavy.Core.Repos.UserRepo">
            <summary>
              Repo for users.
            </summary>    
        </member>
        <member name="F:Weavy.Core.Repos.UserRepo.UserColumns">
            <summary>
              The list of columns for SELECT statements.
            </summary>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.SetProfile(Weavy.Core.Models.User,Weavy.Core.Models.ProfileBase,Weavy.Core.Models.Blob)">
            <summary>
            Returns a fully populated user with the correct profile implementation and avatar.
            </summary>
            <param name="user"></param>
            <param name="profile"></param>
            <param name="avatar"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.AreCollaborators(System.Int32,System.Int32)">
            <summary>
            Checks if two users can collaborate, i.e. if they are members of the same directory or if they share at least one space or conversation.
            </summary>
            <param name="userId1"></param>
            <param name="userId2"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.CountWindowsUsers">
            <summary>
            Gets the number of enabled users with a windows login.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.CountNonWindowsUsers">
            <summary>
            Gets the number of enabled user without a windows login.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.User"/> object from the repository.
            </summary>
            <param name="id">ID (primary key).</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetByEmail(System.String)">
            <summary>
              Gets the Id of the <see cref="T:Weavy.Core.Models.User"/>s with the specified email address.
            </summary>
            <param name="email">Email of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Weavy.Core.Models.User"/> item has the specified email.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetByGuid(System.Guid)">
            <summary>
              Gets the Id of the <see cref="T:Weavy.Core.Models.User"/>s with the specified guid.
            </summary>
            <param name="guid">Guid of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Weavy.Core.Models.User"/> item has the specified guid.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetByToken(System.String)">
            <summary>
              Gets the Id of the <see cref="T:Weavy.Core.Models.User"/> with the specified token.
            </summary>
            <param name="token">Token of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Weavy.Core.Models.User"/> item has the specified token.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetByUsername(System.String)">
            <summary>
              Gets the Id of the <see cref="T:Weavy.Core.Models.User"/> with the specified username.
            </summary>
            <param name="username">Username of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Weavy.Core.Models.User"/> item has the specified username.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetLastSeen(System.Int32)">
            <summary>
              Gets a <see cref="T:System.DateTime"/> object indicating when the specified <see cref="T:Weavy.Core.Models.User"/> was last seen.
            </summary>
            <param name="id">Id od the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Returns an instance of the <see cref="T:System.DateTime"/> class, or <c>null</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetRoleMembers(System.Int32,Weavy.Core.Models.UserQuery)">
            <summary>
             Get users that that are members in the specified role.
            </summary>
            <param name="roleId"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetFollowers(Weavy.Core.Models.IEntity,Weavy.Core.Models.QueryOptions)">
            <summary>
             Get users that follow the specified entity.
            </summary>
            <param name="entity"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetFollowing(Weavy.Core.Models.User,Weavy.Core.Models.Query)">
            <summary>
             Get users that the specified user is following.
            </summary>
            <param name="user"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetLikers(Weavy.Core.Models.IEntity,Weavy.Core.Models.QueryOptions)">
            <summary>
            Get users that like the specified entity.
            </summary>
            <param name="entity"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetStarrers(Weavy.Core.Models.IEntity,Weavy.Core.Models.QueryOptions)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetVoters(System.Int32)">
            <summary>
            Gets the people that voted for the specified poll option.
            </summary>
            <param name="optionid"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetMentioned(Weavy.Core.Models.IEntity,Weavy.Core.Models.QueryOptions)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.Insert(Weavy.Core.Models.User,System.String)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.User"/> object into the repository.
            </summary>
            <param name="user"><see cref="T:Weavy.Core.Models.User"/> object to insert.</param>
            <param name="password"></param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. identity or computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.IsUsernameTaken(System.String)">
            <summary>
            Returns a value indicating whether the specified username is taken.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.Search(Weavy.Core.Models.UserQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.UserQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.UserQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.User"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.Search(Weavy.Core.Models.UserQuery,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.HashSet{System.String},Dapper.DynamicParameters)">
            <summary>
            Helper method for searching users.
            </summary>
            <param name="query"></param>
            <param name="joins"></param>
            <param name="wheres"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.Update(Weavy.Core.Models.User)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.User"/> in the datasource.
            </summary>
            <param name="user"><see cref="T:Weavy.Core.Models.User"/> object to update.</param>
            <remarks>
              The object will be updated to reflect any changes made by the repository, i.e. computed columns.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.Delete(System.Int32)">
            <summary>
            Permanently deletes a <see cref="T:Weavy.Core.Models.User"/> from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.User"/> to delete.</param>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetPassword(System.Int32)">
            <summary>
            Gets the password hash for the specified user. 
            </summary>
            <param name="id">User Id.</param>
            <returns>The password hash.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetClientSecret(System.Int32)">
            <summary>
            Gets the ClientSecret (in plain text) for the specifed client (stored in the password column). 
            </summary>
            <param name="id">User Id.</param>
            <returns>The ClientSecret.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.SetPassword(System.Int32,System.String)">
            <summary>
              Sets the password hash for the specified <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
            <param name="id">Id of user.</param> 
            <param name="password">The password hash to set.</param>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.SetClientSecret(System.Int32,System.String)">
            <summary>
              Sets the ClientSecret for the specified client (user).
            </summary>
            <param name="id">Id of User.</param> 
            <param name="clientSecret">The client secret to set.</param>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.GetByClient(System.String)">
            <summary>
              Gets the Id of the <see cref="T:Weavy.Core.Models.User"/> with the specified clientId.
            </summary>
            <param name="clientId">ClientId of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Weavy.Core.Models.User"/> item has the specified client id.</returns>
        </member>
        <member name="M:Weavy.Core.Repos.UserRepo.Touch(System.Int32)">
            <summary>
              Forces an update of the timestamp column.
            </summary>
            <param name="id">Id of <see cref="T:Weavy.Core.Models.User"/> to update.</param>
        </member>
        <member name="T:Weavy.Core.Services.MeetingService">
            <summary>
              Service layer for meetings.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.MeetingService.Get(System.Int32)">
            <summary>
            Gets the meeting with the specified id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.MeetingService.Get(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the meetings with the specified ids.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.MeetingService.Get(Weavy.Core.Models.IHasMeetings)">
            <summary>
              Get <see cref="T:Weavy.Core.Models.Meeting"/>s for the specified entity.
            </summary>
            <param name="entity">The entity for which to get meetings.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Meeting"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.MeetingService.GetOngoing(System.String)">
            <summary>
            Get ongoing  <see cref="T:Weavy.Core.Models.Meeting"/>s. Treated as ongoing if EndedAt is null
            </summary>
            <param name="provider"></param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Meeting"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.MeetingService.Insert(Weavy.Core.Models.Meeting)">
            <summary>
              Inserts an <see cref="T:Weavy.Core.Models.Meeting"/> object into the repository.
            </summary>
            <param name="meeting"><see cref="T:Weavy.Core.Models.Meeting"/> object to insert.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Meeting"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.MeetingService.Get(System.String,System.String)">
            <summary>
            Get meeting by provider and uuid
            </summary>
            <param name="provider"></param>
            <param name="uuid"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.MeetingService.Update(Weavy.Core.Models.Meeting)">
            <summary>
            Update a meeting
            </summary>
            <param name="meeting"></param>
        </member>
        <member name="M:Weavy.Core.Services.MeetingService.CreateMeeting(System.String)">
            <summary>
            Creates a new meeting
            </summary>        
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Services.TokenService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Token"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.TokenService.AddOrUpdate(Weavy.Core.Models.Token)">
            <summary>
            Adds a new <see cref="T:Weavy.Core.Models.Token"/> object if not exists, otherwise updates it.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:Weavy.Core.Services.TokenService.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Token"/> object from the repository.
            </summary>
            <param name="id">Token ID (unique identifier).</param>        
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Comment"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.TokenService.Get">
            <summary>
              Gets all <see cref="T:Weavy.Core.Models.Token"/> objects from the repository for the current user.
            </summary>        
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Token"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.TokenService.Get(System.String)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Token"/> object from the repository for the current user and provider.
            </summary>        
            <param name="provider">The provider to get tokens for.</param>        
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Token"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.TokenService.Insert(Weavy.Core.Models.Token)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Token"/> object into the repository.
            </summary>
            <param name="token"><see cref="T:Weavy.Core.Models.Token"/> object to insert.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Token"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.TokenService.Update(Weavy.Core.Models.Token)">
            <summary>
              Updates a <see cref="T:Weavy.Core.Models.Token"/> object.
            </summary>
            <param name="token"><see cref="T:Weavy.Core.Models.Token"/> object to update.</param>        
            <returns>The updated <see cref="T:Weavy.Core.Models.Token"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.TokenService.Delete(System.Int32)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Token"/> object from the repository.
            </summary>
            <param name="id">Token id.</param>        
            <remarks>
              This will delete the object and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
            <returns>The deleted <see cref="T:Weavy.Core.Models.Token"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.TokenService.Filter(Weavy.Core.Models.Token)">
            <summary>
            Returns <c>null</c> if the current user does not have permissions to the token.
            </summary>
            <param name="token"></param>        
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.TokenService.Clear(System.String)">
            <summary>
            Clear all tokens for the current user and provider
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:Weavy.Core.Services.DirectoryService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Directory"/> objects.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.DirectoryService.DefaultId">
            <summary>
            The Id of the "Default" directory (0).
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.DirectoryService.SystemId">
            <summary>
            The Id of the System directory (-1).
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.DirectoryService.Get(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Directory"/> object from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Directory"/>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Directory"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.DirectoryService.Get(System.String)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Directory"/> object from the repository.
            </summary>
            <param name="name">The <see cref="T:Weavy.Core.Models.Directory"/> name.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Directory"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.DirectoryService.Insert(Weavy.Core.Models.Directory,System.Boolean)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Directory"/> object into the repository.
            </summary>
            <param name="directory"><see cref="T:Weavy.Core.Models.Directory"/> object to insert.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Directory"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.DirectoryService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Directory"/> object from the repository.
            </summary>
            <param name="id">Id of the directory to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The deleted directory.</returns>
        </member>
        <member name="M:Weavy.Core.Services.DirectoryService.Search(Weavy.Core.Models.DirectoryQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.DirectoryQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.DirectoryQuery"/> object containing the search criteria.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Directory"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.DirectoryService.Update(Weavy.Core.Models.Directory,System.Boolean)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Directory"/>.
            </summary>
            <param name="directory">The <see cref="T:Weavy.Core.Models.Directory"/> object to update.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The updated <see cref="T:Weavy.Core.Models.Directory"/>.</returns>
        </member>
        <member name="T:Weavy.Core.Services.PushService">
            <summary>
              Service class for pushing realtime events to connected clients. They can subscribe to these events with wvy.connection.default.on("event.weavy")
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.CLIENT_CALLBACK">
            <summary>
            Generic callback event used in realtime.js to dispatch the actual event to the registered handlers.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_AUTHENTICATE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_BADGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_COMMENT_INSERTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_COMMENT_UPDATED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_CONTENT_INSERTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_CONTENT_UPDATED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_CONTENT_TRASHED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_CONTENT_RESTORED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_CONVERSATION_DELETED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_CONVERSATION_DELIVERED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_CONVERSATION_READ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_CONVERSATION_PINNED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_LIKE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_MESSAGE_INSERTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_MESSAGE_UPDATED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_MESSAGE_DELIVERED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_NOTIFICATION_INSERTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_NOTIFICATION_UPDATED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_NOTIFICATIONS_READ">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_PRESENCE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_POST_INSERTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_POST_UPDATED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_STAR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_THEME_CHANGED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_TYPING">
            <summary>
            Name of event that is sent when a user is typing in a conversation.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_UNSTAR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.PushService.EVENT_UNLIKE">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.PushService.Push(System.String,System.Object)">
            <summary>
            Sends an event to all connected clients via the WebSocket-based realtime API.
            </summary>
            <param name="name">Name of the event.</param>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:Weavy.Core.Services.PushService.PushToUser(System.String,System.Object,System.Int32)">
            <summary>
            Sends an event to the specified user via the WebSocket-based realtime API.
            </summary>
            <param name="name">Name of the event.</param>
            <param name="data">The data to send.</param>
            <param name="userId">Id of <see cref="T:Weavy.Core.Models.User"/> that should receive the event.</param>
        </member>
        <member name="M:Weavy.Core.Services.PushService.PushToUsers(System.String,System.Object,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sends an event to the specified users via the WebSocket-based realtime API.
            </summary>
            <param name="name">Name of the event.</param>
            <param name="data">The data to send.</param>
            <param name="userIds">Ids of <see cref="T:Weavy.Core.Models.User"/>s that should receive the event.</param>
        </member>
        <member name="M:Weavy.Core.Services.PushService.PushToConnection(System.String,System.Object,System.Guid)">
            <summary>
            Sends an event to the specified connection via the WebSocket-based realtime API.
            </summary>
            <param name="name">Name of the event.</param>
            <param name="data">The data to send.</param>
            <param name="connectionId">Id of <see cref="T:Weavy.Core.Models.Connection"/> that should receive the event.</param>
        </member>
        <member name="M:Weavy.Core.Services.PushService.PushToConnections(System.String,System.Object,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Sends an event to the specified connections via the WebSocket-based realtime API.
            </summary>
            <param name="name">Name of the event.</param>
            <param name="data">The data to send.</param>
            <param name="connectionIds">Id of <see cref="T:Weavy.Core.Models.Connection"/>s that should receive the event.</param>
        </member>
        <member name="T:Weavy.Core.Services.AttachmentService">
            <summary>
              Service layer for attachments.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets an <see cref="T:Weavy.Core.Models.Attachment"/> from the repository.
            </summary>
            <param name="id">Id of the attachment.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return attachment even if trashed, otherwise <c>false</c>.</param>
            <returns>A <see cref="T:Weavy.Core.Models.Attachment"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.Get(Weavy.Core.Models.IHasAttachments,System.Boolean,System.Boolean)">
            <summary>
              Get <see cref="T:Weavy.Core.Models.Attachment"/>s for the specified entity.
            </summary>
            <param name="entity">The entity for which to get attachments.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to keep trashed attachments, <c>false</c> to remove them.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Attachment"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.GetArchive(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Attachment})">
            <summary>
            Creates a zip archive with the specified attachments.
            </summary>
            <param name="attachments">The files to include in the archive</param>.
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.GetPreviousAndNextSiblings(Weavy.Core.Models.Attachment,System.Boolean,System.Boolean)">
            <summary>
            Get closest (previous and next) siblings for the specified attachment.
            </summary>
            <param name="attachment"></param>
            <param name="sudo"></param>
            <param name="trashed"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.Insert(Weavy.Core.Models.Attachment,Weavy.Core.Models.IHasAttachments,System.Boolean)">
            <summary>
             Insert an attachment.
            </summary>
            <param name="attachment">The attachment to insert.</param>
            <param name="parent">The entity where the file is attached.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted attachment.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.Update(Weavy.Core.Models.Attachment,System.Boolean)">
            <summary>
             Update an attachment.
            </summary>
            <param name="attachment">The attachment to update.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted attachment.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.Trash(System.Int32,System.Boolean)">
            <summary>
              Sends an <see cref="T:Weavy.Core.Models.Attachment"/> to the trash.
            </summary>
            <param name="id">Id of the file to trash.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The trashed file.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.Restore(System.Int32,System.Boolean)">
            <summary>
              Restores an <see cref="T:Weavy.Core.Models.Attachment"/> from the trash.
            </summary>
            <param name="id">Id of the file to restore.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The restored file.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes an attachment from the repository.
            </summary>
            <param name="id">Id of the attachment to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The deleted attachment.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AttachmentService.Search(Weavy.Core.Models.AttachmentQuery)">
            <summary>
            Performs a search according to the specified <see cref="T:Weavy.Core.Models.Query"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.Query"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Attachment"/>s.</returns>
        </member>
        <member name="T:Weavy.Core.Services.BlobService">
            <summary>
              Service layer for blobs.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.BlobService.Provider">
            <summary>
            Gets the configured <see cref="T:Weavy.Core.Providers.IBlobProvider"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.DeleteOrphans(System.Int32)">
            <summary>
            Permanently deletes orphaned files, i.e unattached files that have not been modified in the specified number of seconds.
            </summary>
            <param name="threshold">Deletes orphaned files that have not been modified in this many seconds.</param>
            <returns>The deleted files.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
              Downloads a blob to the specified destination.
            </summary>
            <param name="blob">The blob to download.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.DownloadTo(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
             Downloads a range of bytes from the blob to the specified destination.
            </summary>
            <param name="blob">The blob to download.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
            <param name="offset">The zero-based byte offset at which to start downloading.</param>
            <param name="length">The number of bytes to download.</param>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
              Downloads a blob to the specified destination.
            </summary>
            <param name="blob">The blob to download.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.DownloadToAsync(Weavy.Core.Models.Blob,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
             Downloads a range of bytes from the blob to the specified destination.
            </summary>
            <param name="blob">The blob to download.</param>
            <param name="destination">A <see cref="T:System.IO.Stream"/> to write the downloaded content to.</param>
            <param name="offset">The zero-based byte offset at which to start downloading.</param>
            <param name="length">The number of bytes to download.</param>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.ExtractText(Weavy.Core.Models.Blob)">
            <summary>
            Extract text from a blob for fulltext indexing.
            </summary>
            <param name="blob">The <see cref="T:Weavy.Core.Models.Blob"/>.</param>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.Filter(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Blob},System.Boolean)">
            <summary>
            Filters a list of <see cref="T:Weavy.Core.Models.Blob"/>s. 
            </summary>
            <param name="blobs">The list of <see cref="T:Weavy.Core.Models.Blob"/>s to filter.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>A list of <see cref="T:Weavy.Core.Models.Blob"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.Filter(Weavy.Core.Models.Blob,System.Boolean)">
            <summary>
            Returns <c>null</c> if the current user does not have view permissions to the <see cref="T:Weavy.Core.Models.Blob"/>.
            </summary>
            <param name="blob"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.Get(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Get meta data for the specified blobs.
            </summary>
            <param name="ids">Ids of the blobs.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>A list of <see cref="T:Weavy.Core.Models.Blob"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.Get(System.Int32,System.Boolean)">
            <summary>
            Get meta data for the specified blob.
            </summary>
            <param name="id">Id of the blob.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>A <see cref="T:Weavy.Core.Models.Blob"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.Get(System.String,System.Boolean)">
            <summary>
            Get meta data for the specified blob.
            </summary>
            <param name="etag">ETag of the blob.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>A <see cref="T:Weavy.Core.Models.Blob"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.GetContent(Weavy.Core.Models.Blob)">
            <summary>
            Get the blob content as a <see cref="T:System.IO.FileInfo"/> object.
            </summary>
            <param name="blob">The blob for which to get content.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object if the blob exists; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.GetContent(Weavy.Core.Models.Blob,System.String)">
            <summary>
            Gets the blob content converted to the format specified in <paramref name="extension"/>.
            </summary>
            <param name="blob">The blob to convert.</param>
            <param name="extension">File extension of desired output format, e.g. .pdf</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> object if the file could be converted to the specified output format; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.GetSize">
            <summary>
            Gets the size, in bytes, of all blobs in the repository.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.Insert(System.String)">
            <summary>
            Create a <see cref="T:Weavy.Core.Models.Blob"/> from the content in the specified file.
            </summary>
            <param name="path">A file path containing the content to insert.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Blob"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.Insert(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Inserts a <see cref="T:Weavy.Core.Models.Blob"/>
            </summary>
            <param name="blob">The blob meta data.</param>
            <param name="content">The input stream from which the content should be read.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Blob"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.Insert(Weavy.Core.Models.ExternalBlob)">
            <summary>
            Inserts an external <see cref="T:Weavy.Core.Models.Blob"/>
            </summary>
            <param name="external">The blob meta data.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Blob"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.UploadFromCache(Weavy.Core.Models.Blob)">
            <summary>
            Upload blob content from local file system cache to our blob provider for permanent storage. 
            </summary>
            <param name="blob">The <see cref="T:Weavy.Core.Models.Blob"/>.</param>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.UploadThumbnail(Weavy.Core.Models.Blob)">
            <summary>
            Create and store a thumbnail image for the blob.
            </summary>
            <param name="blob">The <see cref="T:Weavy.Core.Models.Blob"/>.</param>
            <remarks>The <see cref="T:Weavy.Core.Models.Blob"/> will be udated with thumbnail metadata such as width and height.</remarks>
        </member>
        <member name="M:Weavy.Core.Services.BlobService.UploadToCache(Weavy.Core.Models.Blob,System.IO.Stream)">
            <summary>
            Uploads blob content to the local file system cache.
            </summary>
            <param name="blob">A <see cref="T:Weavy.Core.Models.Blob"/> object with metadata.</param>
            <param name="content">A <see cref="T:System.IO.Stream"/> containing the content to upload. </param>
            <returns>A file where the blob content was uploaded.</returns>
        </member>
        <member name="T:Weavy.Core.Services.AppService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.App"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.AppService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes an <see cref="T:Weavy.Core.Models.App"/> and all related data from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.App"/> to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <remarks>
              This will delete the object and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
            <returns>The deleted <see cref="T:Weavy.Core.Models.App"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get the specified <see cref="T:Weavy.Core.Models.App"/>.
            </summary>
            <param name="id"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns>An <see cref="T:Weavy.Core.Models.App"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.Get``1(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get the specified <see cref="T:Weavy.Core.Models.App"/>.
            </summary>
            <typeparam name="T">The type of app to get.</typeparam>
            <param name="id">Id of the app.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetApps(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get apps in the specified space.
            </summary>
            <param name="spaceId">Id of the space for which to get apps.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed apps, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.App"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetApps``1(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get apps in specified space of specified type 
            </summary>
            <param name="spaceId">Id of the space for which to get apps.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed apps, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.App"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetContent(System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
              Get content items in the specified <see cref="T:Weavy.Core.Models.App"/> .
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.App"/> for which to get content.</param>
            <param name="depth">
              The maximum depth of descendants to return, e.g. setting depth to 1 returns only the immediate children. 
              When depth is <c>null</c>, the entire content hierarchy of the app is returned.
            </param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Content"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetContent``1(System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Get content items of type <typeparamref name="T"/> from the specified app.
            </summary>
            <typeparam name="T">The type of content to return.</typeparam>
            <param name="id">Id of the app item for which to get content.</param>
            <param name="depth">
              The maximum depth of descendants to return, e.g. setting depth to 1 returns only the immediate children. 
              If depth is <c>null</c>, all descendants are returned.
            </param> 
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Content"/> objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetByKey(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get app with specified key from a space.
            </summary>
            <param name="spaceId">Id of the space for which to get app.</param>
            <param name="key">Unique key of app to get.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns>An <see cref="T:Weavy.Core.Models.App"/> object.</returns>/// <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetByKey``1(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get app with specified key from a space.
            </summary>
            <typeparam name="T">The type of app to get.</typeparam> 
            <param name="spaceId">Id of the space for which to get app.</param>
            <param name="key">Name of app to get.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetByName(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get named app from specified space.
            </summary>
            <param name="spaceId">Id of the space for which to get app.</param>
            <param name="name">Name of app to get.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetByName``1(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get named app from specified space.
            </summary>
            <typeparam name="T">The type of app to get.</typeparam> 
            <param name="spaceId">Id of the space for which to get app.</param>
            <param name="name">Name of app to get.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.IsKeyTaken(Weavy.Core.Models.App)">
            <summary>
            Check if specified app key is already used by another app in the same space.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.IsNameTaken(Weavy.Core.Models.App)">
            <summary>
            Check if name of specified app is already used by another app in the same space.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetSiblingByKey(Weavy.Core.Models.App,System.Boolean,System.Boolean)">
            <summary>
            Get app with same space and key as specified app.
            </summary>
            <param name="app"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.GetSiblingByName(Weavy.Core.Models.App,System.Boolean,System.Boolean)">
            <summary>
            Get app with same name and space as the specified app.
            </summary>
            <param name="app"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.Insert``1(``0,Weavy.Core.Models.Space,System.Boolean)">
            <summary>
            Inserts a new app into the specified <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <typeparam name="T">The type of app to insert.</typeparam>
            <param name="app">The app to insert.</param>
            <param name="space">The space where the app should be inserted.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted <typeparamref name="T"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.Move``1(``0,Weavy.Core.Models.Space,System.Boolean)">
            <summary>
            Moves an <see cref="T:Weavy.Core.Models.App"/> to the specified space.
            </summary>
            <param name="app">The app to move.</param>
            <param name="space">The destination space.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.New(System.Guid)">
            <summary>
            Initializes a new app from the specified guid.
            </summary>
            <param name="guid">Guid of the app <see cref="T:System.Type"/>.</param>
            <returns>An instance of the <see cref="T:Weavy.Core.Models.App"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.Search(Weavy.Core.Models.AppQuery)">
            <summary>
              Search apps according to the specified <see cref="T:Weavy.Core.Models.AppQuery"/> object.
            </summary>
            <param name="query">.</param> 
            <returns>Returns a list of apps.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.Trash(System.Int32,System.Boolean)">
            <summary>
              Sends an app (and its contents) to the trash.
            </summary>
            <param name="id">Id of the app to trash.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The trashed app.</returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.Update``1(``0,System.Boolean)">
            <summary>
            Updates an existing <see cref="T:Weavy.Core.Models.App"/> item.
            </summary>
            <typeparam name="T">The type of <see cref="T:Weavy.Core.Models.App"/> to update.</typeparam>
            <param name="app">The <see cref="T:Weavy.Core.Models.App"/> to update.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.AppService.Restore(System.Int32,System.Boolean)">
            <summary>
              Restores a trashed capp (and its contents).
            </summary>
            <param name="id">Id of the app to restore.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The restored app.</returns>
        </member>
        <member name="T:Weavy.Core.Services.EntityService">
            <summary>
              Service layer for entities.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Get``1(``0,System.Boolean,System.Boolean)">
            <summary>
            Get the actual entity implementation for the specified <see cref="T:Weavy.Core.Models.IEntity"/> reference.
            </summary>
            <typeparam name="TEntity">The type of <see cref="T:Weavy.Core.Models.IEntity"/> to get.</typeparam>
            <param name="entity">The <see cref="T:Weavy.Core.Models.IEntity"/> reference for which to get immplementation.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return entity even if trashed, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.FindApp(Weavy.Core.Models.IEntity)">
            <summary>
            Get the <see cref="T:Weavy.Core.Models.App"/> where the specified <paramref name="entity"/> is located.
            </summary>
            <param name="entity">The entity.</param>
            <returns>An <see cref="T:Weavy.Core.Models.App"/> object or <c>null</c> of the <paramref name="entity"/> is not located in an app.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.FindSpace(Weavy.Core.Models.IEntity)">
            <summary>
            Get the <see cref="T:Weavy.Core.Models.Space"/> where the specified <paramref name="entity"/> is located.
            </summary>
            <param name="entity">The entity.</param>
            <returns>A <see cref="T:Weavy.Core.Models.Space"/> object or <c>null</c> of the <paramref name="entity"/> is not located in a space.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Like``1(``0,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Like the specified entity.
            </summary>
            <param name="likeable">The entity to like.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that likes, default is <c>null</c> which indicates the current user.</param> 
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The liked entity.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Unlike``1(``0,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Unlike the specified entity.
            </summary>
            <param name="likeable">The entity to unlike.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that unlikes, default is <c>null</c> which indicates the current user.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The unliked entity.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Star``1(``0,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Star the specified entity.
            </summary>
            <param name="starrable">The entity to star.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that stars, default is <c>null</c> which indicates the current user.</param> 
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The starred entity.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Unstar``1(``0,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Unstar the specified entity.
            </summary>
            <param name="starrable">The entity to unstar.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that unstars, default is <c>null</c> which indicates the current user.</param> 
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The unstarred entity.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Visit(Weavy.Core.Models.IVisitable,System.Nullable{System.Int32})">
            <summary>
            Mark the specified entity as visited.
            </summary>
            <param name="visitable">The entity to visit.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that visits, default is <c>null</c> which indicates the current user.</param> 
            <returns>The starred entity.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Unvisit(Weavy.Core.Models.IVisitable,System.Nullable{System.Int32})">
            <summary>
            Removes a visit.
            </summary>
            <param name="visitable">The entity to visit.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that visits, default is <c>null</c> which indicates the current user.</param> 
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Delete(Weavy.Core.Models.IEntity,System.Boolean)">
            <summary>
            Permanently delete a thrashed entity.
            </summary>
            <param name="entity">The entity to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Follow``1(``0,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Follow the specified entity.
            </summary>
            <param name="followable">The entity to follow.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that follows, default is <c>null</c> which indicates the current user.</param> 
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The followed entity.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Unfollow``1(``0,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Unfollow the specified entity.
            </summary>
            <param name="followable">The entity to unfollow.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that unfollows, default is <c>null</c> which indicates the current user.</param> 
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The unfollowed entity.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Restore(Weavy.Core.Models.IEntity,System.Boolean)">
            <summary>
            Restore a thrashed entity.
            </summary>
            <param name="entity">The entity to restore.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Search(Weavy.Core.Models.EntityQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.EntityQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.EntityQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.IEntity"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Search(Weavy.Core.Models.TrashQuery)">
            <summary>
            Returns a list of trashed entities from the recycle bin matching the supplied query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.SetTokens(Weavy.Core.Models.IEntity,System.Collections.Generic.IEnumerable{Weavy.Core.TwitterText.Token})">
            <summary>
              Stores tokens (tags and mentions) for an entity.
            </summary>
            <param name="entity">The entity for which to set tokens.</param>
            <param name="tokens">The tokens to set, <c>null</c> or an empty list to clear tokens from the entity.</param>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.SetMentions(Weavy.Core.Models.IEntity,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Stores mentions for an entity.
            </summary>
            <param name="entity">The entity for which to set mentions.</param>
            <param name="userids">The mentioned users.</param>
            <param name="spaceids">The mentioned spaces.</param>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.Share(Weavy.Core.Models.IEntity,System.String)">
            <summary>
            Share the specified entity with people @mentioned in the text.
            </summary>
            <param name="entity">The entity to share.</param>
            <param name="text">Text to include in the share (must include at least one @mentioned user).</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.GetMentions(Weavy.Core.Models.IEntity)">
            <summary>
            Gets the list of mentions for the given entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.GetTags(Weavy.Core.Models.IEntity)">
            <summary>
            Gets the list of tags for the given entity.
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.GetLikeCount">
            <summary>
            Gets the total number of likes in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.GetStarCount">
            <summary>
            Gets the total number of stars in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.GetTagCount(System.Boolean)">
            <summary>
            Gets the total number of tags in the system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EntityService.EmptyTrash(System.Int32)">
            <summary>
            Permanently deletes entities that were trashed more than the specified number of days ago.
            </summary>
            <param name="days">Deletes entities from the recycle bin that were trashed more than this many days ago.</param>
            <returns>The number of deleted entities.</returns>
        </member>
        <member name="T:Weavy.Core.Services.StatisticsService">
            <summary>
              Service layer for system stats.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.StatisticsService.Insert(Weavy.Core.Models.StatisticsEntry)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.StatisticsEntry"/> into the database.
            </summary>
            <param name="e"><see cref="T:Weavy.Core.Models.StatisticsEntry"/> object to insert.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.StatisticsEntry"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.StatisticsService.Sample">
            <summary>
            Sample the system for current usage stats. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Services.ThemeService">
            <summary>
            Service layer for theme settings.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.ThemeService.WEAVY_COLOR">
            <summary>
            Weavy blue, i.e. #156B93.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.ThemeService.Get">
            <summary>
            Get theme settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ThemeService.Update(Weavy.Core.Models.Theme,System.Boolean)">
            <summary>
            Update theme settings.
            </summary>
            <param name="theme"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Services.LoginService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Login"/>  objects.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.LoginService.COOKIE_AUTHENTICATION_TYPE">
            <summary>
            Authentication type used when signing in with local username/password and cookie auth
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.LoginService.COOKIE_NAME">
            <summary>
            The name of the cookie
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.LoginService.TOKEN_ISSUER">
            <summary>
            The name of the token issuer.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.LoginService.TOKEN_AUTHENTICATION_TYPE">
            <summary>
            Authentication type for custom auth with JWT token 
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.LoginService.EXTERNAL_AUTHENTICATION_TYPE">
            <summary>
            Authentication type for temporary cookie when signing in with open id 
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.LoginService.HMAC_AUTHENTICATION_TYPE">
            <summary>
            Authentication type for HMAC authentication.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.LoginService.WINDOWS_AUTHENTICATION_TYPE">
            <summary>
            Authentication type for Windows authentication and cookie based authentication against Active Directory   
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.LoginService.Insert(Weavy.Core.Models.Login)">
            <summary>
            Insert an external login.
            </summary>
            <param name="login"></param>
            <returns>The inserted login.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LoginService.Get(System.Int32)">
            <summary>
            Gets the <see cref="T:Weavy.Core.Models.Login"/> with the specified id.
            </summary>
            <param name="id"></param>
            <returns>A login.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LoginService.Get(System.String,System.String)">
            <summary>
            Gets the <see cref="T:Weavy.Core.Models.Login"/> with the specified iss and sub.
            </summary>
            <param name="iss"></param>
            <param name="sub"></param>
            <returns>A login.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LoginService.GetWindowsLogin(System.String)">
            <summary>
            Gets the Windows <see cref="T:Weavy.Core.Models.Login"/> with the specified sid.
            </summary>
            <param name="sid"></param>
            <returns>A login.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LoginService.Update(Weavy.Core.Models.Login)">
            <summary>
            Updates an external login.
            </summary>
            <param name="login"></param>
            <returns>The inserted login.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LoginService.Delete(Weavy.Core.Models.Login)">
            <summary>
            Delete the specified login.
            </summary>
            <param name="login"></param>
            <returns>The deleted login.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LoginService.GetByUser(System.Int32)">
            <summary>
              Gets a list of <see cref="T:Weavy.Core.Models.Login"/> objects for the specified <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
            <param name="id">Id of the user.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Login"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LoginService.GetLogins(System.String,System.String)">
            <summary>
              Get <see cref="T:Weavy.Core.Models.Login"/> objects with the specified type and issuer.
            </summary>
            <param name="type"></param>
            <param name="issuer"></param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Login"/> objects.</returns>
        </member>
        <member name="T:Weavy.Core.Services.ContentService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Content"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes an <see cref="T:Weavy.Core.Models.Content"/> item and its descendants from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <remarks>
              This will delete the object and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
            <returns>The deleted <see cref="T:Weavy.Core.Models.Content"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Delete(System.Int32,System.Int64,System.Boolean)">
            <summary>
              Permanently deletes the specified <see cref="T:Weavy.Core.Models.Content"/> version from the version history.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item.</param>
            <param name="version">Timestamp of the version to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The deleted <see cref="T:Weavy.Core.Models.Content"/> version.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Discard(System.Int32,System.Boolean)">
            <summary>
              Discard pending changes, i.e. the current draft of the content item with the specified <paramref name="id"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> that should have its draft discarded.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The discarded draft.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Filter(System.Collections.Generic.IEnumerable{Weavy.Core.Models.Content},System.Boolean,System.Boolean)">
            <summary>
            Filters a list of <see cref="T:Weavy.Core.Models.Content"/> items, 
            removing <c>null</c>s and optionally removing trashed <see cref="T:Weavy.Core.Models.Content"/> 
            and/or <see cref="T:Weavy.Core.Models.Content"/> items that current user does not have permission to see.
            </summary>
            <param name="list">The list of <see cref="T:Weavy.Core.Models.Content"/> items to filter.</param>
            <param name="sudo"><c>true</c> to keep <see cref="T:Weavy.Core.Models.Content"/> that current user does not have permission to see, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to keep trashed <see cred="Content"/> items, <c>false</c> to remove them.</param>
            <returns>A list of <see cref="T:Weavy.Core.Models.Content"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Filter(Weavy.Core.Models.Content,System.Boolean,System.Boolean)">
            <summary>
            Returns <c>null</c> if the current user does not have view permissions to the item or if the item is trashed.
            </summary>
            <param name="content"></param>
            <param name="sudo"><c>true</c> to keep <paramref name="content"/>, that current user does not have permission to see, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to keep trashed <paramref name="content"/>, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get the (latest version) of the specified <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <param name="id"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return content even if trashed, otherwise <c>false</c>.</param>
            <returns>A <see cref="T:Weavy.Core.Models.Content"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Get``1(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get the (latest version) of the specified <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <typeparam name="T">The type of content to get.</typeparam>
            <param name="id">Id of the content item.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return content even if trashed, otherwise <c>false</c>.</param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Get(System.Int32,System.Int64,System.Boolean,System.Boolean)">
            <summary>
             Get the specified <see cref="T:Weavy.Core.Models.Content"/> version.
            </summary>
            <param name="id">Id of the content item.</param>
            <param name="version">Timestamp of the version to return.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return content even if trashed, otherwise <c>false</c>.</param>
            <returns>An object implementing the <see cref="T:Weavy.Core.Models.Content"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Get``1(System.Int32,System.Int64,System.Boolean,System.Boolean)">
            <summary>
             Get the specified <see cref="T:Weavy.Core.Models.Content"/> version.
            </summary>
            <typeparam name="T">The type of content to get.</typeparam>
            <param name="id">Id of the content item.</param>
            <param name="version">Timestamp of the version to return.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return content even if trashed, otherwise <c>false</c>.</param>
            <returns>An object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetAncestors(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get ancestors of the specified content item, starting with the closest parent and ending with the root.
            </summary>
            <param name="id">Id of the content item.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns>Returns a list of objects implementing the <see cref="T:Weavy.Core.Models.Content"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetAncestors``1(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get ancestors of the specified content item, starting with the closest parent and ending with the root.
            </summary>
            <typeparam name="T">The type of content to return.</typeparam>
            <param name="id">Id of the content item.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns>Returns a list of content items of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetArchive(System.Collections.Generic.IEnumerable{Weavy.Core.Models.IFile})">
            <summary>
            Creates a zip archive with the specified files.
            </summary>
            <param name="files">The files to include in the archive</param>.
            <returns>The path to a zip-archive with the specified files.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetChildren(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get child items of the specified content item.
            </summary>
            <param name="id">Id of the content item for which to get children.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Content"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetChildren``1(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get child items of the specified content item.
            </summary>
            <typeparam name="T">The type of content to return.</typeparam>
            <param name="id">Id of the content item for which to get children.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns>Returns a list of content items of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetDescendants(System.Int32,System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
              Returns (a flat list) of descendants for a content item. The items are sorted like a tree.
            </summary>
            <param name="id">Id of the content for which to get descendants.</param>
            <param name="depth">
              The maximum depth of descendants to return, i.e. setting depth to 1 returns only the immediate children. 
              If depth is <c>null</c>, all descendants are returned.
            </param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns>Returns a tree-sorted list of <see cref="T:Weavy.Core.Models.Content"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetDraft(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the current draft of the specified <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item for which to get draft.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return content even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Content"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetDraft``1(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the current draft of the specified <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <typeparam name="T">The type of content to return.</typeparam>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item for which to get draft.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return content even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns a <see cref="T:Weavy.Core.Models.Content"/> object of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetVersions(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets the version history for a <see cref="T:Weavy.Core.Models.Content"/> item. 
              The first item in the list is the current version. The last item is the oldest version.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item for which to get versions.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Content"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetVersions``1(``0,System.Boolean,System.Boolean)">
            <summary>
              Gets the version history for a <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <typeparam name="T">The type of content to return.</typeparam>
            <param name="content"><see cref="T:Weavy.Core.Models.Content"/> item for which to get versions.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Content"/> objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Insert``1(``0,Weavy.Core.Models.App,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Inserts a new content item in the root of the specified <see cref="T:Weavy.Core.Models.App"/>.
            </summary>
            <typeparam name="T">The type of content to insert.</typeparam>
            <param name="content">The content item to insert.</param>
            <param name="app">The app where the content item should be inserted.</param>
            <param name="blobs">Ids of <see cref="T:Weavy.Core.Models.Blob"/>s to attach (when <paramref name="content"/> implements <see cref="T:Weavy.Core.Models.IHasAttachments"/>).</param>        
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted <typeparamref name="T"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Insert``1(``0,Weavy.Core.Models.Content,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Inserts a new content item as child to the specified parent.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="content">The content item to insert.</param>
            <param name="parent">The parent content item.</param>
            <param name="blobs">Ids of <see cref="T:Weavy.Core.Models.Blob"/>s to attach (when <paramref name="content"/> implements <see cref="T:Weavy.Core.Models.IHasAttachments"/>).</param>        
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted <typeparamref name="T"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.IsNameTaken(Weavy.Core.Models.Content)">
            <summary>
            Check if name of specified content item is already used by a sibling.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetSiblingByName(Weavy.Core.Models.Content)">
            <summary>
            Get sibling with same name as specified content item (used for detecting duplicates when inserting content).
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.GetPreviousAndNextSiblings(Weavy.Core.Models.Content,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get closest (previous and next) siblings for the specified content item.
            </summary>
            <param name="content"></param>
            <param name="folders"></param>
            <param name="sudo"></param>
            <param name="trashed"></param>
            <returns></returns>
            <remarks>This method only works for <see cref="F:Weavy.Core.Models.ContentType.File"/> and <see cref="F:Weavy.Core.Models.ContentType.Item"/></remarks>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Lock(System.Int32,System.Boolean)">
            <summary>
              Locks a <see cref="T:Weavy.Core.Models.Content"/> item for editing. Only the user that has the lock may update the <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item to lock.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The locked content item.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Lock``1(System.Int32,System.Boolean)">
            <summary>
              Locks a <see cref="T:Weavy.Core.Models.Content"/> item for editing. Only the user that has the lock may update the <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <typeparam name="T">The type of content to lock.</typeparam>
            <param name="id">Id of the content item to lock.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The locked content item.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Unlock(System.Int32,System.Boolean)">
            <summary>
              Unlocks a content item, making it possible for others to edit.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item to unlock.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The unlocked <see cref="T:Weavy.Core.Models.Content"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Unlock``1(System.Int32,System.Boolean)">
            <summary>
              Unlocks a content item, making it possible for others to edit.
            </summary>
            <typeparam name="T">The type of <see cref="T:Weavy.Core.Models.Content"/> to unlock.</typeparam>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/> item to unlock.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The unlocked <see cref="T:Weavy.Core.Models.Content"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Move``1(``0,Weavy.Core.Models.App,System.Boolean)">
            <summary>
            Moves an <see cref="T:Weavy.Core.Models.Content"/> item (and its descendants) to the root of the specified app.
            </summary>
            <param name="content">The content to move.</param>
            <param name="app">The destination app.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Move``1(``0,Weavy.Core.Models.Content,System.Boolean)">
            <summary>
            Moves an <see cref="T:Weavy.Core.Models.Content"/> item and its descendants to the specified parent item.
            </summary>
            <param name="content">The content to move.</param>
            <param name="parent">The new parent item.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The moved item.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.New(System.Guid)">
            <summary>
            Initializes a new content item from the specified guid.
            </summary>
            <param name="guid">Guid of the content type.</param>
            <returns>A content item, or <c>null</c> if specified content item could not be initialized.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Search(Weavy.Core.Models.ContentQuery)">
            <summary>
              Search content according to the specified <see cref="T:Weavy.Core.Models.ContentQuery"/> object.
            </summary>
            <param name="query">.</param> 
            <returns>Returns a list of comments.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Search``1(Weavy.Core.Models.ContentQuery{``0})">
            <summary>
              Search content according to the specified <see cref="T:Weavy.Core.Models.ContentQuery"/> object.
            </summary>
            <param name="query">.</param> 
            <returns>Returns a list of comments.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Trash(System.Int32,System.Boolean)">
            <summary>
              Sends a content item (and it's descendants) to the trash.
            </summary>
            <param name="id">Id of the content item to trash.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The trashed content item.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Trash``1(System.Int32,System.Boolean)">
            <summary>
              Sends a content item (and it's descendants) to the trash.
            </summary>
            <typeparam name="T">The type of <see cref="T:Weavy.Core.Models.Content"/> to trash.</typeparam>
            <param name="id">Id of the content item to trash.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The trashed content item.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Update``1(``0,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Updates an existing <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <typeparam name="T">The type of <see cref="T:Weavy.Core.Models.Content"/> to update.</typeparam>
            <param name="content">The <see cref="T:Weavy.Core.Models.Content"/> to update.</param>
            <param name="blobs">Ids of <see cref="T:Weavy.Core.Models.Blob"/>s to attach (when <paramref name="content"/> implements <see cref="T:Weavy.Core.Models.IHasAttachments"/>).</param>        
            <param name="backup"><c>true</c> to add the current version to the version history, otherwise <c>false</c> (only when <paramref name="content"/> implements <see cref="T:Weavy.Core.Models.IVersionable"/>).</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Restore(System.Int32,System.Boolean)">
            <summary>
              Restores a trashed content item (and its descendants).
            </summary>
            <param name="id">Id of the content item to restore.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The restored content item.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Restore``1(System.Int32,System.Boolean)">
            <summary>
              Restores a trashed content item (and its descendants).
            </summary>
            <typeparam name="T">The type of <see cref="T:Weavy.Core.Models.Content"/> to restore.</typeparam>
            <param name="id">Id of the content item to restore.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The restored content item.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Tag(Weavy.Core.Models.Content,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
              Tags a ITaggable content.
            </summary>
            <param name="content">The content to tag.</param>
            <param name="tags">The tags to set.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.Revert(System.Int32,System.Int64,System.Boolean)">
            <summary>
            Revert to a previous version of a <see cref="T:Weavy.Core.Models.Content"/> item.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Content"/>.</param>
            <param name="version">Timestamp of the version.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The reverted version of the <see cref="T:Weavy.Core.Models.Content"/> item.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ContentService.AttachBlobs(Weavy.Core.Models.Content,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Helper method for converting uploaded blobs to attachments and also replacing blob urls with attachment urls.
            </summary>
            <param name="content"></param>
            <param name="blobs"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
        </member>
        <member name="T:Weavy.Core.Services.ConfigurationService">
            <summary>
              Service class for getting configuration settings.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.AppSettings">
            <summary>
            Gets the application's settings the appSettings element in the configuration file.
            </summary>
            <returns>A NameValueCollection object that contains the AppSettingsSection object from the current configuration file.</returns>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ActiveDirectoryDomain">
            <summary>
            Gets the name of the Active Directory domain or server to authenticate against (<c>weavy.active-directory-domain</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ActiveDirectoryUsername">
            <summary>
            Gets the username to use when authenticating users against the active directory (<c>weavy.active-directory-username</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ActiveDirectoryPassword">
            <summary>
            Gets the password to use when authenticating users against the active directory (<c>weavy.active-directory-password</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ApplicationName">
            <summary>
            Gets the name of the application, e.g. Weavy (<c>weavy.application-name</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ApplicationUrl">
            <summary>
            Gets the absolute url to the installation, e.g. http://intranet.weavy.com or https://www.weavy.com/intranet. 
            Used for links in outgoing emails etc. (<c>weavy.application-url</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.BlobCache">
            <summary>
            Gets a value indicating if we should cache blobs on local disk or serve them directly from the blob provider (<c>weavy.blob-cache</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.BlobProvider">
            <summary>
            Gets the configured blob provider (<c>weavy.blob-provider</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.BlobProviders">
            <summary>
            Gets the configured blob providers (default to <c>Box,Dropbox,Google Drive,OneDrive</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.BlobSize">
            <summary>
            Gets the maximum accepted size of uploaded files (in bytes).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.BlobText">
            <summary>
            Gets a value indicating if we should extract text for fulltext indexing from uploaded blobs (<c>weavy.blob-text</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.BlobThumbnails">
            <summary>
            Gets a value indicating if we should create thumbnail images for uploaded blobs (<c>weavy.blob-thumbnails</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.BlobWhitelist">
            <summary>
            A comma-separated list of unique file type specifiers that can be uploaded to blob storage (<c>weavy.blob-whitelist</c>).
            If not specified all file types are accepted.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.CorsOrigins">
            <summary>
            Gets the configured cors origins (<c>weavy.cors-origins</c>).
            </summary>
            <remarks>
              Separate multiple entries with comma, e.g. https://www.example.com, https://www.example.org
            </remarks>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.CacheProvider">
            <summary>
            Gets the configured cache provider (<c>weavy.cache-provider</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.AuthenticationEndpoint">
            <summary>
            Gets the full url to an external authentication endpoint. Must start with https:// (<c>weavy.authentication-endpoint</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.Daemons">
            <summary>
            Gets a value indicating if daemons are enabled <c>weavy.daemons</c>.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.FormsAuthentication">
            <summary>
            Gets a value indicating whether forms authentication ia enabled.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.HtmlComments">
            <summary>
            Gets a value indicating whether comments should be edited in html or plain text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.HtmlPosts">
            <summary>
            Gets a value indicating whether posts should be edited in html or plain text.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.Https">
            <summary>
            Gets a value indicating if HTTPS is required (<c>weavy.https</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.Hsts">
            <summary>
            Gets a value indicating whether HTTP Strict Transport Security (HSTS) is enabled (<c>weavy.hsts</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.LicenseUrl">
            <summary>
            Gets the url to the licensing server (<code>weavy.license-url</code>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ZoomProxyUrl">
            <summary>
            Gets the url to the licensing server (<code>weavy.license-url</code>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.LicensePublicKey">
            <summary>
            Gets the (base64 encoded) public key used to verify that the license signature is valid (<c>weavy.license-public-key</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.LogLevel">
            <summary>
            Gets the configured logging level.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.NotificationProvider">
            <summary>
            Gets the configured notification provider (<c>weavy.notification-provider</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.PasswordLength">
            <summary>
            Gets the minimum required password length (<c>weavy.password-length</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.PasswordRequiresDigit">
            <summary>
            Gets a value indicating whether passwords must contain at least one digit (0-9) (<c>weavy.password-requires-digit</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.PasswordRequiresLower">
            <summary>
            Gets a value indicating whether passwords must contain at least one lower case letter (a-z) (<c>weavy.password-requires-lower</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.PasswordRequiresUpper">
            <summary>
            Gets a value indicating whether passwords must contain at least one upper case letter (A-Z) (<c>weavy.password-requires-upper</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.PasswordRequiresSpecial">
            <summary>
            Gets a value indicating whether passwords must at least one special character (non letter or digit) (<c>weavy.password-requires-special</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.PluginAssemblies">
            <summary>
            Gets names of plugin assemblies (<c>weavy.plugin-assemblies</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.Presence">
            <summary>
            Gets a value indicating if presence should be tracked. (<c>weavy.presence</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ProfileProvider">
            <summary>
            Gets the configured profile provider (<c>weavy.profile-provider</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.SmtpFrom">
            <summary>
            Gets the email address from which outgoing emails should be sent (<c>weavy.smtp-from</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.Scrape">
            <summary>
            Gets a value indicating if link scraping for embeds is enabled. (<c>weavy.scrape</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.SignalrTransport">
            <summary>
            Gets a value indicating which transport signalr should use. (<c>weavy.signalr-transport</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.SmtpPassword">
            <summary>
            Gets the password to use for authentication against the SMTP server (<c>weavy.smtp-password</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.SmtpPort">
            <summary>
             Gets the port used for SMTP transactions, default value is 25 (<c>weavy.smtp-port</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.SmtpServer">
            <summary>
            Gets the name or IP address of the host used for SMTP transactions (<c>weavy.smtp-server</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.SmtpUsername">
            <summary>
            Gets the username to use for authentication against the SMTP server (<c>weavy.smtp-username</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.SmtpDefaultCredentials">
            <summary>
            Gets a value indicating whether default user credentials should be used to access the SMTP server.
            When this property is set, username and password will be ignored (<c>weavy.smtp-default-credentials</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.SmtpSsl">
            <summary>
            Gets a value indicating whether to use Secure Sockets Layer (SSL) to encrypt the connection with the SMTP server (<c>weavy.smtp-ssl</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.Source">
            <summary>
            Gets the source of the deployment package (<c>weavy.source</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.Languages">
            <summary>
             Gets the list of supported languages (<code>weavy.languages</code>).
            </summary>
            <remarks>
              Separate multiple entries with comma, e.g. en, sv-SE etc.
            </remarks>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.WindowsAuthentication">
            <summary>
            Gets a value indicating whether the application is configured to use windows authentication.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ZoomMeetings">
            <summary>
            Gets a value indicating whether Zoom meetings is available.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.TeamsMeetings">
            <summary>
            Gets a value indicating whether Teams Online meetings is available.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ZoomAuthenticationUrl">
            <summary>
            Gets a value for the Zoom default authentication url.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.TeamsAuthenticationUrl">
            <summary>
            Gets a value for the Teams Online default authentication url.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.Typing">
            <summary>
            Gets a value indicating if typing indicators are enabled. (<c>weavy.typing</c>).
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.Configuration">
            <summary>
            Gets or sets the current configuration file.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.ConfigurationService.AppSetting(System.String)">
            <summary>
            Get the specified app setting from the appSettings element in the configuration file.
            </summary>
            <param name="key">The setting key</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ConfigurationService.ConnectionString(System.String)">
            <summary>
            Get the specified connection string from the connectionStrings element in the configuration file.
            </summary>
            <param name="name">The connection string name</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ConfigurationService.GetSection(System.String)">
            <summary>
            Retrieves the specified configuration section from the appplication's configuration file.
            </summary>
            <param name="sectionName">The configuration section name.</param>
            <returns>The specified configuration section object, or null if the section does not exist.</returns>
        </member>
        <member name="P:Weavy.Core.Services.ConfigurationService.ConnectionStrings">
            <summary>
            Gets the application's connection strings.
            </summary>
            <returns>A ConnectionStringSettingsCollection object that contains the ConnectionStringsSection from the current configuration file.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConfigurationService.IsValid">
            <summary>
            Validate and log errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ConfigurationService.Validate">
            <summary>
            Checks if the current configuration is valid. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Services.ActiveDirectoryService">
            <summary>
              Service layer for working with Active Directory.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.Authenticate(System.String,System.String,System.String)">
            <summary>
            Connects to the server and returns a value that specifies if the credentials are valid.
            </summary>
            <param name="domain">The name of the domain or server to use for authentication.</param>
            <param name="username">The username that is validated on the server.</param>
            <param name="password">The password that is validated on the server.</param>
            <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity"/> if the credentials are valid; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.GetPrincipalContext(System.String,System.String,System.String)">
            <summary>
            Gets a container that is used as the base of all operations against the ActiveDirectory.
            </summary>
            <param name="domain">The name of the domain or server.</param>
            <param name="username">The username used to connect to the store. Both username and password must be non-null, and the credentials they specify are used to connect to the store.</param>
            <param name="password">The password used to connect to the store. Both username and password must be non-null, and the credentials they specify are used to connect to the store.</param>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.GetUser(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
            <summary>
            Returns a <see cref="T:Weavy.Core.Models.User"/> from Active Directory.
            </summary>
            <param name="context"></param>
            <param name="identityType">A IdentityType enumeration value that specifies the format of the identityValue parameter.</param>
            <param name="identityValue">The identity of the user principal.</param>
            <returns>A <see cref="T:Weavy.Core.Models.User"/> object-</returns>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.GetUserByEmail(System.DirectoryServices.AccountManagement.PrincipalContext,System.String)">
            <summary>
            Returns a <see cref="T:Weavy.Core.Models.User"/> from Active Directory.
            </summary>
            <param name="context"></param>
            <param name="email"></param>
            <returns>A <see cref="T:Weavy.Core.Models.User"/> object-</returns>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.GetRole(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
            <summary>
            Returns a <see cref="T:Weavy.Core.Models.Role"/> from Active Directory.
            </summary>
            <param name="context"></param>
            <param name="identityType">A IdentityType enumeration value that specifies the format of the identityValue parameter.</param>
            <param name="identityValue">The identity of the user principal.</param>
            <returns>A <see cref="T:Weavy.Core.Models.Role"/> object-</returns>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.GetRoles(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)">
            <summary>
            Get the list of roles of which the specified user is a member.
            </summary>
            <param name="context"></param>
            <param name="identityType">A IdentityType enumeration value that specifies the format of the identityValue parameter.</param>
            <param name="identityValue">The identity of the user principal.</param>
            <returns>A list of <see cref="T:Weavy.Core.Models.Role"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.GetMembers(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String,System.Boolean)">
            <summary>
            Get the members of the specified role. When the recursive flag is set to true, 
            this method searches the specified role recursively and returns all nested role members. 
            </summary>
            <param name="context"></param>
            <param name="identityType">A IdentityType enumeration value that specifies the format of the identityValue parameter.</param>
            <param name="identityValue">The identity of the user principal.</param>
            <param name="recursive"></param>
            <returns>A list of <see cref="T:Weavy.Core.Models.User"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.SearchUsers(System.DirectoryServices.AccountManagement.PrincipalContext,System.String,System.Int32,System.Int32)">
            <summary>
            Returns a paged list of <see cref="T:Weavy.Core.Models.User"/> objects from Active Directory.
            </summary>
            <param name="context"></param>
            <param name="name">The name to search for. Wildcards are allowed, e.g. Joh* will return both John and Johan.</param>
            <param name="top"></param>
            <param name="skip"></param>
            <returns>A paged list of <see cref="T:Weavy.Core.Models.User"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.SearchGroups(System.DirectoryServices.AccountManagement.PrincipalContext,System.String,System.Int32,System.Int32)">
            <summary>
            Returns a paged list of <see cref="T:Weavy.Core.Models.Role"/> objects from Active Directory.
            </summary>
            <param name="context"></param>
            <param name="name">The name to search for. Wildcards are allowed, e.g. Adm* will return both Admins and Administrators.</param>
            <param name="top"></param>
            <param name="skip"></param>
            <returns>A paged list of <see cref="T:Weavy.Core.Models.Role"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.Convert(System.DirectoryServices.AccountManagement.UserPrincipal,System.String)">
            <summary>
              Converts a UserPrincipal to a <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
            <param name="principal">The UserPrincipal to convert.</param>
            <param name="authenticationType"></param>
            <returns>A <see cref="T:Weavy.Core.Models.User"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ActiveDirectoryService.Convert(System.DirectoryServices.AccountManagement.GroupPrincipal)">
            <summary>
              Converts a GroupPrincipal to a <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="principal">The GroupPrincipal to convert.</param>
            <returns>A <see cref="T:Weavy.Core.Models.Role"/> object.</returns>
        </member>
        <member name="T:Weavy.Core.Services.CacheService">
            <summary>
              Service layer for managing the cache.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.Clear">
            <summary>
            Removes all items from the cache.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.Clear(Weavy.Core.Models.CacheRegion)">
            <summary>
            Removes a specific region of the cache.
            </summary>
            <param name="region">The <see cref="T:Weavy.Core.Models.CacheRegion" /> to clear.</param>
        </member>
        <member name="P:Weavy.Core.Services.CacheService.Cache">
            <summary>
            Gets the underlying cache provider.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPluginLoad(System.Guid)">
            <summary>
            Gets a plugin object from the cache.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPluginLoaded(System.Guid,Weavy.Core.Models.IPlugin)">
            <summary>
            Gets a plugin object from the cache.
            </summary>
            <param name="id"></param>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPluginsLoad(Weavy.Core.Models.PluginType)">
            <summary>
              Gets plugins from the cache.
            </summary>
            <param name="type"></param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.IDaemon"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPluginsLoaded(Weavy.Core.Models.PluginType,System.Collections.Generic.List{Weavy.Core.Models.IPlugin})">
            <summary>
              Stores plugins in the cache.
            </summary>
            <param name="type"></param>
            <param name="plugins">List of extensions.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPluginUpdated(Weavy.Core.Models.IPlugin)">
            <summary>
            Clear cache when an plugin was updated.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPluginDeleted(System.Guid)">
            <summary>
            Clears the cache when a plugin was deleted.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPluginsStored">
            <summary>
            Clears the cache when plugins were stored.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPermissionsLoad(Weavy.Core.Models.IEntity,System.Int32)">
            <summary>
            Gets a user's permissions for an entity from the cache.
            </summary>
            <param name="entity">The entity.</param>
            <param name="userId"></param>
            <returns>A list of permissions.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPermissionsLoaded(Weavy.Core.Models.IEntity,System.Int32,System.Collections.Generic.ICollection{Weavy.Core.Models.Permission})">
            <summary>
            Stores a users's permissions for an entity in the cache.
            </summary>
            <param name="entity">The entity.</param>
            <param name="userId">Id of the entity.</param>
            <param name="permissions">The permissions to store.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnPermissionUpdated(Weavy.Core.Models.IEntity,System.Int32)">
            <summary>
            Clears the permission cache for the specified entity and user.
            </summary>
            <param name="entity"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSettingLoad``1(System.String)">
            <summary>
              Gets a setting value from the cache.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="key">Setting key.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSettingLoaded``1(System.String,``0)">
            <summary>
              Stores a setting value in the cache.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="key">Setting key.</param>
            <param name="value">The setting value to store.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSettingDeleted(System.String)">
            <summary>
            Clears the cache when a setting has been deleted.
            </summary>
            <param name="key">Setting key.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSettingUpdated``1(System.String,``0)">
            <summary>
            Updates the cache when a setting has been updated.
            </summary>
            <param name="key">Setting key.</param>
            <param name="value">The updated setting value.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnThemeLoad">
            <summary>
              Gets theme settings from the cache.
            </summary>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Theme"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnThemeLoaded(Weavy.Core.Models.Theme)">
            <summary>
              Stores theme settings in the cache.
            </summary>
            <param name="value">The <see cref="T:Weavy.Core.Models.Theme"/> to store.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnUserLoad(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.User"/> from the cache.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.User"/></param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnUserLoaded(Weavy.Core.Models.User)">
            <summary>
            Stores a <see cref="T:Weavy.Core.Models.User"/> in the cache.
            </summary>
            <param name="user">The <see cref="T:Weavy.Core.Models.User"/> to store in the cache.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnUserIdLoad(System.String)">
            <summary>
            Gets the ID of a <see cref="T:Weavy.Core.Models.User"/> from the cache.
            </summary>
            <param name="username">The username of the <see cref="T:Weavy.Core.Models.User"/></param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Weavy.Core.Models.User"/> has the specified username.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnUserIdLoaded(System.String,System.Nullable{System.Int32})">
            <summary>
            Stores a username/providername->id mapping in the cache.
            </summary>
            <param name="username">The username of the <see cref="T:Weavy.Core.Models.User"/></param>
            <param name="id">The Id of the <see cref="T:Weavy.Core.Models.User"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnUserUpdated(Weavy.Core.Models.User)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.User"/> has been updated.
            </summary>
            <param name="user">The <see cref="T:Weavy.Core.Models.User"/> that was updated.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnUserTrashed(Weavy.Core.Models.User)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.User"/> has been trashed.
            </summary>
            <param name="trashed">The <see cref="T:Weavy.Core.Models.User"/> object that was trashed.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnUserRestored(Weavy.Core.Models.User)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.User"/> has been restored.
            </summary>
            <param name="restored">The <see cref="T:Weavy.Core.Models.User"/> object that was restored.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnUserAddedToRole(System.Int32,System.Int32)">
            <summary>
            Clears the roles cache when a <see cref="T:Weavy.Core.Models.User"/> was added to a <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="roleId"></param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnUserRemovedFromRole(System.Int32,System.Int32)">
            <summary>
            Clears the roles cache when a <see cref="T:Weavy.Core.Models.User"/> was removed from a <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="roleId"></param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnRoleLoad(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Role"/> from the cache.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Role"/></param>
            <returns>An instance of the <see cref="T:Weavy.Core.Models.Role"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnRoleLoaded(Weavy.Core.Models.Role)">
            <summary>
              Stores a <see cref="T:Weavy.Core.Models.Role"/> in the cache.
            </summary>
            <param name="role">The <see cref="T:Weavy.Core.Models.Role"/> to store.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnRolesLoad(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Weavy.Core.Models.Role"/> objects for a <see cref="T:Weavy.Core.Models.User"/> from the cache.
            </summary>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/></param>
            <returns>A list of <see cref="T:Weavy.Core.Models.Role"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnRolesLoaded(System.Int32,System.Collections.Generic.List{Weavy.Core.Models.Role})">
            <summary>
            Stores a list of <see cref="T:Weavy.Core.Models.Role"/> objects for a <see cref="T:Weavy.Core.Models.User"/> in the cache.
            </summary>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/></param>
            <param name="roles">The list of <see cref="T:Weavy.Core.Models.Role"/> objects.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnRoleDeleted(Weavy.Core.Models.Role)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Role"/> has been deleted.
            </summary>
            <param name="role">The <see cref="T:Weavy.Core.Models.Role"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnRoleRestored(Weavy.Core.Models.Role)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Role"/> has been restored.
            </summary>
            <param name="restored">The <see cref="T:Weavy.Core.Models.User"/> object that was restored.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnRoleUpdated(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Role"/> has been updated.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Role"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnMemberAdded(Weavy.Core.Models.Conversation,System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.User"/> is added to a <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="conversation">The <see cref="T:Weavy.Core.Models.Conversation"/></param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnMemberRemoved(Weavy.Core.Models.Conversation,System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.User"/> is removed from a <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="conversation">The <see cref="T:Weavy.Core.Models.Conversation"/></param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnMembersLoad(System.Int32)">
            <summary>
            Gets the members of space from the cache.
            </summary>
            <param name="spaceId"></param>
            <returns>A list of members.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnMembersLoaded(System.Int32,System.Collections.Generic.IEnumerable{Weavy.Core.Models.Member})">
            <summary>
            Stores the members of a space in the cache.
            </summary>
            <param name="spaceId"></param>
            <param name="members">The permissions to store.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnMemberAdded(Weavy.Core.Models.Space,Weavy.Core.Models.Member)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Member"/> was added to a <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="space">The <see cref="T:Weavy.Core.Models.Space"/></param>
            <param name="member">Member thast was added.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnMemberRemoved(Weavy.Core.Models.Space,Weavy.Core.Models.Member)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.User"/> was removed from a <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="space">The <see cref="T:Weavy.Core.Models.Space"/></param>
            <param name="member">Member that was removed.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSpaceLoad(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Space"/> from the cache.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/></param>
            <returns>An instance of the <see cref="T:Weavy.Core.Models.Space"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSpaceLoaded(Weavy.Core.Models.Space)">
            <summary>
              Stores a <see cref="T:Weavy.Core.Models.Space"/> in the cache.
            </summary>
            <param name="space">The <see cref="T:Weavy.Core.Models.Space"/> to store.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSpaceDeleted(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Space"/> has been deleted.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSpaceArchived(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Space"/> was archived.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSpaceUnArchived(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Space"/> was unarchived.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSpaceTrashed(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Space"/> has been trashed.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSpaceRestored(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Space"/> has been restored.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnSpaceUpdated(System.Int32)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Space"/> has been updated.
            </summary>
            <param name="spaceId">Id of the <see cref="T:Weavy.Core.Models.Space"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnDirectoryLoad(System.Int32)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Directory"/> from the cache.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Directory"/></param>
            <returns>An instance of the <see cref="T:Weavy.Core.Models.Directory"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnDirectoryLoaded(Weavy.Core.Models.Directory)">
            <summary>
              Stores a <see cref="T:Weavy.Core.Models.Directory"/> in the cache.
            </summary>
            <param name="directory">The <see cref="T:Weavy.Core.Models.Role"/> to store.</param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnDirectoryDeleted(Weavy.Core.Models.Directory)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Directory"/> has been deleted.
            </summary>
            <param name="directory">The <see cref="T:Weavy.Core.Models.Directory"/></param>
        </member>
        <member name="M:Weavy.Core.Services.CacheService.OnDirectoryUpdated(Weavy.Core.Models.Directory)">
            <summary>
            Clears the cache when a <see cref="T:Weavy.Core.Models.Directory"/> has been updated.
            </summary>
            <param name="directory">The <see cref="T:Weavy.Core.Models.Directory"/></param>
        </member>
        <member name="T:Weavy.Core.Services.CommentService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Comment"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Comment"/> object from the repository.
            </summary>
            <param name="id">Comment ID (unique identifier).</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return comment even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Comment"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.GetCount">
            <summary>
              Gets the total number of <see cref="T:Weavy.Core.Models.Comment" /> items in the system.
            </summary>
            <returns>The total number of <see cref="T:Weavy.Core.Models.Comment" /> items in the system.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.Get(Weavy.Core.Models.ICommentable,System.Boolean,System.Boolean)">
            <summary>
              Gets the comments for the specified entity.
            </summary>
            <param name="commentable">The entity for which to get comments.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to keep trashed comments, <c>false</c> to remove them.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Comment"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.Insert(Weavy.Core.Models.Comment,Weavy.Core.Models.ICommentable,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Comment"/> object into the repository.
            </summary>
            <param name="comment"><see cref="T:Weavy.Core.Models.Comment"/> object to insert.</param>
            <param name="parent">The parent object where the commetn should be inserted.</param>
            <param name="blobs">Ids of <see cref="T:Weavy.Core.Models.Blob"/>s to attach.</param>
            <param name="embeds">Ids of <see cref="T:Weavy.Core.Models.Embed"/>s to attach</param>
            <param name="meetings">Ids of <see cref="T:Weavy.Core.Models.Meeting"/>s to attach</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Comment"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.Update(Weavy.Core.Models.Comment,System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
              Updates a <see cref="T:Weavy.Core.Models.Comment"/> object.
            </summary>
            <param name="comment"><see cref="T:Weavy.Core.Models.Comment"/> object to update.</param>
            <param name="blobs">Ids of additional <see cref="T:Weavy.Core.Models.Blob"/>s to attach.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The updated <see cref="T:Weavy.Core.Models.Comment"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.Follow(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Mark a <see cref="T:Weavy.Core.Models.Comment"/> as followed by the specified user.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Comment"/> to follow.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that follows, default is <c>null</c> which indicates the current user.</param>
            <returns>The followed <see cref="T:Weavy.Core.Models.Comment"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Comment"/> object from the repository.
            </summary>
            <param name="id">Comment id.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <remarks>
              This will delete the object and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
            <returns>The deleted <see cref="T:Weavy.Core.Models.Comment"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.Trash(System.Int32,System.Boolean)">
            <summary>
              Sends a <see cref="T:Weavy.Core.Models.Comment"/> to the trash.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Comment"/> to trash.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The trashed <see cref="T:Weavy.Core.Models.Comment"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.Restore(System.Int32,System.Boolean)">
            <summary>
              Restores a trashed <see cref="T:Weavy.Core.Models.Comment"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Comment"/> to restore.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The restored <see cref="T:Weavy.Core.Models.Comment"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.CommentService.Search(Weavy.Core.Models.CommentQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.CommentQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.CommentQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Comment"/> items.</returns>
        </member>
        <member name="T:Weavy.Core.Services.DaemonService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Daemon"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.DaemonService.Run``1">
            <summary>
            Run the specified daemon on a background thread.
            </summary>
            <typeparam name="TDaemon"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.DaemonService.Run(Weavy.Core.Models.IDaemon)">
            <summary>
            Run the specified daemon on a background thread.
            </summary>
            <param name="daemon"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Services.EmbedService">
            <summary>
              Service layer for embeds.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.EmbedService.Get(System.Int32)">
            <summary>
            Gets the embed with the specified id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EmbedService.Get(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets the embeds with the specified ids.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.EmbedService.Get(Weavy.Core.Models.IHasEmbeds)">
            <summary>
              Get <see cref="T:Weavy.Core.Models.Embed"/>s for the specified entity.
            </summary>
            <param name="entity">The entity for which to get attachments.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Embed"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EmbedService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes an <see cref="T:Weavy.Core.Models.Embed"/> from the repository.
            </summary>
            <param name="id">The id of the embed to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The deleted embed.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EmbedService.Fetch(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Fetch an embed object for the specified url.
            </summary>
            <param name="url">The URL to retrieve embedding information for.</param>
            <param name="maxwidth"></param>
            <param name="maxheight"></param>
            <returns>An <see cref="T:Weavy.Core.Models.Embed"/> object or <c>null</c> if the url did not contain an embeddable resource.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EmbedService.Insert(Weavy.Core.Models.Embed)">
            <summary>
              Inserts an <see cref="T:Weavy.Core.Models.Embed"/> object into the repository.
            </summary>
            <param name="embed"><see cref="T:Weavy.Core.Models.Embed"/> object to insert.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Embed"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EmbedService.Update(Weavy.Core.Models.Embed)">
            <summary>
              Updates an <see cref="T:Weavy.Core.Models.Embed"/> object in the repository.
            </summary>
            <param name="embed"><see cref="T:Weavy.Core.Models.Embed"/> object to insert.</param>
            <returns>The updated <see cref="T:Weavy.Core.Models.Embed"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.EmbedService.GetOEmbed(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="url"></param>
            <param name="maxwidth"></param>
            <param name="maxheight"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Services.ConnectionService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Connection"/> objects.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.ConnectionService.ActiveTimeout">
            <summary>
            The value (in seconds) used to determine if a connection is no longer active.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.ConnectionService.ZombieThreshold">
            <summary>
            The value (in seconds) used to determine if a connection is dead.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.ConnectionService.Get(System.Guid)">
            <summary>
            Gets a <see cref="T:Weavy.Core.Models.Connection"/> object.
            </summary>
            <param name="id">Id if <see cref="T:Weavy.Core.Models.Connection"/> to get.</param>
            <returns>A <see cref="T:Weavy.Core.Models.Connection"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConnectionService.Get">
            <summary>
            Gets all <see cref="T:Weavy.Core.Models.Connection"/> objects.
            </summary>
            <returns>A <see cref="T:Weavy.Core.Models.Connection"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConnectionService.GetByUser(System.Int32)">
            <summary>
            Gets a list of <see cref="T:Weavy.Core.Models.Connection"/> objects for the specified user.
            </summary>
            <param name="id">Id of the user for which to get connections.</param>
            <returns>A list of <see cref="T:Weavy.Core.Models.Connection"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConnectionService.GetByUsers(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets a list of <see cref="T:Weavy.Core.Models.Connection"/> objects for the specified users.
            </summary>
            <param name="ids">Ids of the users for which to get connections.</param>
            <returns>A list of <see cref="T:Weavy.Core.Models.Connection"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConnectionService.Insert(Weavy.Core.Models.Connection)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Connection"/> object into the repository.
            </summary>
            <param name="connection"><see cref="T:Weavy.Core.Models.Connection"/> object to insert.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Connection"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConnectionService.Update(Weavy.Core.Models.Connection)">
            <summary>
              Updates a <see cref="T:Weavy.Core.Models.Connection"/> object.
            </summary>
            <param name="connection"><see cref="T:Weavy.Core.Models.Connection"/> object to update.</param>
            <returns>The updated <see cref="T:Weavy.Core.Models.Connection"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConnectionService.Delete(System.Guid)">
            <summary>
              Deletes a <see cref="T:Weavy.Core.Models.Connection"/> object.
            </summary>
            <param name="id">Id of the connection to delete.</param>
        </member>
        <member name="M:Weavy.Core.Services.ConnectionService.DeleteZombies">
            <summary>
              Delete zombie connections that haven't been updated in <see name="ZombieThreshold"/> seconds.
            </summary>
        </member>
        <member name="T:Weavy.Core.Services.DavService">
            <summary>
            Service layer for WebDAV.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.DavService.ROOT_FOLDER">
            <summary>
            Name of root dav folder.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.DavService.GetFromPath(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get entity by WebDAV path.
            </summary>
            <param name="path">The full path from the root of the WebDAV repository, e.g. DAV/s3/a21/i41/i42/file.txt or DAV/p3/file.txt</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return content even if trashed, otherwise <c>false</c>.</param>
            <returns>An object implementing <see cref="T:Weavy.Core.Models.IEntity"/> or <c>null</c> if no entity was found for the specified path.</returns>
        </member>
        <member name="M:Weavy.Core.Services.DavService.GetHierarchy(Weavy.Core.Models.IEntity,System.Boolean,System.Boolean)">
            <summary>
            Returns the hierarchy of entities leading down to the specified <see cref="T:Weavy.Core.Models.IEntity"/>.
            </summary>
            <param name="entity"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed items, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Services.LogEntryService">
            <summary>
              Service layer for the system event log.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.LogEntryService.Get(System.Int32)">
            <summary>
            Gets a <see cref="T:Weavy.Core.Models.LogEntry"/> from the event log.
            </summary>
            <param name="id">Id of log entry to get.</param>
            <returns>An <see cref="T:Weavy.Core.Models.LogEntry"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LogEntryService.Get(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Gets a list of <see cref="T:Weavy.Core.Models.LogEntry"/> objects from the event log.
            </summary>
            <param name="ids">Ids of the events to get.</param>
            <returns>A list of <see cref="T:Weavy.Core.Models.LogEntry"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LogEntryService.Insert(Weavy.Core.Models.LogEntry)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.LogEntry"/> into the event log.
            </summary>
            <param name="e"><see cref="T:Weavy.Core.Models.LogEntry"/> object to insert.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.LogEntry"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LogEntryService.Delete(System.Int32)">
            <summary>
            Removes all <see cref="T:Weavy.Core.Models.LogEntry"/>s user with the specified actor id.
            </summary>
            <param name="actorId">The user id of the actor to remove <see cref="T:Weavy.Core.Models.LogEntry"/>s for.</param>
        </member>
        <member name="M:Weavy.Core.Services.LogEntryService.Search(Weavy.Core.Models.LogEntryQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.LogEntryQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.LogEntryQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.LogEntry"/> items.</returns>
        </member>
        <member name="T:Weavy.Core.Services.FunctionService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.IFunction"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.FunctionService.Run(Weavy.Core.Models.IFunction)">
            <summary>
            Run the specified function.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Services.RoleService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Role"/> objects.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.RoleService.AdministratorsId">
            <summary>
            The Id of the Administrators role (-1).
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.RoleService.CreatorsId">
            <summary>
            The Id of the Creators role (-2).
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Role"/> object from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Role"/>.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return <see cref="T:Weavy.Core.Models.Role"/> even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Role"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.Get(System.String,System.Boolean,System.Boolean)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Role"/> object from the repository.
            </summary>
            <param name="rolename">Rolename of the <see cref="T:Weavy.Core.Models.Role"/>.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return <see cref="T:Weavy.Core.Models.Role"/> even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Role"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.Get(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
              Gets a list of <see cref="T:Weavy.Core.Models.Role"/> objects from the repository.
            </summary>
            <param name="ids">Ids of the roles to get.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed roles, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Role"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.GetRolesForUser(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.Role"/>s that the <see cref="T:Weavy.Core.Models.User"/> is a member of.
            </summary>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> for which to get <see cref="T:Weavy.Core.Models.Role"/>s.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed roles, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Role"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.GetMembers(System.Int32,Weavy.Core.Models.UserQuery)">
            <summary>
              Gets the members of the specified <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Role"/> for which to get members.</param>
            <param name="query"></param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.User"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.Insert(Weavy.Core.Models.Role,System.Boolean)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Role"/> object into the repository.
            </summary>
            <param name="role"><see cref="T:Weavy.Core.Models.Role"/> object to insert.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Role"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Role"/> object from the repository.
            </summary>
            <param name="id">Id of the role to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The deleted role.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.Restore(System.Int32,System.Boolean)">
            <summary>
              Restores a trashed <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="id">Id of the role to restore.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The restored role.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.Search(Weavy.Core.Models.RoleQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.RoleQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.RoleQuery"/> object containing the search criteria.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Role"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.Trash(System.Int32,System.Boolean)">
            <summary>
              Trashes a <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="id">Id of the role to trash.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The trashed role.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.Update(Weavy.Core.Models.Role,System.Boolean)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="role">The <see cref="T:Weavy.Core.Models.Role"/> object to update.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The updated <see cref="T:Weavy.Core.Models.Role"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.AddMember(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Adds a <see cref="T:Weavy.Core.Models.User"/> to the specified <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="roleId">Id of the <see cref="T:Weavy.Core.Models.Role"/>.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> for the current user.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The added member.</returns>
        </member>
        <member name="M:Weavy.Core.Services.RoleService.RemoveMember(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Removes a <see cref="T:Weavy.Core.Models.User"/> from the specified <see cref="T:Weavy.Core.Models.Role"/>.
            </summary>
            <param name="roleId">Id of the <see cref="T:Weavy.Core.Models.Role"/>.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/>, <c>null</c> for the current user.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The removed member.</returns>
        </member>
        <member name="T:Weavy.Core.Services.IndexService">
            <summary>
              Service layer for managing the fulltext index.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.#cctor">
            <summary>
            Static constructor for initializing the fulltext index.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.Count">
            <summary>
            Gets the number of entities in the index.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.Size">
            <summary>
            Gets the size of the fulltext index.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.Optimize">
            <summary>
            Optimize the index.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.Delete(Weavy.Core.Models.IEntity)">
            <summary>
            Delete an entity from the fulltext index.
            </summary>
            <param name="entity">The entity to delete from the index.</param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.Get(Weavy.Core.Models.IEntity)">
            <summary>
            Get an <see cref="T:Weavy.Core.Models.IndexDocument"/> from the fulltext index.
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.GetDirectory">
            <summary>
            Gets the <see cref="T:Lucene.Net.Store.Directory"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.GetLastIndexed(Weavy.Core.Models.EntityType)">
            <summary>
            Gets the timestamp of the last indexed item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.GetReader">
            <summary>
            Gets the IndexReader.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.GetWriter">
            <summary>
            Gets the IndexWriter.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.Insert(System.Collections.Generic.IEnumerable{Weavy.Core.Models.IEntity})">
            <summary>
            Add a list of entities to the fulltext index.
            </summary>
            <param name="entities">The entities to add to the index.</param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.SetLastIndexed(Weavy.Core.Models.EntityType,System.Int64)">
            <summary>
            Sets the timestamp of the last indexed item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.Search(Weavy.Core.Models.Query,System.String,System.Boolean)">
            <summary>
            Search the fulltext index with the specified <see cref="T:Weavy.Core.Models.Query"/>.
            </summary>
            <param name="query">A query.</param>
            <param name="searcher">A named searcher to use for the query.</param>
            <param name="breadcrumbs"><c>true</c> to include path to ancestors in the breadcrumb property.</param>
            <returns>A list of documents matching the query.</returns>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.AddField(Lucene.Net.Documents.Document,System.String,System.String)">
            <summary>
            Helper method for adding a document field based on our schema.
            </summary>
            <param name="doc"></param>
            <param name="fieldname"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.AddAppFields(Lucene.Net.Documents.Document,Weavy.Core.Models.App)">
            <summary>
            Add index document fields for apps.
            </summary>
            <param name="doc"></param>
            <param name="app"></param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.AddContentFields(Lucene.Net.Documents.Document,Weavy.Core.Models.Content)">
            <summary>
            Add index document fields for content.
            </summary>
            <param name="doc"></param>
            <param name="content"></param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.AddCommentFields(Lucene.Net.Documents.Document,Weavy.Core.Models.Comment)">
            <summary>
            Add index document fields for messages.
            </summary>
            <param name="doc"></param>
            <param name="comment"></param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.AddCommonFields(Lucene.Net.Documents.Document,Weavy.Core.Models.IEntity)">
            <summary>
            Add common index document fields.
            </summary>
            <param name="doc"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.AddMessageFields(Lucene.Net.Documents.Document,Weavy.Core.Models.Message)">
            <summary>
            Add index document fields for messages.
            </summary>
            <param name="doc"></param>
            <param name="message"></param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.AddPostFields(Lucene.Net.Documents.Document,Weavy.Core.Models.Post)">
            <summary>
            Add index document fields for posts.
            </summary>
            <param name="doc"></param>
            <param name="post"></param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.GetEmbedStrings(Weavy.Core.Models.IHasEmbeds)">
            <summary>
            Helper method for extracting embed text.
            </summary>
            <param name="hasembed"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.GetAttachmentStrings(Weavy.Core.Models.IHasAttachments)">
            <summary>
            Helper method for getting attachment names etc.
            </summary>
            <param name="hasattachments"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.AddSpaceFields(Lucene.Net.Documents.Document,Weavy.Core.Models.Space)">
            <summary>
            Add index document fields for spaces.
            </summary>
            <param name="doc"></param>
            <param name="space"></param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.AddUserFields(Lucene.Net.Documents.Document,Weavy.Core.Models.User)">
            <summary>
            Add index document fields for users.
            </summary>
            <param name="doc"></param>
            <param name="user"></param>
        </member>
        <member name="M:Weavy.Core.Services.IndexService.GetStringForTextField(Weavy.Core.Models.IExpando)">
            <summary>
            Get the text to index.
            </summary>
            <param name="expando"></param>
        </member>
        <member name="T:Weavy.Core.Services.ExternalLinkService">
            <summary>
            Service layer for <see cref="T:Weavy.Core.Models.ExternalLink"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.ExternalLinkService.Delete(System.Guid,System.Boolean)">
            <summary>
              Permanently deletes an <see cref="T:Weavy.Core.Models.ExternalLink"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.ExternalLink"/> to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The deleted <see cref="T:Weavy.Core.Models.ExternalLink"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ExternalLinkService.DeleteExpired">
            <summary>
              Permanently deletes all expired <see cref="T:Weavy.Core.Models.ExternalLink"/>s.
            </summary>
            <returns>The deleted <see cref="T:Weavy.Core.Models.ExternalLink"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ExternalLinkService.Get(System.Guid)">
            <summary>
              Gets an <see cref="T:Weavy.Core.Models.ExternalLink"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.ExternalLink"/>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.ExternalLink"/> class or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ExternalLinkService.Get(Weavy.Core.Models.IEntity)">
            <summary>
              Gets all <see cref="T:Weavy.Core.Models.ExternalLink"/>s for the specified <see cref="T:Weavy.Core.Models.IEntity"/>.
            </summary>
            <param name="entity">Entity for which to get links.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.ExternalLink"/> class or <c>null</c> if it does not exist.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ExternalLinkService.Insert(Weavy.Core.Models.ExternalLink,System.Boolean)">
            <summary>
              Inserts a new <see cref="T:Weavy.Core.Models.ExternalLink"/> to an <see cref="T:Weavy.Core.Models.IEntity"/>.
            </summary>
            <param name="link">The link to insert.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.ExternalLink"/></returns>
        </member>
        <member name="M:Weavy.Core.Services.ExternalLinkService.IncrementViews(System.Guid)">
            <summary>
              Increment the number of views for the <see cref="T:Weavy.Core.Models.ExternalLink"/>.
            </summary>
            <returns>Returns the updated <see cref="T:Weavy.Core.Models.ExternalLink"/>.</returns>
        </member>
        <member name="T:Weavy.Core.Services.LicenseService">
            <summary>
              Service layer for managing licenses.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.#cctor">
            <summary>
            Defualt constructor.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.Get">
            <summary>
            Gets the currently configured <see cref="T:Weavy.Core.Models.License"/>.
            </summary>
            <returns>A <see cref="T:Weavy.Core.Models.License"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.Refresh">
            <summary>
            Refresh license information from the license server.
            </summary>
            <returns>The <see cref="T:Weavy.Core.Models.License"/> object retrieved from the license server or <c>null</c> if the request failed.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.Register(System.String,System.Boolean,System.String@)">
            <summary>
            Register license with the specified key with the license server.
            </summary>
            <param name="key">The license key of the license to register.</param>
            <param name="store">Set to true to store the license in the DB.</param>
            <param name="error">Parameter used to pass back error message.</param>
            <returns>The <see cref="T:Weavy.Core.Models.License"/> object retrieved from the license server or <c>null</c> if the request failed.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.Request(Weavy.Core.Models.LicenseRequest,System.Boolean,System.String@)">
            <summary>
            Request a new license from the license server.
            </summary>
            <param name="model">The details of the user that registers.</param>
            <param name="store">Set to true to store the license in the DB.</param>
            <param name="error">Out parameter to pass back errors.</param>
            <returns>The <see cref="T:Weavy.Core.Models.License"/> object retrieved from the license server or <c>null</c> if the request failed.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.Fetch(System.String,System.Boolean,System.String@,Weavy.Core.Models.LicenseRequest)">
            <summary>
            Fetches the specified <see cref="T:Weavy.Core.Models.License"/> from the license server.
            </summary>
            <param name="key">The license key of the license, <c>null to request a new license.</c></param>
            <param name="register"><c>true</c> if the request is a registration, otherwise <c>false</c>.</param>
            <param name="error">Out parameter to pass back errors.</param>
            <param name="model">The details of the user that registers.</param>
            <returns>The <see cref="T:Weavy.Core.Models.License"/> object retrieved from the license server or <c>null</c> if the request failed.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.Store(Weavy.Core.Models.License)">
            <summary>
            Stores the license in the repository.
            </summary>
            <param name="license"></param>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.HasError(Weavy.Core.Models.License)">
            <summary>
            Returns true if there is something wrong with the license, e.g. the key and/or signature is invalid.
            </summary>
            <param name="license">The license to check for errors.</param>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.IsVersionAllowed(Weavy.Core.Models.License)">
            <summary>
            Returns true if the current version is allowed by the license, i.e. if the maintenance subscription covers this release.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.IsKeyValid(System.String)">
            <summary>
            Returns true if the license key is valid.
            </summary>
            <param name="key">The license key to verify.</param>
            <returns><c>true</c> if the license key is valid, otherwise <c>false</c></returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.IsSignatureValid(Weavy.Core.Models.License)">
            <summary>
            Verifies that the digital signature of the license is valid.
            </summary>
            <param name="license">The license to verify.</param>
            <returns>Returns <c>true</c> if the signature is valid, otherwise <c>false</c></returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.GetDataToSign(Weavy.Core.Models.License)">
            <summary>
            Extracts the data to sign from a license.
            </summary>
            <param name="license">The license</param>
            <returns>A <c>string</c> to sign.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.GetPhysicalAddress">
            <summary>
            Returns the Physical Address (MAC) of the network card.
            </summary>
            <returns>A string containing the physical address of the network card.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.CanPingLicenseServer">
            <summary>
            Pings the license server.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.AlignLicense(Weavy.Core.Models.License)">
            <summary>
            Activates / de-activates (e.g. restores/trashes) users based on the current user count and the MaxUsers property of the <see cref="T:Weavy.Core.Models.License"/> object.
            </summary>
            <param name="license">The actual license.</param>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.HasReachedSpaceLimit(Weavy.Core.Models.License)">
            <summary>
            Gets a value indicating if the number of spaces in the system has reached the space limit in the license.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.HasReachedUserLimit(Weavy.Core.Models.License)">
            <summary>
            Gets a value indicating if the number of users in the system has reached the user limit in the license.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.IsInvalid(Weavy.Core.Models.License)">
            <summary>
            Gets a value indicating whether the specified license is invalid.
            </summary>
            <returns><c>true</c> if the license has expired and/or version is not allowed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.IsExpired(Weavy.Core.Models.License)">
            <summary>
            Gets a value indicating whether the specified license has reached the expiry date and there are no more grace days.
            </summary>
            <returns><c>true</c> if we have reached the expiry date stated in the license, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.IsApproachingSpaceLimit(Weavy.Core.Models.License)">
            <summary>
            Gets a value indicating if the number of spaces in the system is approaching the space limit in the license.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.IsApproachingUserLimit(Weavy.Core.Models.License)">
            <summary>
            Gets a value indicating if the number of users in the system is approaching the user limit in the license.
            </summary>
            <param name="license">The license to check, if <c>null</c> will check the currently installed license.</param>
        </member>
        <member name="M:Weavy.Core.Services.LicenseService.IsGracePeriod(Weavy.Core.Models.License)">
            <summary>
            Gets a value indicating if the license has expired and is within the grace period.
            </summary>
            <returns><c>true</c> if the system is currently within the grace period stated in the license, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Weavy.Core.Services.MailService">
            <summary>
              Service layer for sending email.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.MailService.MailDirectory">
            <summary>
            Gets the path to the directory where emails are stored.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.MailService.FailedDirectory">
            <summary>
            Gets the path to the directory where failed emails are stored.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.MailService.SentDirectory">
            <summary>
             Gets the path to the directory where sent emails are stored.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.MailService.IsConfigured">
            <summary>
            Returns <c>true</c> if application is configured to send emails, otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.MailService.GetSmtpClient">
            <summary>
            Returns an <see cref="T:System.Net.Mail.SmtpClient"/> with the settings from <see cref="T:Weavy.Core.Services.ConfigurationService"/>.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.MailService.Log(System.Net.Mail.MailMessage,System.Exception)">
            <summary>
            Logs a <see cref="T:System.Net.Mail.MailMessage"/> to the App_Data\Mail folder.
            </summary>
            <param name="message">The message to save.</param>
            <param name="exception"></param>
            <returns>The file where the message was saved,</returns>
        </member>
        <member name="M:Weavy.Core.Services.MailService.LinkResources(System.Net.Mail.MailMessage)">
            <summary>
            Converts image urls in the message to linked resources.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Weavy.Core.Services.MailService.Send(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient,System.Boolean)">
            <summary>
            Sends the specified <see cref="T:System.Net.Mail.MailMessage"/>.
            </summary>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to send.</param>
            <param name="smtp">The <see cref="T:System.Net.Mail.SmtpClient"/> settings to use or <c>null</c> to use default settings.</param>
            <param name="linkResources"><c>true</c> to convert image urls in the message to linked resources, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Weavy.Core.Services.MailService.Create(Weavy.Core.Models.EmailModel,System.Boolean)">
            <summary>
            Creates a mail message from the specified <see cref="T:Weavy.Core.Models.EmailModel"/>.
            </summary>
            <param name="model">The emnail model.</param>
            <param name="linkResources"></param>
        </member>
        <member name="M:Weavy.Core.Services.MailService.Send(Weavy.Core.Models.EmailModel,System.Net.Mail.SmtpClient)">
            <summary>
            Creates and sends a message based on the specified <see cref="T:Weavy.Core.Models.EmailModel"/>.
            </summary>
            <param name="model">The email model</param>
            <param name="smtp">The <see cref="T:System.Net.Mail.SmtpClient"/> settings to use or <c>null</c> to use default settings.</param>
        </member>
        <member name="M:Weavy.Core.Services.MailService.SendMail(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient,System.Boolean)">
            <summary>
            Sends a <see cref="T:System.Net.Mail.MailMessage"/> using the specified smtp settings. 
            </summary>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to send.</param>
            <param name="smtp">The <see cref="T:System.Net.Mail.SmtpClient"/> to use.</param>
            <param name="dispose"><c>true</c> to dispose the smtp client after sending the message, otherwise <c>false</c></param>
        </member>
        <member name="M:Weavy.Core.Services.MailService.SendAsync(System.Net.Mail.MailMessage)">
            <summary>
            Sends the specified <see cref="T:System.Net.Mail.MailMessage"/> using smtp settings from <see cref="T:Weavy.Core.Services.ConfigurationService"/>.
            This method does not block the calling thread.
            </summary>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to send.</param>
        </member>
        <member name="M:Weavy.Core.Services.MailService.SendAsync(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient)">
            <summary>
            Sends a <see cref="T:System.Net.Mail.MailMessage"/> using the specified smtp settings. 
            This method does not block the calling thread.
            </summary>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to send.</param>
            <param name="smtp">The <see cref="T:System.Net.Mail.SmtpClient"/> settings to use or <c>null</c> to use default settings.</param>
        </member>
        <member name="M:Weavy.Core.Services.MailService.SendAsync(System.Net.Mail.MailMessage,System.Net.Mail.SmtpClient,System.Boolean)">
            <summary>
            Sends a <see cref="T:System.Net.Mail.MailMessage"/> using the specified smtp settings. 
            This method does not block the calling thread.
            </summary>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to send.</param>
            <param name="smtp">The <see cref="T:System.Net.Mail.SmtpClient"/> to use.</param>
            <param name="dispose"><c>true</c> to dispose the smtp client after sending the message, otherwise <c>false</c></param>
        </member>
        <member name="M:Weavy.Core.Services.MailService.MailSentCallback(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Called after an email was sent.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Weavy.Core.Services.MailService.CallbackState">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.MailService.CallbackState.Message">
            <summary>
            Gets the message that was sent.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.MailService.CallbackState.Dispose">
            <summary>
            Gets a value indicating whether the smtp client should be disposed.
            </summary>
        </member>
        <member name="T:Weavy.Core.Services.MessageService">
            <summary>
              Service layer for messages.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.MessageService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets the specified <see cref="T:Weavy.Core.Models.Message"/>.
            </summary>
            <param name="id">Id of the post.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Message"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.MessageService.Get(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
              Gets a list of <see cref="T:Weavy.Core.Models.Message"/> objects from the repository.
            </summary>
            <param name="ids">Ids of the messages to get.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return trashed messages, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Message"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.MessageService.Insert(Weavy.Core.Models.Message,Weavy.Core.Models.Conversation,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
              Insert a new <see cref="T:Weavy.Core.Models.Message"/> into a conversation.
            </summary>
            <param name="message"><see cref="T:Weavy.Core.Models.Message"/> object to insert.</param>
            <param name="parent"><see cref="T:Weavy.Core.Models.Conversation"/> where <see cref="T:Weavy.Core.Models.Message"/> should be inserted.</param>
            <param name="blobs">Ids of <see cref="T:Weavy.Core.Models.Blob"/>s to attach.</param>
            <param name="embeds"></param>
            <param name="meetings"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Message"/></returns>
        </member>
        <member name="M:Weavy.Core.Services.MessageService.Delete(System.Int32,System.Boolean)">
            <summary>
            Deletes a <see cref="T:Weavy.Core.Models.Message" /> from the repository.
            </summary>
            <param name="id">The id of the <see cref="T:Weavy.Core.Models.Message"/> to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.MessageService.Search(Weavy.Core.Models.MessageQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.MessageQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.MessageQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Message"/> items.</returns>
        </member>
        <member name="T:Weavy.Core.Services.PostService">
            <summary>
              Service layer for posts.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets the specified <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
            <param name="id">Id of the post.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return app even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Post"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.GetPosts(System.Int32,Weavy.Core.Models.Query)">
            <summary>
            Get messages posted to the specified app.
            </summary>
            <param name="appId">Id of the app for which to get posts.</param>
            <param name="opts">Query options for paging, sorting etc.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Post"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.GetOptions(System.Int32)">
            <summary>
              Gets the poll options for the specified <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Post"/>.</param> 
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.PollOption"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Vote(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Vote for the specified <see cref="T:Weavy.Core.Models.PollOption"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.PollOption"/> to vote for.</param> 
            <param name="userid">Id of the user that voted.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>Returns the selected <see cref="T:Weavy.Core.Models.PollOption"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.GetVoters(System.Int32)">
            <summary>
              Gets the list of voters for the specified <see cref="T:Weavy.Core.Models.PollOption"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.PollOption"/>.</param> 
            <returns>Returns a list of users that voted for the option.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Insert(Weavy.Core.Models.Post,Weavy.Core.Models.App,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{Weavy.Core.Models.PollOption},System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
            <param name="post"><see cref="T:Weavy.Core.Models.Post"/> to insert.</param>
            <param name="app">App where <see cref="T:Weavy.Core.Models.Post"/> should be inserted.</param>
            <param name="blobs">Ids of <see cref="T:Weavy.Core.Models.Blob"/>s to attach.</param>
            <param name="embeds">Ids of <see cref="T:Weavy.Core.Models.Embed"/>s to attach</param>
            <param name="meetings">Ids of <see cref="T:Weavy.Core.Models.Meeting"/>s to attach</param>
            <param name="options">Poll options.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Post"/></returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Move(System.Int32,Weavy.Core.Models.App,System.Boolean)">
            <summary>
              Moves a <see cref="T:Weavy.Core.Models.Post"/> to another <see cref="T:Weavy.Core.Models.App"/>.
            </summary>
            <param name="id">Id of <see cref="T:Weavy.Core.Models.Post"/> to move.</param>
            <param name="app">The destination app.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The moved <see cref="T:Weavy.Core.Models.Post"/></returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Update(Weavy.Core.Models.Post,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{Weavy.Core.Models.PollOption},System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Updates a <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
            <param name="post">The <see cref="T:Weavy.Core.Models.Post"/> to update.</param>
            <param name="blobs">Ids of new <see cref="T:Weavy.Core.Models.Blob"/>s to attach.</param>
            <param name="options"></param>
            <param name="embeds"></param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The updated <see cref="T:Weavy.Core.Models.Post"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Pin(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Pin the specified post.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Post"/> to pin.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that pinned, default is <c>null</c> which indicates the current user.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The pinned <see cref="T:Weavy.Core.Models.Post"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Unpin(System.Int32,System.Boolean)">
            <summary>
            Unpin the specified post.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Post"/> to unpin.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The unpinned post</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Post"/> and associated data.
            </summary>
            <param name="id">Id of the post.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The deleted <see cref="T:Weavy.Core.Models.Post"/></returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Trash(System.Int32,System.Boolean)">
            <summary>
              Sends a <see cref="T:Weavy.Core.Models.Post"/> to the trash.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Post"/> to trash.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The trashed <see cref="T:Weavy.Core.Models.Post"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Restore(System.Int32,System.Boolean)">
            <summary>
              Restores a trashed <see cref="T:Weavy.Core.Models.Post"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Post"/> to restore.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The restored <see cref="T:Weavy.Core.Models.Post"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PostService.Search(Weavy.Core.Models.PostQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.PostQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.PostQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Post"/> items.</returns>
        </member>
        <member name="T:Weavy.Core.Services.NotificationService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Notification"/> objects.
            </summary>
        </member>
        <member name="P:Weavy.Core.Services.NotificationService.Provider">
            <summary>
            Gets the configured push notification provider.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.Push(Weavy.Core.Models.PushNotification)">
            <summary>
            Sends a push notification to mobile devices.
            </summary>
            <param name="notification">The notification to send.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.Get(System.Int32,System.Boolean)">
            <summary>
              Gets an <see cref="T:Weavy.Core.Models.Notification"/> object.
            </summary>
            <param name="id">Id of notification.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Notification"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.Insert(Weavy.Core.Models.Notification)">
            <summary>
            Inserts a notification.
            </summary>
            <param name="notification">Notification to insert.</param>
            <returns>Returns the inserted <see cref="T:Weavy.Core.Models.Notification"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.GetBadge(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the number to display on the badge for the specified user.
            </summary>
            <param name="userId">Id of user.</param>
            <param name="conversations"><c>true</c> to count unread conversations.</param>
            <param name="notifications"><c>true</c> to count unread notifications.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.GetBadges(System.Int32)">
            <summary>
            Get the badge values for conversations and notifications.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.Update(Weavy.Core.Models.Notification,System.Boolean)">
            <summary>
              Updates the specified <see cref="T:Weavy.Core.Models.Notification"/>.
            </summary>
            <param name="notification">The notification to update.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>Returns the updated <see cref="T:Weavy.Core.Models.Notification"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.ReadAll(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Mark all notifications for the specified user as read.
            </summary>
            <param name="userId">Id of user, or <c>null</c> for current user.</param>
            <param name="lastSeenId">Id of the last seen notification. When specified, newer notifications than this are not marked as read.</param>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.ReadAll(Weavy.Core.Models.IEntity)">
            <summary>
            Marks all notifications for current user that relates to the specifed parent entity as read.
            </summary>
            <param name="parent">The parent entity for the notification.</param>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.Search(Weavy.Core.Models.NotificationQuery)">
            <summary>
            Search notifications with the specified search criteria.
            </summary>
            <param name="query"></param>
            <returns>A list of notifications.</returns>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.GetUnread(System.Nullable{System.Int32},Weavy.Core.Models.NotificationQuery)">
            <summary>
            Gets the unread notifications for a user. The notifications are sorted with the most recent notification first.
            </summary>
            <param name="userId">Id of user for which to get unread notifications, <c>null</c> returns notifications for the current user.</param>
            <param name="query">Query options for paging, sorting etc.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.NotificationService.Cleanup(System.Int32)">
            <summary>
            Permanently deletes old notifications, i.e notifications that were read more than the specified number of days ago.
            </summary>
            <param name="days">Deletes notifications that were read more than this many days ago.</param>
            <returns>The number of deleted notifications.</returns>
        </member>
        <member name="T:Weavy.Core.Services.PermissionService">
            <summary>
              Service layer for managing permissions.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.PermissionService.Assert(Weavy.Core.Models.IEntity,Weavy.Core.Models.Permission,Weavy.Core.Models.User)">
            <summary>
            Checks that the specified user has the requested permission to the specified entity.
            </summary>
            <param name="entity">The entity to check.</param>
            <param name="requested">The requested permissions.</param>
            <param name="user"></param>
            <exception cref="T:Weavy.Core.Models.ForbiddenException">Thrown when the user does not have the required permission.</exception>
        </member>
        <member name="M:Weavy.Core.Services.PermissionService.AssertPermission(Weavy.Core.Models.Permission,Weavy.Core.Models.User)">
            <summary>
              Assert that the specified user has the requested system permission.
            </summary>
            <param name="requested">The requested permission.</param>
            <param name="user"></param>
            <exception cref="T:Weavy.Core.Models.ForbiddenException">Thrown when the user does not have the required permission.</exception>
        </member>
        <member name="M:Weavy.Core.Services.PermissionService.GetAccess(Weavy.Core.Models.IEntity,Weavy.Core.Models.User)">
            <summary>
            Get a user's actual access to an entity. 
            The actual access is computed by merging the access control entries for the user and the roles the user is a member of.
            </summary>
            <param name="entity">The entity for which to get access.</param>
            <param name="user">The <see cref="T:Weavy.Core.Models.User"/> to get access for.</param>
            <returns>Returns the computed acess level for the user and entity.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PermissionService.GetAccessControlList(Weavy.Core.Models.IEntity,Weavy.Core.Models.User)">
            <summary>
            Gets the access control list (ACL) for an entity.
            </summary>
            <param name="entity">The (resolved) entity to get permissions for</param>
            <param name="user">The <see cref="T:Weavy.Core.Models.User"/> to get access for.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.AccessControlEntry"/> objects</returns>
        </member>
        <member name="M:Weavy.Core.Services.PermissionService.GetPermissions(Weavy.Core.Models.IEntity,Weavy.Core.Models.User)">
            <summary>
            Get a user's permissions for an entity. 
            </summary>
            <param name="entity">The entity for which to get permissions.</param>
            <param name="user">The <see cref="T:Weavy.Core.Models.User"/> to get permissions for, <c>null</c> gets access for the current <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Returns the list of permissions for the user and entity.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PermissionService.HasPermission(Weavy.Core.Models.IEntity,Weavy.Core.Models.Permission,Weavy.Core.Models.User)">
            <summary>
              Check if the specified user has the requested permission to the specified entity.
            </summary>
            <param name="entity">The entity to check.</param>
            <param name="requested">The requested permission.</param>
            <param name="user"></param>
        </member>
        <member name="M:Weavy.Core.Services.PermissionService.HasPermission(Weavy.Core.Models.Permission,Weavy.Core.Models.User)">
            <summary>
              Check if the specified user has the requested system permission.
            </summary>
            <param name="requested">The requested permission.</param>
            <param name="user"></param>
        </member>
        <member name="M:Weavy.Core.Services.PermissionService.Merge(System.Collections.Generic.IEnumerable{Weavy.Core.Models.AccessControlEntry})">
            <summary>
            Merge an access control list into one permission entry.
            </summary>
            <param name="acl"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Services.PluginService">
            <summary>
              Service layer for plugins.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.Get(System.Guid)">
            <summary>
              Gets a plugin from the repository.
            </summary>
            <param name="id">Id of the plugin.</param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetSetting(System.Guid)">
            <summary>
              Gets a plugin from the repository.
            </summary>
            <param name="id">Id of the plugin.</param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.ISettings"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetSetting``1">
            <summary>
              Gets settings objects from the repository.
            </summary>
            <typeparam name="TSettings">The type of the settings for which to return metadata.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.ISettings"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetFunction(System.Guid)">
            <summary>
              Gets a plugin from the repository.
            </summary>
            <param name="id">Id of the plugin.</param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IFunction"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetFunction``1">
            <summary>
              Gets function metadata from the repository.
            </summary>
            <typeparam name="TFunction">The type of the function for which to return metadata.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IFunction"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetHook(System.Guid)">
            <summary>
              Gets a plugin from the repository.
            </summary>
            <param name="id">Id of the plugin.</param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IHook"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetHook``1">
            <summary>
              Gets function metadata from the repository.
            </summary>
            <typeparam name="THook">The type of the hook for which to return metadata.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IFunction"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.Get(Weavy.Core.Models.PluginType,System.Boolean)">
            <summary>
              Gets all plugins of the specified type from the repository.
            </summary>
            <param name="type">The type of plugin to return.</param>
            <param name="filter"><c>true</c> to filter the result to only return enabled and loaded plugins.</param>
            <returns>Returns a list of plugins of the specified type.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetApps(System.Boolean)">
            <summary>
            Get metadata for all apps.
            </summary>
            <param name="filter"><c>true</c> to only return settings apps that are enabled and loaded.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetApp(System.Guid)">
            <summary>
              Gets app metadata from the repository.
            </summary>
            <param name="id"></param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetApp``1">
            <summary>
              Gets app metadata from the repository.
            </summary>
            <typeparam name="TApp">The type of app for which to return metadata.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetFunctions(System.Boolean)">
            <summary>
            Gets all functions.
            </summary>
            <param name="filter">True to only return settings plugins that are enabled and loaded.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetTool(System.Guid)">
            <summary>
              Gets tool metadata from the repository.
            </summary>
            <param name="id">Id of the plugin.</param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.ITool"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetTool``1">
            <summary>
              Gets tool metadata from the repository.
            </summary>
            <typeparam name="TTool">The type of the tool for which to return metadata.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.ITool"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetTools(System.Boolean)">
            <summary>
            Gets all tools.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetHooks(System.Boolean)">
            <summary>
            Gets all hooks.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetContentTypes(System.Boolean)">
            <summary>
            Gets all content types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetProfiles(System.Boolean)">
            <summary>
            Gets all profile types.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetSettings(System.Boolean)">
            <summary>
            Gets all settings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetDaemons(System.Boolean)">
            <summary>
            Gets all daemons.
            </summary>
            <param name="filter">True to only return daemon plugins that are enabled and loaded.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.Delete(System.Guid)">
            <summary>
            Deletes an plugin from the repository.
            </summary>
            <param name="id">The id of the plugin to delete.</param>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.Enable(System.Guid)">
            <summary>
            Enables a plugin.
            </summary>
            <param name="id">The id of the plugin to enable.</param>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.Disable(System.Guid)">
            <summary>
            Disables a plugin.
            </summary>
            <param name="id">The id of the plugin to disable.</param>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.Update(Weavy.Core.Models.IPlugin)">
            <summary>
              Updates an existing plugin in the repository.
            </summary>
            <param name="plugin"><see cref="T:Weavy.Core.Models.IPlugin"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.Filter(System.Collections.Generic.IEnumerable{Weavy.Core.Models.IPlugin})">
            <summary>
            Filters a list of <see cref="T:Weavy.Core.Models.IPlugin"/>, removing items that are not loaded or enabled. 
            </summary>
            <param name="plugins">The list of plugins to filter.</param>
            <returns>A list of plugins.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.Filter(Weavy.Core.Models.IPlugin)">
            <summary>
            Filters a <see cref="T:Weavy.Core.Models.IPlugin"/>, returning <c>null</c> if the plugin is not loaded or enabled. 
            </summary>
            <param name="plugin">The <see cref="T:Weavy.Core.Models.IPlugin"/> to filter.</param>
            <returns>The <see cref="T:Weavy.Core.Models.IPlugin"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.Get``1">
            <summary>
              Gets plugin metadata from the repository.
            </summary>
            <typeparam name="TPlugin">The type of the plugin for which to return metadata.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetDaemon(System.Guid)">
            <summary>
              Gets daemon metadata from the repository.
            </summary>
            <param name="id"></param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetDaemon``1">
            <summary>
              Gets daemon metadata from the repository.
            </summary>
            <typeparam name="TDaemon">The type of the plugin for which to return metadata.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetContentType(System.Guid)">
            <summary>
              Gets content type metadata from the repository.
            </summary>
            <param name="id"></param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetContentType``1">
            <summary>
              Gets content type metadata from the repository.
            </summary>
            <typeparam name="TContent">The type of content for which to return metadata.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetProfile(System.Guid)">
            <summary>
              Gets profile metadata from the repository.
            </summary>
            <param name="id"></param>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetProfile``1">
            <summary>
              Gets profile metadata from the repository.
            </summary>
            <typeparam name="TProfile">The type of the profile for which to return metadata.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.IPlugin"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetCommands(System.Boolean)">
            <summary>
            Gets all command line tools.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetCommand(System.String)">
            <summary>
            Gets a command by name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetDefaultMetaData(System.Type)">
            <summary>
            Get default plugin metadata for an extension type, i.e. the metadata that is specified via attributes on the class.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.SetDefaultMetaData(Weavy.Core.Models.IPlugin,System.Boolean)">
            <summary>
            Set default metadata on the specified plugin.
            </summary>
            <param name="plugin"></param>
            <param name="reset"></param>
            <returns><c>true</c> if any metadata was set, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.PluginService.GetPluginType(System.Type)">
            <summary>
            Gets the type of a plugin, i.e. "App", "Content", "Profile", "Daemon", "Hook", "Function", "Plugin", "Settings" etc.
            </summary>
            <param name="type">Extension to get type name of.</param>
            <returns>Returns the <see cref="T:Weavy.Core.Models.PluginType"/>.</returns>
        </member>
        <member name="T:Weavy.Core.Services.SettingService">
            <summary>
            Service layer for settings.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.SettingService.Get``1">
            <summary>
              Get settings from the repository.
            </summary>
            <typeparam name="TSettings">The type of the settings class to return.</typeparam>
            <returns>Returns an object implementing the <see cref="T:Weavy.Core.Models.ISettings"/> interface.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SettingService.Set(Weavy.Core.Models.ISettings)">
            <summary>
              Store settings in the repository.
            </summary>
            <param name="settings"><see cref="T:Weavy.Core.Models.ISettings"/> object to update.</param>
        </member>
        <member name="M:Weavy.Core.Services.SettingService.Get(System.String,System.Object)">
            <summary>
            Gets a setting value from the repository.
            </summary>
            <param name="key">Setting key.</param>
            <param name="defaultValue">The default value to return if the setting does not exist.</param>
            <returns>Returns the value of the setting.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SettingService.Get``1(System.String,``0)">
            <summary>
            Gets a setting value from the repository.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="key">Setting key.</param>
            <param name="defaultValue">The default value to return if the setting does not exist.</param>
            <returns>Returns the value of the setting.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SettingService.Delete(System.String)">
            <summary>
              Permanently removes a setting from the repository.
            </summary>
            <param name="key">Setting key.</param>
        </member>
        <member name="M:Weavy.Core.Services.SettingService.Set``1(System.String,``0)">
            <summary>
            Store a setting into the repository.
            </summary>
            <typeparam name="T">The type of the setting value.</typeparam>
            <param name="key">Setting key.</param>
            <param name="value">The value of the setting.</param>
        </member>
        <member name="T:Weavy.Core.Services.ConversationService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Conversation"/> objects.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.AddMember(System.Int32,System.Int32,Weavy.Core.Models.Access,System.Boolean)">
            <summary>
              Adds a <see cref="T:Weavy.Core.Models.User"/> to the specified <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/> to join.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <param name="access">The access rights to set for the user.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The added member</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="id">Id of conversation to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <remarks>
              This will delete the conversation and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
            <returns>The deleted conversation.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Conversation"/> object from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/>.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return conversation even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Conversation"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.GetAttachments(System.Int32,Weavy.Core.Models.QueryOptions,System.Boolean)">
            <summary>
              Gets attachments in the <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/>.</param>
            <param name="opts"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="sudo"></param>
            <returns>Returns an list of <see cref="T:Weavy.Core.Models.Attachment"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.GetEmbeds(System.Int32,Weavy.Core.Models.QueryOptions,System.Boolean)">
            <summary>
              Get embeds in the <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/>.</param>
            <param name="opts"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="sudo"></param>
            <returns>Returns an list of <see cref="T:Weavy.Core.Models.Embed"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.GetAsMember(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Conversation"/> object from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/>.</param>
            <param name="memberId">Id of the conversation member.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return conversation even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Conversation"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.SetDelivered(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
              Sets a value indicating when the last message in the conversation was delivered to the specified user.
            </summary>
            <param name="id">The id of the conversation.</param>
            <param name="deliveredAt">Time when message was delivered to user, or <c>null</c> to clear delivery status for the conversation.</param>
            <param name="userId">The id of user.</param>
            <returns>Returns the updated conversation.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.SetRead(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
              Sets a value indicating if and when the <see cref="T:Weavy.Core.Models.Conversation"/> was read.
            </summary>
            <param name="id">The id of the conversation.</param>
            <param name="readAt">Time when conversation was read, or <c>null</c> to mark conversation as unread.</param>
            <param name="userId">The id of user.</param>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.SetNotified(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
              Marks a <see cref="T:Weavy.Core.Models.Conversation"/> as notified via email.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/>.</param>
            <param name="notifiedAt">The value to set. Set to <c>null</c> to clear the NotifiedAt paremeter.</param>
            <param name="userId">Id of user for which conversation should be marked as notified, <c>null</c> for current user.</param>
            <returns>Returns the conversation.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.SetArchived(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
              Sets a value indicating if the <see cref="T:Weavy.Core.Models.Conversation"/> is archived or not.
            </summary>
            <param name="id">The id of the conversation.</param>
            <param name="archivedAt">Time when conversation was archived, or <c>null</c> to unarchive.</param>
            <param name="userId">The id of user.</param>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.ReadAll(System.Int32)">
            <summary>
            Sets the read status to true for all the users' conversations.
            </summary>
            <param name="userId">Id of user.</param>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.GetOneOnOne(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Returns existing one-on-one conversation between 2 people, or <c>null</c> if no such conversation exists.
            </summary>
            <param name="first">Id of first user</param>
            <param name="second">If of second user</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return conversation even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Conversation"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.GetFollowed(System.Int32,Weavy.Core.Models.QueryOptions)">
            <summary>
              Gets the conversations that a user is following.
            </summary>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> for which to get followed conversations.</param>        
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.GetStarred(System.Int32,Weavy.Core.Models.QueryOptions)">
            <summary>
              Gets the conversations that a user has starred.
            </summary>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> for which to get starred conversations.</param>   
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.GetMembers(System.Int32,Weavy.Core.Models.ConversationMemberQuery)">
            <summary>
              Gets the users that are members of the specified <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="id">Id of the conversation for which to get members.</param>
            <param name="query"></param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.ConversationMember"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.GetMessages(System.Int32,Weavy.Core.Models.QueryOptions)">
            <summary>
            Get messages from the specified conversation.
            </summary>
            <param name="id">Id of conversation for which to get messages.</param>
            <param name="opts">Query options for paging, sorting etc.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Message"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.GetUnread(System.Nullable{System.Int32},Weavy.Core.Models.QueryOptions)">
            <summary>
            Get conversations with unread messages for the specified user.
            </summary>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> for which to get unread conversations, <c>null</c> to get conversations for the current user.</param>   
            <param name="opts">Query options for paging, sorting etc.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Conversation"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.Insert(Weavy.Core.Models.Conversation,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Conversation"/> object into the repository.
            </summary>
            <param name="conversation"><see cref="T:Weavy.Core.Models.Conversation"/> to insert.</param>
            <param name="users">Id of users that should be part of the conversation.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Conversation"/></returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.RemoveMember(System.Int32,System.Nullable{System.Int32},System.Boolean)">
            <summary>
              Removes a <see cref="T:Weavy.Core.Models.User"/> from the specified <see cref="T:Weavy.Core.Models.Conversation"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/> to leave.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that leaves the conversation, <c>null</c> for the current user.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.Search(Weavy.Core.Models.ConversationQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.ConversationQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.ConversationQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Conversation"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.Update(Weavy.Core.Models.Conversation,System.Boolean)">
            <summary>
              Updates a <see cref="T:Weavy.Core.Models.Conversation"/> object in the repository.
            </summary>
            <param name="conversation"><see cref="T:Weavy.Core.Models.Conversation"/> object to update.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The updated conversation</returns>
        </member>
        <member name="M:Weavy.Core.Services.ConversationService.SetPinned(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Unpin the specified conversation.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Conversation"/> to unpin.</param>
            <param name="pinnedAt">Time when conversation was pinned, or <c>null</c> tu unpin conversation.</param>
            <param name="userId">Id of the <see cref="T:Weavy.Core.Models.User"/> that unpinned, default is <c>null</c> which indicates the current user.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
        </member>
        <member name="T:Weavy.Core.Services.SpaceService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.Space"/> objects.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.SpaceService.SystemId">
            <summary>
            The id of the System space.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.SpaceService.ConversationsId">
            <summary>
            The id of the Conversations space.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.CountSpaces">
            <summary>
              Gets the number of spaces.
            </summary>
            <returns>Returns the number of spaces.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.Archive(System.Int32,System.Boolean)">
            <summary>
              Archives a <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="id">Id of space.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The archived space.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.Unarchive(System.Int32,System.Boolean)">
            <summary>
              Restores a <see cref="T:Weavy.Core.Models.Space"/> from the archive.
            </summary>
            <param name="id">Id of space.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The restored space.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.AddMember(System.Int32,System.Int32,Weavy.Core.Models.Access,System.Boolean)">
            <summary>
              Add (or update) a member to the specified <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Space"/>.</param>
            <param name="userId">Id of user to add.</param>
            <param name="access">The access rights to set for the user.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The space <see cref="T:Weavy.Core.Models.Member"/>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.Delete(System.Int32,System.Boolean)">
            <summary>
              Permanently deletes a <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="id">Id of space.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <remarks>
              This will delete the space and can cause a cascading effect where multiple objects will be deleted.
            </remarks>
            <returns>The deleted space.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.Restore(System.Int32,System.Boolean)">
            <summary>
              Restored a <see cref="T:Weavy.Core.Models.Space"/> from the trash.
            </summary>
            <param name="id">Id of space.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <remarks>
              This will restore the space and can cause a cascading effect where multiple objects will be restored.
            </remarks>
            <returns>The restored space.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.Trash(System.Int32,System.Boolean)">
            <summary>
              Moves a <see cref="T:Weavy.Core.Models.Space"/> to the trash.
            </summary>
            <param name="id">Id of space.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <remarks>
              This will trash the space and can cause a cascading effect where multiple objects will be trashed.
            </remarks>
            <returns>The trashed space.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Space"/> object from the repository.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Space"/>.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return space even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Space"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.GetByKey(System.String,System.Boolean,System.Boolean)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Space"/> object from the repository.
            </summary>
            <param name="key">Unique key of <see cref="T:Weavy.Core.Models.Space"/> to get.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return space even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Space"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.GetByTeamname(System.String,System.Boolean,System.Boolean)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.Space"/> object from the repository.
            </summary>
            <param name="teamname">Teamname used for @mentions.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return space even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.Space"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.GetVisited(System.Int32)">
            <summary>
              Gets recently visited spaces for the current user.
            </summary>
            <param name="count">The maximum number of spaces to get.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.Space"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.GetMembers(System.Int32,Weavy.Core.Models.MemberQuery)">
            <summary>
              Get the members in the specified <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Space"/> for which to get members.</param>
            <param name="query">A <see cref="T:Weavy.Core.Models.MemberQuery"/> for filtering the members to return.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Member"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.Insert(Weavy.Core.Models.Space)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.Space"/> object into the repository.
            </summary>
            <param name="space"><see cref="T:Weavy.Core.Models.Space"/> to insert.</param>
            <returns>The inserted <see cref="T:Weavy.Core.Models.Space"/></returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.RemoveMember(System.Int32,System.Int32,System.Boolean)">
            <summary>
              Removes a <see cref="T:Weavy.Core.Models.Member"/> from the specified <see cref="T:Weavy.Core.Models.Space"/>.
            </summary>
            <param name="id">Id of the <see cref="T:Weavy.Core.Models.Space"/>.</param>
            <param name="userId">User Id of <see cref="T:Weavy.Core.Models.Member"/> to remove.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The removed member.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.Search(Weavy.Core.Models.SpaceQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.SpaceQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.SpaceQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.Space"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Services.SpaceService.Update(Weavy.Core.Models.Space,System.Boolean)">
            <summary>
              Updates a <see cref="T:Weavy.Core.Models.Space"/> object in the repository.
            </summary>
            <param name="space"><see cref="T:Weavy.Core.Models.Space"/> object to update.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The updated space</returns>
        </member>
        <member name="T:Weavy.Core.Services.UserService">
            <summary>
              Service layer for <see cref="T:Weavy.Core.Models.User"/> and <see cref="T:Weavy.Core.Models.Role"/> objects.
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.UserService.AnonymousId">
            <summary>
            The Id of the Anonymous user (-1).
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.UserService.SystemId">
            <summary>
            The Id of the System user (-2).
            </summary>
        </member>
        <member name="F:Weavy.Core.Services.UserService.Anonymous">
            <summary>
              Gets the Anonymous user.
            </summary>
        </member>
        <member name="M:Weavy.Core.Services.UserService.AreCollaborators(System.Int32,System.Int32)">
            <summary>
              Checks if two users can collaborate, i.e. if they are members of the same directory or if they share at least one space or conversation.
            </summary>
            <param name="userId1"></param>
            <param name="userId2"></param>
            <returns>Returns a <c>true</c> if they can collaborate, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.ChangePassword(System.Int32,System.String,System.String)">
            <summary>
            Updates the password for the <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
            <param name="id">Id of the user that want to change password.</param>
            <param name="oldPassword">The current password.</param>
            <param name="newPassword">The new password.</param>
            <returns><c>true</c> if the update was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.SetIdentity(Weavy.Core.Models.User,System.Boolean,System.String)">
            <summary>
            Attach an <see cref="T:System.Security.Claims.ClaimsIdentity"/> to the specified <see cref="T:Weavy.Core.Models.User"/>.
            </summary>
            <param name="user">The user for which to create and attach a <see cref="T:System.Security.Claims.ClaimsIdentity"/> object.</param>
            <param name="authenticated"><c>true</c> to attach an authenticated identity, otherwise <c>false</c>.</param>
            <param name="authenticationType"></param>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GeneratePassword(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates a random password.
            </summary>
            <param name="requiredLength">The minimum required length of the generated password.</param>
            <param name="requireDigit"><c>true</c> to require a digit in the generated password, otherwise <c>false</c></param>
            <param name="requireLower"><c>true</c> to require a lowercase letter in the generated password, otherwise <c>false</c></param>
            <param name="requireUpper"><c>true</c> to require an uppercase letter in the generated password, otherwise <c>false</c></param>
            <param name="requireSpecial"><c>true</c> to require a non digit or letter in the generated password, otherwise <c>false</c></param>
            <returns>A random password string.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetId(System.String)">
            <summary>
              Gets the Id of the <see cref="T:Weavy.Core.Models.User"/> with the specified username.
            </summary>
            <param name="username">Username of the <see cref="T:Weavy.Core.Models.User"/>.</param>
            <returns>Return an int, or <c>null</c> if no <see cref="T:Weavy.Core.Models.User"/> item has the specified username.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetLastSeen(System.Int32)">
            <summary>
              Gets a <see cref="T:System.DateTime"/> object indicating when the specified <see cref="T:Weavy.Core.Models.User"/> was last seen.
            </summary>
            <param name="id">Id of the user .</param>
            <returns>A <see cref="T:System.DateTime"/> object, or <c>null</c> if the user has never signed in.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetPresence(System.Int32)">
            <summary>
            Return the current presence of a user.
            </summary>
            <param name="id">Id of the user for which to get presence.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.ResetPassword(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Resets a user's password. 
            </summary>
            <param name="id">Id of the user for which to reset password.</param>
            <param name="token">The password verification token.</param>
            <param name="newPassword">The new password.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The new password for the <see cref="T:Weavy.Core.Models.User"/></returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.SetPassword(System.Int32,System.String,System.Boolean)">
            <summary>
            Set a new password for the specified user. 
            </summary>
            <param name="id">Id of the user for which to set password.</param>
            <param name="password">The new password.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Trash(System.Int32,System.Boolean)">
            <summary>
              Trash a <see cref="T:Weavy.Core.Models.User"/>, i.e. sets the IsTrashed flag.
            </summary>
            <param name="id">Id (unique identifier).</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The trashed user.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Restore(System.Int32,System.Boolean)">
            <summary>
              Restores a trashed <see cref="T:Weavy.Core.Models.User"/>, i.e. clears the IsTrashed flag.
            </summary>
            <param name="id">Id of user ro restore.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The restored user.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Delete(System.Int32,System.Boolean)">
            <summary>
            Permanently deletes the <see cref="T:Weavy.Core.Models.User"/> from the repository.
            </summary>
            <param name="id">The id of the <see cref="T:Weavy.Core.Models.User"/> to delete.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The deleted <see cref="T:Weavy.Core.Models.User"/> or null if the operation failed.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Get(System.Int32,System.Boolean,System.Boolean)">
            <summary>
              Gets a <see cref="T:Weavy.Core.Models.User"/> object from the repository.
            </summary>
            <param name="id">If of user to get.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return user even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Get(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
              Gets a list of <see cref="T:Weavy.Core.Models.User"/> objects from the repository.
            </summary>
            <param name="ids">Ids of the users to get.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to include trashed users, otherwise <c>false</c>.</param>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.User"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetOnline(Weavy.Core.Models.QueryOptions)">
            <summary>
              Gets a list of online users.
            </summary>
            <returns>Returns a list of <see cref="T:Weavy.Core.Models.User"/> objects.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.CountEnabledUsers">
            <summary>
              Gets the number of enabled users.
            </summary>
            <returns>Returns the number of enable users.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.CountWindowsUsers">
            <summary>
              Gets the number of enabled users with a windows login.
            </summary>
            <returns>Returns the number of users with a windows login.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.CountNonWindowsUsers">
            <summary>
              Gets the number of enabled users without a windows login.
            </summary>
            <returns>Returns the number of users without windows login.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Get(System.String,System.Boolean,System.Boolean)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> with the specified username.
            </summary>
            <param name="username">The username of the user.</param>       
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return user even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Get(System.String,System.String)">
            <summary>
               Gets the <see cref="T:Weavy.Core.Models.User"/> with the specified username/email and password.
            </summary>
            <param name="username">The username or email of the <see cref="T:Weavy.Core.Models.User"/>. Not case sensitive.</param>
            <param name="password">The password for the <see cref="T:Weavy.Core.Models.User"/>. This is case sensitive.</param>        
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetClient(System.String,System.Boolean,System.Boolean)">
            <summary>
            Get user by clientId.
            </summary>
            <param name="id">The client id of the user.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return client even if trashed, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetClient(System.String,System.String)">
            <summary>
            Gets the <see cref="T:Weavy.Core.Models.User"/> with the specified username/email and password.
            </summary>
            <param name="id">The client id of the user.</param>
            <param name="secret">The password for the <see cref="T:Weavy.Core.Models.User"/>. This is case sensitive.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetClients(Weavy.Core.Models.UserQuery)">
            <summary>
            Gets all clients (i.e. users with ClientId and ClientSecret properties).
            </summary>
            <param name="query">The query that compliments the search.</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.MakeUniqueUsername(System.String[])">
            <summary>
            Helper method for getting a unique username among users and spaces.
            </summary>
            <param name="input">A list of strings that can be used as input when generating unique names, e.g "nickname", "Name", "Firstname Lastname", "Lastname, Firstname", "name@example.com", "firstname.lastname@example.com"</param>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetByEmail(System.String,System.Boolean,System.Boolean)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> with the specified email address.
            </summary>
            <param name="email">The email of the user.</param>       
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return user even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetByGuid(System.Guid,System.Boolean,System.Boolean)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> with the specified guid.
            </summary>
            <param name="guid">The guid of the user.</param>       
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return user even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetBySub(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:Weavy.Core.Models.User"/> with the specified iss and sub claims.
            </summary>
            <param name="iss">The "iss" claim from JWT.</param>
            <param name="sub">The "sub" claim JWT.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return user even if trashed, otherwise <c>false</c>.</param>
            <returns>A <see cref="T:Weavy.Core.Models.User"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetByToken(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
              Gets the <see cref="T:Weavy.Core.Models.User"/> with the specified token.
            </summary>
            <param name="token">The token.</param>       
            <param name="verify"><c>true</c> to verify that the token is still valid, otherwise <c>false</c>.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <param name="trashed"><c>true</c> to return user even if trashed, otherwise <c>false</c>.</param>
            <returns>Returns an instance of the <see cref="T:Weavy.Core.Models.User"/> class.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetFollowers(Weavy.Core.Models.IEntity,Weavy.Core.Models.QueryOptions)">
            <summary>
            Get users that follow the specified entity.
            </summary>
            <param name="entity">The <see cref="T:Weavy.Core.Models.IEntity"/> for which to get followers.</param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetFollowing(Weavy.Core.Models.User,Weavy.Core.Models.Query)">
            <summary>
              Get users that the specified user is following.
            </summary>
            <param name="user">Get users that this <see cref="T:Weavy.Core.Models.User"/> is following, <c>null</c> to use the current user.</param>    
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetLikers(Weavy.Core.Models.IEntity,Weavy.Core.Models.QueryOptions)">
            <summary>
            Get users that likes the specified entity.
            </summary>
            <param name="entity"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetMentioned(Weavy.Core.Models.IEntity,Weavy.Core.Models.QueryOptions)">
            <summary>
            Gets users that is @mentioned in the specified entity.
            </summary>
            <param name="entity"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetStarrers(Weavy.Core.Models.IEntity,Weavy.Core.Models.QueryOptions)">
            <summary>
            Gets users that have starred the specified entity.
            </summary>
            <param name="entity"></param>
            <param name="opts"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Insert(Weavy.Core.Models.User,System.String,System.Boolean)">
            <summary>
              Inserts a <see cref="T:Weavy.Core.Models.User"/> into the repository.
            </summary>
            <param name="user"><see cref="T:Weavy.Core.Models.User"/> to insert.</param>
            <param name="password">The password to set for the user or <c>null</c> if the <see cref="T:Weavy.Core.Models.User"/> should not be able to login.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The inserted user.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Update(Weavy.Core.Models.User,System.Boolean)">
            <summary>
              Updates an existing <see cref="T:Weavy.Core.Models.User"/> in the datasource.
            </summary>
            <param name="user"><see cref="T:Weavy.Core.Models.User"/> object to update.</param>
            <param name="sudo"><c>true</c> to perform action as super user, otherwise <c>false</c>.</param>
            <returns>The updated <see cref="T:Weavy.Core.Models.User"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.Search(Weavy.Core.Models.UserQuery)">
            <summary>
              Performs a search according to the specified <see cref="T:Weavy.Core.Models.UserQuery"/> object.
            </summary>
            <param name="query">A <see cref="T:Weavy.Core.Models.UserQuery"/> object containing the search criteria.</param>
            <returns>Returns a paged list of <see cref="T:Weavy.Core.Models.User"/> items.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.UpsertUserFromIdentity(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get (or create) a user and login from specified identity. Used when signing in with external authentication methods such as Azure AD, Google Auth, JWT etc.
            </summary>
            <param name="identity">An externally authenticated identity with claims identifying the user.</param>
            <returns>A <see cref="T:Weavy.Core.Models.User"/> object.</returns>
        </member>
        <member name="M:Weavy.Core.Services.UserService.GetUserFromIdentity(System.Security.Claims.ClaimsIdentity)">
            <summary>
            Get a user from specified identity.
            </summary>
            <param name="identity">An externally authenticated identity with claims identifying the user.</param>
            <returns>A <see cref="T:Weavy.Core.Models.User"/> object.</returns>
        </member>
        <member name="T:Weavy.Core.Hubs.RealTimeHub">
            <summary>
            Connect to the RealTimeHub (via WebSockets) to receieve events from Weavy in real time. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Hubs.RealTimeHub.OnConnected">
            <summary>
            Record the association between the current user and connection id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Hubs.RealTimeHub.OnReconnected">
            <summary>
            Re-associate user and connection id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Hubs.RealTimeHub.OnDisconnected(System.Boolean)">
            <summary>
            Delete the association between the current connection id and user.
            </summary>
            <param name="stopCalled"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Hubs.RealTimeHub.SetActive">
            <summary>
            Called by clients to mark connection as active.
            </summary>
        </member>
        <member name="T:Weavy.Core.Hubs.UserIdProvider">
            <summary>
            Custom user id provider.
            </summary>
        </member>
        <member name="M:Weavy.Core.Hubs.UserIdProvider.GetUserId(Microsoft.AspNet.SignalR.IRequest)">
            <summary>
            Returns Id of current user (instead of IPrincipal.Identity.Name).
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.HtmlRenderer.BrushAdapter">
            <summary>
            Adapter for System.Drawing brushes objects for core.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.BrushAdapter._brush">
            <summary>
            The actual System.Drawing brush instance.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.BrushAdapter._dispose">
            <summary>
            If to dispose the brush when <see cref="M:Weavy.Core.HtmlRenderer.BrushAdapter.Dispose"/> is called.<br/>
            Ignore dispose for cached brushes.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.BrushAdapter.#ctor(System.Drawing.Brush,System.Boolean)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="P:Weavy.Core.HtmlRenderer.BrushAdapter.Brush">
            <summary>
            The actual System.Drawing brush instance.
            </summary>
        </member>
        <member name="T:Weavy.Core.HtmlRenderer.FontAdapter">
            <summary>
            Adapter for System.Drawing Font object for core.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.FontAdapter._font">
            <summary>
            the underline System.Drawing font.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.FontAdapter._hFont">
            <summary>
            a handle to this Font.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.FontAdapter._underlineOffset">
            <summary>
            the vertical offset of the font underline location from the top of the font.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.FontAdapter._height">
            <summary>
            Cached font height.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.FontAdapter._whitespaceWidth">
            <summary>
            Cached font whitespace width.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.FontAdapter.#ctor(System.Drawing.Font)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="P:Weavy.Core.HtmlRenderer.FontAdapter.Font">
            <summary>
            the underline win-forms font.
            </summary>
        </member>
        <member name="P:Weavy.Core.HtmlRenderer.FontAdapter.HFont">
            <summary>
            Get the handle to this Font.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.FontAdapter.SetMetrics(System.Int32,System.Int32)">
            <summary>
            Set font metrics to be cached for the font for future use.
            </summary>
            <param name="height">the full height of the font</param>
            <param name="underlineOffset">the vertical offset of the font underline location from the top of the font.</param>
        </member>
        <member name="T:Weavy.Core.HtmlRenderer.FontFamilyAdapter">
            <summary>
            Adapter for System.Drawing Font family object for core.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.FontFamilyAdapter._fontFamily">
            <summary>
            the underline System.Drawing font.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.FontFamilyAdapter.#ctor(System.Drawing.FontFamily)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="P:Weavy.Core.HtmlRenderer.FontFamilyAdapter.FontFamily">
            <summary>
            the underline System.Drawing font family.
            </summary>
        </member>
        <member name="T:Weavy.Core.HtmlRenderer.GraphicsAdapter">
            <summary>
            Adapter for System.Drawing Graphics for core.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsAdapter._charFit">
            <summary>
            used for <see cref="M:Weavy.Core.HtmlRenderer.GraphicsAdapter.MeasureString(System.String,TheArtOfDev.HtmlRenderer.Adapters.RFont,System.Double,System.Int32@,System.Double@)"/> calculation.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsAdapter._charFitWidth">
            <summary>
            used for <see cref="M:Weavy.Core.HtmlRenderer.GraphicsAdapter.MeasureString(System.String,TheArtOfDev.HtmlRenderer.Adapters.RFont,System.Double,System.Int32@,System.Double@)"/> calculation.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsAdapter._characterRanges">
            <summary>
            Used for GDI+ measure string.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsAdapter._stringFormat">
            <summary>
            The string format to use for measuring strings for GDI+ text rendering
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsAdapter._stringFormat2">
            <summary>
            The string format to use for rendering strings for GDI+ text rendering
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsAdapter._g">
            <summary>
            The wrapped graphics object
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsAdapter._releaseGraphics">
            <summary>
            if to release the graphics object on dispose
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsAdapter._setRtl">
            <summary>
            If text alignment was set to RTL
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.GraphicsAdapter.#cctor">
            <summary>
            Init static resources.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.GraphicsAdapter.#ctor(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Init.
            </summary>
            <param name="g">the win forms graphics object to use</param>
            <param name="releaseGraphics">optional: if to release the graphics object on dispose (default - false)</param>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.GraphicsAdapter.SetRtlAlignGdiPlus(System.Boolean)">
            <summary>
            Change text align to Left-to-Right or Right-to-Left if required.
            </summary>
        </member>
        <member name="T:Weavy.Core.HtmlRenderer.GraphicsPathAdapter">
            <summary>
            Adapter for System.Drawing graphics path object for core.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsPathAdapter._graphicsPath">
            <summary>
            The actual System.Drawing graphics path instance.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.GraphicsPathAdapter._lastPoint">
            <summary>
            the last point added to the path to begin next segment from
            </summary>
        </member>
        <member name="P:Weavy.Core.HtmlRenderer.GraphicsPathAdapter.GraphicsPath">
            <summary>
            The actual System.Drawing graphics path instance.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.GraphicsPathAdapter.GetStartAngle(TheArtOfDev.HtmlRenderer.Adapters.RGraphicsPath.Corner)">
            <summary>
            Get arc start angle for the given corner.
            </summary>
        </member>
        <member name="T:Weavy.Core.HtmlRenderer.ImageAdapter">
            <summary>
            Adapter for System.Drawing Image object for core.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.ImageAdapter._image">
            <summary>
            the underline System.Drawing image.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.ImageAdapter.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Weavy.Core.HtmlRenderer.ImageAdapter.Image">
            <summary>
            the underline win-forms image.
            </summary>
        </member>
        <member name="T:Weavy.Core.HtmlRenderer.PenAdapter">
            <summary>
            Adapter for System.Drawing pens objects for core.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.PenAdapter._pen">
            <summary>
            The actual System.Drawing brush instance.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.PenAdapter.#ctor(System.Drawing.Pen)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="P:Weavy.Core.HtmlRenderer.PenAdapter.Pen">
            <summary>
            The actual System.Drawing brush instance.
            </summary>
        </member>
        <member name="T:Weavy.Core.HtmlRenderer.WebAdapter">
            <summary>
            Adapter for web use.
            </summary>
        </member>
        <member name="F:Weavy.Core.HtmlRenderer.WebAdapter._instance">
            <summary>
            Singleton instance of global adapter.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.WebAdapter.#ctor">
            <summary>
            Init installed font families and set default font families mapping.
            </summary>
        </member>
        <member name="P:Weavy.Core.HtmlRenderer.WebAdapter.Instance">
            <summary>
            Singleton instance of global adapter.
            </summary>
        </member>
        <member name="T:Weavy.Core.HtmlRenderer.Converter">
            <summary>
            Utilities for converting System.Drawing entities to HtmlRenderer core entities.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.Convert(System.Drawing.PointF)">
            <summary>
            Convert from WinForms point to core point.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.Convert(TheArtOfDev.HtmlRenderer.Adapters.Entities.RPoint[])">
            <summary>
            Convert from System.Drawing point to core point.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.Convert(TheArtOfDev.HtmlRenderer.Adapters.Entities.RPoint)">
            <summary>
            Convert from core point to System.Drawing point.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.ConvertRound(TheArtOfDev.HtmlRenderer.Adapters.Entities.RPoint)">
            <summary>
            Convert from core point to System.Drawing point.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.Convert(System.Drawing.SizeF)">
            <summary>
            Convert from System.Drawing size to core size.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.Convert(TheArtOfDev.HtmlRenderer.Adapters.Entities.RSize)">
            <summary>
            Convert from core size to System.Drawing size.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.ConvertRound(TheArtOfDev.HtmlRenderer.Adapters.Entities.RSize)">
            <summary>
            Convert from core size to System.Drawing size.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.Convert(System.Drawing.RectangleF)">
            <summary>
            Convert from System.Drawing rectangle to core rectangle.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.Convert(TheArtOfDev.HtmlRenderer.Adapters.Entities.RRect)">
            <summary>
            Convert from core rectangle to System.Drawing rectangle.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.ConvertRound(TheArtOfDev.HtmlRenderer.Adapters.Entities.RRect)">
            <summary>
            Convert from core rectangle to System.Drawing rectangle.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.Convert(System.Drawing.Color)">
            <summary>
            Convert from System.Drawing color to core color.
            </summary>
        </member>
        <member name="M:Weavy.Core.HtmlRenderer.Converter.Convert(TheArtOfDev.HtmlRenderer.Adapters.Entities.RColor)">
            <summary>
            Convert from core color to System.Drawing color.
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.BoxMath">
            <summary>
            Provides simple layout math.
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.BoxMath.ScaleInside(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Scales 'inner' to fit inside 'bounding' while maintaining aspect ratio. Upscales and downscales.
            </summary>
            <param name="inner"></param>
            <param name="bounding"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Imaging.BoxMath.FitsInside(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Returns true if 'inner' fits inside or equals 'outer'
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Imaging.BoxMath.ToRectangle(System.Drawing.RectangleF)">
            <summary>
            Rounds a floating-point rectangle to an integer rectangle using System.Round
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Imaging.BoxMath.RoundPoints(System.Drawing.SizeF)">
            <summary>
            Rounds a SizeF structure using System.Round
            </summary>
            <param name="sizeF"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Imaging.BoxMath.CenterInside(System.Drawing.SizeF,System.Drawing.RectangleF)">
            <summary>
            Creates a rectangle of size 'size' with a center matching that of bounds. No rounding is performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Imaging.BoxMath.AlignWith(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.ContentAlignment)">
            <summary>
            Aligns the specified <see cref="T:System.Drawing.RectangleF"/> with a container <see cref="T:System.Drawing.RectangleF"/> using the specified <see cref="T:System.Drawing.ContentAlignment"/>. 
            The <paramref name="container"/> can be smaller than <paramref name="rect"/>.
            </summary>
            <param name="rect"></param>
            <param name="container"></param>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Imaging.Encoding">
            <summary>
            Provides quantized .gif encoding, adjustable .jpg encoding and 32-bit .png encoding methods
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.Encoding.SaveImg(System.Drawing.Image,System.IO.FileInfo)">
            <summary>
            Saves an image to the specified output file
            </summary>
            <param name="img"></param>
            <param name="output"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Encoding.SaveGif(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Saves the image in gif form using an OctreeQuantizer.
            </summary>
            <param name="img"></param>
            <param name="target"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Encoding.SavePng(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Saves the image in png form. If Stream 'target' is not seekable, a temporary MemoryStream will be used to buffer the image data into the stream
            </summary>
            <param name="img"></param>
            <param name="target"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Encoding.SaveJpeg(System.Drawing.Image,System.IO.Stream,System.Int32)">
            <summary>
            Saves the specified image to the specified stream using jpeg compression of the specified quality.
            </summary>
            <param name="img"></param>
            <param name="quality">A number between 0 and 100.</param>
            <param name="target"></param>
        </member>
        <member name="T:Weavy.Core.Imaging.FitMode">
            <summary>
            How to resolve aspect ratio differences between the requested size and the original image's size.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.FitMode.Fit">
            <summary>
            The image is resized to fit in the destination dimensions while it preserves its native aspect ratio.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.FitMode.Pad">
            <summary>
            The image is resized to fill the destination dimensions, padding is used if there is an aspect ratio difference.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.FitMode.Crop">
            <summary>
            The image is resized to fill the destination dimensions, cropping is used if there is an aspect ratio difference.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.FitMode.Stretch">
            <summary>
            The image is resized to fill the destination dimensions., the image is stretched if there is an aspect ratio difference.
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.HslaColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.HslaColor.H">
            <summary>
            Gets the hue component value (0-360°) of this <see cref="T:Weavy.Core.Imaging.HslaColor"/> structure.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.HslaColor.S">
            <summary>
            Gets the saturation component value (0-100%) of this <see cref="T:Weavy.Core.Imaging.HslaColor"/> structure.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.HslaColor.L">
            <summary>
            Gets or sets the lightness component value (0-100%) of this <see cref="T:Weavy.Core.Imaging.HslaColor"/> structure.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.HslaColor.A">
            <summary>
            Gets the alpha component value (0-1) of this <see cref="T:Weavy.Core.Imaging.HslaColor"/> structure.
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.HslaColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.HslaColor.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
            <param name="a"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.HslaColor.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.Imaging.JobOptions">
            <summary>
            Allows you to customize how IO is handled
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.JobOptions.LeaveSourceStreamOpen">
            <summary>
            Instructs ResizeJob to leave the source stream open even after it is no longer needed for the job.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.JobOptions.RewindSourceStream">
            <summary>
            The source stream will be rewound to its original position after it is used. (Useful for reusing a stream or HttpFileUpload)
            Implies LeaveSourceStreamOpen
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.JobOptions.LeaveTargetStreamOpen">
            <summary>
            Instructs ResizeJob to leave the target stream open after it is finished writing. Make sure you close it externally!
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.JobOptions.PreserveTargetBitmap">
            <summary>
            Instructs ResizeJob to preserve the target bitmap (will cause mem leak unless disposed externally)
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.JobOptions.CreateParentDirectory">
            <summary>
            When a filename is specified, instructs ResizeJob to create any needed parent folder levels
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.JobOptions.BufferEntireSourceStream">
            <summary>
            The source stream will be copied into a memory-based stream so the original stream can be closed earlier. Required if you are writing to the same file you are reading from.
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.OctreeQuantizer">
            <summary>
            Quantize using an Octree
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Reset">
            <summary>
            Clears the octree
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Reset(System.Int32,System.Int32)">
            <summary>
            Clears the octree and reconfigures color settings
            </summary>
            <param name="maxColors"></param>
            <param name="maxColorBits"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.InitialQuantizePixel(Weavy.Core.Imaging.Quantizer.Color32)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="P:Weavy.Core.Imaging.OctreeQuantizer.Dither">
            <summary>
            Uses a Floyd-Steinberg dither
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.DitherMatrix">
            <summary>
            a Floyd-Steinberg dither matrix
            new float[,] {{0,0,0},
            {0,0,0.44f},
            {0.19f,0.31f,0.06f}};
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.QuantizePixel(Weavy.Core.Imaging.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.AddColor(Weavy.Core.Imaging.Quantizer.Color32)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.TrackPrevious(Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.GetPaletteIndex(Weavy.Core.Imaging.Quantizer.Color32)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,Weavy.Core.Imaging.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.AddColor(Weavy.Core.Imaging.Quantizer.Color32,System.Int32,System.Int32,Weavy.Core.Imaging.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="P:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(Weavy.Core.Imaging.Quantizer.Color32,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.FindClosestMatch(Weavy.Core.Imaging.Quantizer.Color32)">
            <summary>
            Added may 19-09. Should help with dithering.
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode.Increment(Weavy.Core.Imaging.Quantizer.Color32)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.OutputFormat">
            <summary>
            Controls the encoding format.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OutputFormat.Gif">
            <summary>
            Outputs the resized image as a .gif image.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OutputFormat.Jpg">
            <summary>
            Outputs the resized image as a .jpg image.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.OutputFormat.Png">
            <summary>
            Outputs the resized image as a .png image.
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.Quantizer">
            <summary>
            Abstract Quantizer class - handles the messy, algorithm-independent details of quantization. 
            Subclasses must implement InitialQuantizePixel, GetPallete(), and QuantizePixel. Not thread-safe!
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Quantizer.FixedPalette">
            <summary>
            (Readonly) If true, the algorithm can do everything in QuantizePixel, and InitialQuantizePixel will not be called. Implies ResizeForFirstPass=False and FourPass=false=
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Quantizer.PixelSize">
            <summary>
            The number of bytes in a ARGB structure. Should be 4
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Quantizer.FullTrust">
            <summary>
            If true, pointer arithmetic will be used instead of GetPixel. GetPixel is much slower. If false, OmitFinalStage will be assumed true, as only palette generation is possible in low trust.
            Defaults to true.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Quantizer.ResizeForFirstPass">
            <summary>
            If true, the first pass (InitialQuantizePixel) will be performed on a size-limited version of the original image to control performance. Ignored if FixedPalette=True
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Quantizer.FirstPassPixelCount">
            <summary>
            The approximate number of pixels to use when making a scaled copy of the image for the first pass. Only used when ResizeForFirstPass=True and FirstPassPixelThreshold is exceeded.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Quantizer.FirstPassPixelThreshold">
            <summary>
            The maximum number of pixels the original image may contain before a scaled copy is made for the first pass. 
            Only relevant when ResizeForFirstPass=True
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Quantizer.FourPass">
            <summary>
            If true, image is re-paletted after quantization - forces 2 clones of the original image to be created. FixedPalette and OmitFinalStage should be false if this is used.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Quantizer.OmitFinalStage">
            <summary>
            If true, a 32-bit image with an 8-bit palette will be returned instead of an 8-bit image, which GDI can save using median-cut quantization. Much faster than our final quantization pass, although it can't do transparency.
            Assumed true if FullTrust is false.
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.Quantizer.#ctor(System.Boolean)">
            <summary>
            Construct the quantizer
            </summary>
            <param name="fixedPalette">If true, the quantization only needs to loop through the source pixels once - InitialQuantiize</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Imaging.Quantizer.Reset">
            <summary>
            Resets the quantizer so it can process a new image. 
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="sourceImage">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Quantizer.AnalyzeImage(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:Weavy.Core.Imaging.Quantizer.QuantizeImage(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap. If dithering is enabled, sourceData will be modified. 
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="intermediate">The intermediate bitmap, used for 4-pass quantization. If specified, output will not actually be modified</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:Weavy.Core.Imaging.Quantizer.AdjustNeighborSource(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Can only be called from QuantizePixel...
            This is how dithering is done... 
            5-18-09 ndj
             </summary>
             <param name="offsetX"></param>
             <param name="offsetY"></param>
             <param name="deltaR"></param>
             <param name="deltaG"></param>
             <param name="deltaB"></param>
             <param name="deltaA"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Quantizer.InitialQuantizePixel(Weavy.Core.Imaging.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:Weavy.Core.Imaging.Quantizer.QuantizePixel(Weavy.Core.Imaging.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="T:Weavy.Core.Imaging.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="F:Weavy.Core.Imaging.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Quantizer.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.Resizer">
            <summary>
            Encapsulates an image resizing operation.
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.Resizer.BitmapConsumer">
            <summary>
            Allows callers to handle the encoding/usage phase.
            </summary>
            <param name="b"></param>
            <param name="options"></param>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Source">
            <summary>
            The source bitmap
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.UnderlyingStream">
            <summary>
            The stream underlying the bitmap  (cannot be disposed before the bitmap)
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.OriginalSize">
            <summary>
            The dimensions of the source image
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.CopyRect">
            <summary>
            The part of the source image to copy
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.TargetRect">
            <summary>
            Where on the target canvas to render the source image
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.DestinationSize">
            <summary>
            The size to create the target image
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Destination">
            <summary>
            The Bitmap object the target image is rendered to before encoding.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.SourcePath">
            <summary>
            Source path, used for simple output format detection based on filename.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Width">
            <summary>
            The width constraint
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Height">
            <summary>
            The height constraint
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Mode">
            <summary>
            The constraint mode, defaults to Fit.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Scaling">
            <summary>
            Should upscaling be permitted? Defaults to downscaling only.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Format">
            <summary>
            The encoding format to use when writing the result to stream.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.JpegQuality">
            <summary>
            The jpeg encoding quality to use (0..100), 90 is the best value and the default. Seriously.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Opacity">
            <summary>
            The opacity value (0..100) to use when when rendering the image, 100 means fully opaque and is the default.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Alignment">
            <summary>
            How to anchor the image when padding or cropping, defaults to MiddleCenter.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.Matte">
            <summary>
            The background color to apply (null for transparency), white will be used if the encoding format is Jpeg and this is unspecified.
            </summary>
        </member>
        <member name="P:Weavy.Core.Imaging.Resizer.IgnoreIccProfile">
            <summary>
            If true, the ICC profile will be ignored instead of being applied.
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.#ctor">
            <summary>
            Creates a resizer with Mode=Fit, Format=Auto, Scaling=Down, JpegQuality=90, Opacity = 100, Alignment = MiddleCenter and IgnoreIccProfile=false.
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.#ctor(System.String)">
            <summary>
            Creates a resizer by parsing the specified options string.
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.IsBitmap(System.String)">
            <summary>
            Returns whether the specified file is a GDI+ Bitmap image.
            </summary>
            <param name="path">The path string to check.</param>
            <returns>Returns <c>true</c>true if the file is a GDI+ Bitmap, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.IsMetaFile(System.String)">
            <summary>
            Returns whether the specified file is a GDI+ Metafile image.
            </summary>
            <param name="path">The path string to check.</param>
            <returns>Returns <c>true</c>true if the file is a GDI+ Metafile, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.CanResize(System.String)">
            <summary>
            Returns whether the specified file is a GDI+ image.
            </summary>
            <param name="path">The path string to check.</param>
            <returns>Returns <c>true</c>true if the file is a supported GDI+ image, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.FromOptions(System.String)">
            <summary>
            Creates an resizer instance from the supplied options string (crop,q90,ff00ff etc.). 
            </summary>
            <param name="options">A string with the options.</param>
            <returns>A <see cref="T:Weavy.Core.Imaging.Resizer"/> object or <c>null</c> if no valid options exist.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.Resize(System.String,System.String,Weavy.Core.Imaging.JobOptions)">
            <summary>
            Resizes from one filename to another.
            </summary>
            <param name="sourcePath"></param>
            <param name="destPath"></param>
            <param name="options"></param>
            <returns>The actual dimensions of the resized image.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.Resize(System.Drawing.Bitmap,System.String,Weavy.Core.Imaging.JobOptions)">
            <summary>
            Reads from bitmap and writes to the given physical path.
            </summary>
            <param name="bitmap"></param>
            <param name="destPath"></param>
            <param name="options"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.Resize(System.IO.Stream,System.String,Weavy.Core.Imaging.JobOptions)">
            <summary>
            Reads from stream and writes to the given physical path.
            </summary>
            <param name="s"></param>
            <param name="destPath"></param>
            <param name="options"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.Resize(System.IO.Stream,System.IO.Stream,Weavy.Core.Imaging.JobOptions)">
            <summary>
            Resizes from one stream to another.
            Warning, ensure that the first stream you open will be safely closed if the second stream fails to open! 
            This means a using() or try/finally clause.
            </summary>
            <param name="s"></param>
            <param name="target"></param>
            <param name="options"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.Resize(System.Drawing.Bitmap,Weavy.Core.Imaging.Resizer.BitmapConsumer,Weavy.Core.Imaging.JobOptions)">
            <summary>
            Loads the bitmap from stream, processes, and renders, sending the result Bitmap to the 'consumer' callback for encoding or usage. 
            </summary>
            <param name="source"></param>
            <param name="consumer"></param>
            <param name="options"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.Resize(System.IO.Stream,Weavy.Core.Imaging.Resizer.BitmapConsumer,Weavy.Core.Imaging.JobOptions)">
            <summary>
            Loads the bitmap from stream, processes, and renders, sending the result Bitmap to the 'consumer' callback for encoding or usage. 
            </summary>
            <param name="s"></param>
            <param name="consumer"></param>
            <param name="options"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.Layout">
            <summary>
            Layout: size and cropping constraints are calculated here
            </summary>
            <returns>The size (width x height) of the destination image.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.Render">
            <summary>
            All rendering occurs here; see layout for the math part of things. Neither 'Dest' nor 'Source' are disposed here!
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.Encode(System.IO.Stream)">
            <summary>
            Destination is encoded. 
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.FixOrientation">
            <summary>
            Rotates, flips, or rotates and flips the image according to the exif orientation property.
            </summary>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.GetOptionsString">
            <summary>
            Gets a string describing the options of this <see cref="T:Weavy.Core.Imaging.Resizer"/>, e.g. "32" or "640x480-crop,q50" etc.
            </summary>
            <returns>A <see cref="T:System.String"/>, or <c>null</c> if the image will not be resized.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.GetSvgOptionsString">
            <summary>
            Gets a string describing the options of this <see cref="T:Weavy.Core.Imaging.Resizer"/>, e.g. "32" or "640x480-crop,q50" etc.
            </summary>
            <returns>A <see cref="T:System.String"/>, or <c>null</c> if the image will not be resized.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.GetResizedDimensions(System.Drawing.Size,System.Nullable{System.Int32},System.Nullable{System.Int32},Weavy.Core.Imaging.FitMode,Weavy.Core.Imaging.ScaleMode)">
            <summary>
            Returns the dimensions that resizing an image (with dimensions <paramref name="originalSize"/>) will get when resizing with the specified options.
            </summary>
            <param name="originalSize"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="fit"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.GetFormat(System.String)">
            <summary>
            Gets the thumbnail format for a file with the specified extension.
            </summary>
            <param name="extension">File extension, e.g. .png</param>
            <returns>The thumbnail image format.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.GetExtension(Weavy.Core.Imaging.OutputFormat)">
            <summary>
            Gets the file extension for the specified output format.
            </summary>
            <param name="format">The format for which to get file extension</param>
            <returns>The file extension.</returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.CopyToMemoryStream(System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Copies the current stream into a new MemoryStream instance.
            </summary>
            <param name="s"></param>
            <param name="entireStream">True to copy entire stream if seeakable, false to only copy remaining data</param>
            <param name="chunkSize">The buffer size to use (in bytes) if a buffer is required. Default: 4KiB</param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.Imaging.Resizer.CopyToStream(System.IO.Stream,System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Copies this stream into the given stream
            </summary>
            <param name="src"></param>
            <param name="dest">The stream to write to</param>
            <param name="entireStream">True to copy entire stream if seeakable, false to only copy remaining data</param>
            <param name="chunkSize">True to copy entire stream if seeakable, false to only copy remaining data</param>
        </member>
        <member name="T:Weavy.Core.Imaging.ScaleMode">
            <summary>
            Controls whether the image is allowed to upscale, downscale, both, or if only the canvas gets to be upscaled.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ScaleMode.Down">
            <summary>
            The default. Only downsamples images - never enlarges. If an image is smaller than 'width' and 'height', the image coordinates are used instead.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ScaleMode.Both">
            <summary>
            Upscales and downscales images according to 'width' and 'height'.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ScaleMode.Canvas">
            <summary>
            When the image is smaller than the requested size, padding is added instead of stretching the image
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.ColorName">
            <summary>
            Enum for color names.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.DeepOrange">
            <summary>
            Deep orange
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Orange">
            <summary>
            Orange
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Amber">
            <summary>
            Amber
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Yellow">
            <summary>
            Yellow
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Lime">
            <summary>
            Lime
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.LightGreen">
            <summary>
            Light green
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Green">
            <summary>
            Green
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Teal">
            <summary>
            Teal
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Cyan">
            <summary>
            Cyan
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.LightBlue">
            <summary>
            LightBlue
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Blue">
            <summary>
            Blue
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Indigo">
            <summary>
            Indigo
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.DeepPurple">
            <summary>
            Deep purple
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Purple">
            <summary>
            Purple
            </summary>
        </member>
        <member name="F:Weavy.Core.Imaging.ColorName.Pink">
            <summary>
            Pink
            </summary>
        </member>
        <member name="T:Weavy.Core.Imaging.Shade">
            <summary>
            Enum for color tones.
            </summary>
            <remarks>.
            Calculated using Cubic Spline http://www.akiti.ca/CubicSpline.html using known data 0=9, 50=55, 100=99 from 8 equal pieces 0 to 100 (each 12.5%)
            This means black (0%) should be 9% (#171717) and white (100%) should be 99% (#fcfcfc).
            One extra dark 1/4 piece more than black (0% + 12.5%/4 = 3.125%) for panels and texts etc.
            One extra light 1/4 piece less than white (100% - 12.5%/4 = 96.875%) for panels and texts etc.
            </remarks>
        </member>
        <member name="T:Weavy.Core.WeavyContext">
            <summary>
              Encapsulates thread specific data used by Weavy.
            </summary>
        </member>
        <member name="M:Weavy.Core.WeavyContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.WeavyContext"/> class. Prevents a default instance of the <see cref="T:Weavy.Core.WeavyContext"/> class from being created.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.Current">
            <summary>
            Gets the <see cref="T:Weavy.Core.WeavyContext"/> object for the current request/thread.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.ApplicationDirectory">
            <summary>
            Gets the root directory of the application, e.g. "C:\inetpub\weavy\".
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.ApplicationPath">
            <summary>
            Gets the application's virtual application root path on the server, e.g. "/" or "/vdir/".
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.ApplicationUrl">
            <summary>
            Gets the absolute url to the application, e.g. "http://weavy.example.com:8080/vdir/".
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.Badge">
            <summary>
            Get number of unread notifications.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.Browser">
            <summary>
            Gets info about the browser associated with the current request.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.IsEmbedded">
            <summary>
            Gets a value indicating whether the request is for an embedded action/view.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.Theme">
            <summary>
              Gets the current theme settings.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.Uri">
            <summary>
            Gets the absolute Uri to the application, e.g. http://weavy.example.com or https://www.example.com/weavy.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.User">
            <summary>
            Gets or sets the <see cref="P:Weavy.Core.WeavyContext.User"/> associated with the current request/thread. 
            When actions/methods require certain permissions, they are always evaluated against this user.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.App">
            <summary>
            Gets the <see cref="P:Weavy.Core.WeavyContext.App"/> associated with the current request.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.Content">
            <summary>
            Gets the <see cref="P:Weavy.Core.WeavyContext.Content"/> associated with the current request.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.Space">
            <summary>
            Gets the <see cref="P:Weavy.Core.WeavyContext.Space"/> associated with the current request.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.TimeZone">
            <summary>
            Gets the time zone to use when formatting dates and times.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.System">
            <summary>
              Gets the System space.
            </summary>
        </member>
        <member name="P:Weavy.Core.WeavyContext.License">
            <summary>
              Gets the currently configured license.
            </summary>
        </member>
        <member name="M:Weavy.Core.WeavyContext.Copy(System.Boolean)">
            <summary>
            Creates a copy of the current context.
            </summary>
            <param name="user"><c>true</c> to also copy the User, otherwise <c>false</c>.</param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.TwitterText.Autolink">
            <summary>
            A class for adding HTML links to hashtag, username and list references in Tweet text.
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Autolink._extractor">
            <summary>
            The Extractor used to extract entities from text.
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Autolink.DEFAULT_USERNAME_CLASS">
            <summary>
            Default CSS class for auto-linked username URLs
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Autolink.DEFAULT_HASHTAG_CLASS">
            <summary>
            Default CSS class for auto-linked hashtag URLs
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Autolink.DEFAULT_CASHTAG_CLASS">
            <summary>
            Default CSS class for auto-linked cashtag URLs
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Autolink.DEFAULT_USERNAME_URL_BASE">
            <summary>
            Default href for username links (the username without the @ will be appended)
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Autolink.DEFAULT_LIST_URL_BASE">
            <summary>
            Default href for list links (the username/list without the @ will be appended)
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Autolink.DEFAULT_HASHTAG_URL_BASE">
            <summary>
            Default href for hashtag links (the hashtag without the # will be appended)
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Autolink.DEFAULT_CASHTAG_URL_BASE">
            <summary>
            Default href for cashtag links (the cashtag without the $ will be appended)
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Autolink.DEFAULT_INVISIBLE_TAG_ATTRS">
            <summary>
            Default attribute for invisible span tag
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.UrlClass">
            <summary>
            Gets or set the CSS class for auto-linked URLs.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.UsernameClass">
            <summary>
            Gets or set the CSS class for auto-linked username URLs.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.HashtagClass">
            <summary>
            Gets or sets the CSS class for auto-linked hashtag URLs.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.CashtagClass">
            <summary>
            Gets or sets the CSS class for auto-linked cashtag URLs,
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.UsernameUrlBase">
            <summary>
            Gets or sets the href value for username links (to which the username will be appended).
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.ListUrlBase">
            <summary>
            Gets or sets the href value for list links (to which the username/list will be appended).
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.HashtagUrlBase">
            <summary>
            Gets or sets the href value for hashtag links (to which the hashtag will be appended).
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.CashtagUrlBase">
            <summary>
            Gets or sets the href value for cashtag links (to which the cashtag will be appended).
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.InvisibleTagAttrs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.NoFollow">
            <summary>
            Gets or sets a value indicating if the current URL links will include rel="nofollow" (true by default).
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.UsernameIncludeSymbol">
            <summary>
            Sets a value indicating whether the at mark '@' should be included in the link (false by default).
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.SymbolTag">
            <summary>
            Sets HTML tag to be applied around #/@/# symbols in hashtags/usernames/lists/cashtag. The tag should be without brackets e.g., "b" or "s".
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.TextWithSymbolTag">
            <summary>
            Set HTML tag to be applied around text part of hashtags/usernames/lists/cashtag. The tag should be without brackets e.g., "b" or "s".
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.UrlTarget">
            <summary>
            Sets the value of the target attribute in auto-linked URLs e.g., "_blank"
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.ExtractMarkdownUrl">
            <summary>
            Indicates whether URLs without protocol should be extracted.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.ExtractMentionedEntity">
            <summary>
            Indicates whether mentioned user/space should be extacted with id.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.ExtractURLWithoutProtocol">
            <summary>
            Indicates whether URLs without protocol should be extracted.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.ExtractURLWithoutTopDomain">
            <summary>
            Indicates whether URLs without top level domain (intranet urls) should be extracted.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.LinkAttributeModifier">
            <summary>
            Sets a modifier to modify attributes of a link based on an entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.LinkTextModifier">
            <summary>
            Sets a modifier to modify text of a link based on an entity.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Autolink.OpenExternalLinksInNewWindow">
            <summary>
            Sets whether external links should be opened in a new window/tab
            </summary>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.TwitterText.Autolink"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.#ctor(Weavy.Core.TwitterText.Extractor)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.TwitterText.Autolink"/> class using the specified <see cref="T:Weavy.Core.TwitterText.Extractor"/>.
            </summary>
            <param name="extractor">The extractor used to extract entities.</param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.EscapeBrackets(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.EscapeHTML(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.LinkToText(Weavy.Core.TwitterText.Token,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="text"></param>
            <param name="attributes"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.LinkToTextWithSymbol(Weavy.Core.TwitterText.Token,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="symbol"></param>
            <param name="text"></param>
            <param name="attributes"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.LinkToHashtag(Weavy.Core.TwitterText.Token,System.String,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="text"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.LinkToCashtag(Weavy.Core.TwitterText.Token,System.String,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="text"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.LinkToMention(Weavy.Core.TwitterText.Token,System.String,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="text"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.LinkToUrl(Weavy.Core.TwitterText.Token,System.String,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="text"></param>
            <param name="builder"></param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.AutoLinkTokens(System.String,System.Collections.Generic.List{Weavy.Core.TwitterText.Token})">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.AutoLink(System.String)">
            <summary>
            Auto-link mentions, hashtags, cashtags and urls.
            </summary>
            <param name="text">text of the Tweet to auto-link</param>
            <returns>text with auto-link HTML added</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.AutoLinkMentions(System.String)">
            <summary>
            Auto-link the @username references in the provided text. 
            Links to @username references will  have the usernameClass CSS classes added. 
            </summary>
            <param name="text">text of the Tweet to auto-link</param>
            <returns>text with auto-link HTML added</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.AutoLinkHashtags(System.String)">
            <summary>
            Auto-link #hashtag references in the provided Tweet text. The #hashtag links will have the hashtagClass CSS class added.
            </summary>
            <param name="text">text of the Tweet to auto-link</param>
            <returns>text with auto-link HTML added</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.AutoLinkUrls(System.String)">
            <summary>
            Auto-link URLs in the Tweet text provided. This only auto-links URLs with protocol.
            </summary>
            <param name="text">text of the Tweet to auto-link</param>
            <returns>text with auto-link HTML added</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.AutoLinkCashtags(System.String)">
            <summary>
            Auto-link $cashtag references in the provided Tweet text. The $cashtag links will have the cashtagClass CSS class added.
            </summary>
            <param name="text">text of the Tweet to auto-link</param>
            <returns>text with auto-link HTML added.</returns>
        </member>
        <member name="T:Weavy.Core.TwitterText.Autolink.ILinkAttributeModifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.ILinkAttributeModifier.Modify(Weavy.Core.TwitterText.Token,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="attributes"></param>
        </member>
        <member name="T:Weavy.Core.TwitterText.Autolink.ILinkTextModifier">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.TwitterText.Autolink.ILinkTextModifier.Modify(Weavy.Core.TwitterText.Token,System.String)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.TwitterText.Tlds">
            <summary>
            List of top level domains from https://www.iana.org/domains/root/db (last updated 2018-03-02).
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Tlds.GTLDS">
            <summary>
            Generic top level domains (including reserved according to https://tools.ietf.org/html/rfc2606)
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.Tlds.CTLDS">
            <summary>
            Country top level domains.
            </summary>
        </member>
        <member name="T:Weavy.Core.TwitterText.Token">
            <summary>
            Contains data about tokens in a plain text message.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Token.Type">
            <summary>
            Gets or sets the token type, i.e. Url, Hashtag, Mention or Cashtag.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Token.Value">
            <summary>
            Gets or sets the value of the token.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Token.Start">
            <summary>
            Gets or sets the start index of the token in the text.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Token.End">
            <summary>
            Gets or sets the end index of the token in the text.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Token.UrlText">
            <summary>
            Gets or sets a string to display instead of the URL.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Token.UrlTitle">
            <summary>
            Gets or sets a string to use as title text for the URL.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Token.UserId">
            <summary>
            Gets or sets the id of the mentioned user.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Token.SpaceId">
            <summary>
            Gets or sets the id of the mentioned space.
            </summary>
        </member>
        <member name="M:Weavy.Core.TwitterText.Token.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Weavy.Core.TwitterText.Token.#ctor(System.Int32,System.Int32,System.String,Weavy.Core.TwitterText.TokenType)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.TwitterText.Token"/> class.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Token.#ctor(System.Text.RegularExpressions.Match,Weavy.Core.TwitterText.TokenType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.TwitterText.Token"/> class.
            </summary>
            <param name="matcher"></param>
            <param name="type"></param>
            <param name="groupNumber"></param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Token.#ctor(System.Text.RegularExpressions.Match,Weavy.Core.TwitterText.TokenType,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.TwitterText.Token"/> class.
            </summary>
            <param name="matcher"></param>
            <param name="type"></param>
            <param name="groupNumber"></param>
            <param name="startOffset"></param>
        </member>
        <member name="M:Weavy.Core.TwitterText.Token.Equals(System.Object)">
            <summary>
            Determines whether this instance and another Token have the same value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Token.GetHashCode">
            <summary>
            Returns the hashcode for this Token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Token.ToString">
            <summary>
            Returns a string representation of the current token.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.TwitterText.Extractor">
            <summary>
            A class to extract usernames, lists, hashtags and URLs from Tweet text.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Extractor.ExtractMarkdownUrl">
            <summary>
            Indicates whether URLs without protocol should be extracted.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Extractor.ExtractMentionedEntity">
            <summary>
            Indicates whether mentioned user/space should be extacted with id.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Extractor.ExtractUrlWithoutProtocol">
            <summary>
            Indicates whether URLs without protocol should be extracted.
            </summary>
        </member>
        <member name="P:Weavy.Core.TwitterText.Extractor.ExtractUrlWithoutTopDomain">
            <summary>
            Indicates whether URLs without top level domain (intranet urls) should be extracted.
            </summary>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Weavy.Core.TwitterText.Extractor"/> class.
            </summary>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractTokens(System.String)">
            <summary>
            Extract URLs, #hashtags, @mentions, lists and $cashtags from a given text/tweet.
            </summary>
            <param name="text">text of the tweet from which to extract entities.</param>
            <returns>List of entities referenced.</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractMentions(System.String)">
            <summary>
            Extract @username references from Tweet text. A mention is an occurance of @username anywhere in a Tweet.
            </summary>
            <param name="text">text of the tweet from which to extract usernames.</param>
            <returns>List of usernames referenced (without the leading @ sign).</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractMentionsWithIndices(System.String)">
            <summary>
            Extract @username references from Tweet text. A mention is an occurance of @username anywhere in a Tweet.
            </summary>
            <param name="text">text of the tweet from which to extract usernames.</param>
            <returns>List of usernames referenced (without the leading @ sign).</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractReplyTo(System.String)">
            <summary>
            Extract a @username reference from the beginning of Tweet text. A reply is an occurance of @username at the
            beginning of a Tweet, preceded by 0 or more spaces.
            </summary>
            <param name="text">text of the tweet from which to extract the replied to username</param>
            <returns>username referenced, if any (without the leading @ sign). Returns null if this is not a reply.</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractUrls(System.String)">
            <summary>
            Extract URL references from Tweet text.
            </summary>
            <param name="text">text of the tweet from which to extract URLs</param>
            <returns>List of URLs referenced.</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractUrlsWithIndices(System.String)">
            <summary>
            Extract URL references from Tweet text.
            </summary>
            <param name="text">text of the tweet from which to extract URLs.</param>
            <returns>List of URLs referenced.</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractHashtags(System.String)">
            <summary>
            Extract #hashtag references from Tweet text.
            </summary>
            <param name="text">text of the tweet from which to extract hashtags.</param>
            <returns>List of hashtags referenced (without the leading # sign).</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractHashtagsWithIndices(System.String)">
            <summary>
            Extract #hashtag references from Tweet text. 
            </summary>
            <param name="text">text of the tweet from which to extract hashtags.</param>
            <returns>List of hashtags referenced (without the leading # sign)List of hashtags referenced (without the leading # sign).</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractHashtagsWithIndices(System.String,System.Boolean)">
            <summary>
            Extract #hashtag references from Tweet text.
            </summary>
            <param name="text">text of the tweet from which to extract hashtags</param>
            <param name="checkUrlOverlap">checkUrlOverlap if true, check if extracted hashtags overlap URLs and remove overlapping ones</param>
            <returns>List of hashtags referenced (without the leading # sign)</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractCashtags(System.String)">
            <summary>
            Extract $cashtag references from Tweet text.
            </summary>
            <param name="text">text of the tweet from which to extract cashtags</param>
            <returns>List of cashtags referenced (without the leading $ sign)</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.ExtractCashtagsWithIndices(System.String)">
            <summary>
            Extract $cashtag references from Tweet text.
            </summary>
            <param name="text">text of the tweet from which to extract cashtags</param>
            <returns>List of cashtags referenced (without the leading $ sign)</returns>
        </member>
        <member name="M:Weavy.Core.TwitterText.Extractor.RemoveOverlappingEntities(System.Collections.Generic.List{Weavy.Core.TwitterText.Token})">
            <summary>
            Remove overlapping entities. Two entities overlap only when one is URL and the other is hashtag/mention
            which is a part of the URL. When it happens, we choose URL over hashtag/mention by selecting the one with smaller start index.
            </summary>
            <param name="entities"></param>
            <returns></returns>
        </member>
        <member name="T:Weavy.Core.TwitterText.Extractor.StartIndexComparer">
            <summary>
            Compares entities bases on start index.
            </summary>
        </member>
        <member name="T:Weavy.Core.TwitterText.Tweetex">
            <summary>
            Patterns and regular expressions used by the twitter text methods.
            </summary>
        </member>
        <member name="T:Weavy.Core.TwitterText.TokenType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.TokenType.Url">
            <summary>
            Url token
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.TokenType.Hashtag">
            <summary>
            #hashtag token
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.TokenType.Mention">
            <summary>
            @mention token
            </summary>
        </member>
        <member name="F:Weavy.Core.TwitterText.TokenType.Cashtag">
            <summary>
            $cashtag token
            </summary>
        </member>
    </members>
</doc>
